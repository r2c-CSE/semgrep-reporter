Finding Title,Finding Description & Remediation,status,First Seen,severity,confidence,triage_state,triaged_at,triage_comment,state_updated_at,repository,location
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.615046+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/fileServer.ts', 'line': 33, 'column': 41, 'end_line': 33, 'end_column': 45}"
javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli,Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.,open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.615032+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/dataExport.ts', 'line': 61, 'column': 32, 'end_line': 61, 'end_column': 55}"
javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli,Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.,open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.615018+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/dataExport.ts', 'line': 80, 'column': 35, 'end_line': 80, 'end_column': 52}"
javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli,Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.,open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.615004+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/likeProductReviews.ts', 'line': 18, 'column': 34, 'end_line': 18, 'end_column': 45}"
javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli,Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.,open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614990+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/likeProductReviews.ts', 'line': 25, 'column': 13, 'end_line': 25, 'end_column': 24}"
javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli,Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.,open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614977+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/likeProductReviews.ts', 'line': 31, 'column': 46, 'end_line': 31, 'end_column': 57}"
javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli,Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.,open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614963+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/likeProductReviews.ts', 'line': 42, 'column': 21, 'end_line': 42, 'end_column': 32}"
javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli,Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.,open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614949+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/orderHistory.ts', 'line': 17, 'column': 49, 'end_line': 17, 'end_column': 72}"
javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli,Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.,open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614936+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/orderHistory.ts', 'line': 36, 'column': 35, 'end_line': 36, 'end_column': 57}"
javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli,Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.,open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614922+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/showProductReviews.ts', 'line': 34, 'column': 31, 'end_line': 34, 'end_column': 66}"
javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli,Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.,open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614908+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/trackOrder.ts', 'line': 17, 'column': 30, 'end_line': 17, 'end_column': 68}"
javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli,Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.,open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614894+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/updateProductReviews.ts', 'line': 18, 'column': 7, 'end_line': 18, 'end_column': 27}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614880+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'data/static/codefixes/dbSchemaChallenge_1.ts', 'line': 5, 'column': 74, 'end_line': 5, 'end_column': 82}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614867+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'data/static/codefixes/dbSchemaChallenge_3.ts', 'line': 11, 'column': 74, 'end_line': 11, 'end_column': 82}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614853+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'data/static/codefixes/unionSqlInjectionChallenge_1.ts', 'line': 6, 'column': 74, 'end_line': 6, 'end_column': 82}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614839+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'data/static/codefixes/unionSqlInjectionChallenge_3.ts', 'line': 10, 'column': 74, 'end_line': 10, 'end_column': 82}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614825+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/login.ts', 'line': 36, 'column': 66, 'end_line': 36, 'end_column': 86}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-08-10T17:44:51.638332Z,high,medium,untriaged,,,2024-08-10 17:44:51.614812+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/search.ts', 'line': 23, 'column': 74, 'end_line': 23, 'end_column': 82}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",ignored,2024-08-10T17:44:51.638332Z,high,high,ignored,2024-08-10 17:44:51.970982+00:00,This isn't user controlled input,2024-08-10 17:44:51.614798+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'data/static/codefixes/dbSchemaChallenge_1.ts', 'line': 5, 'column': 28, 'end_line': 5, 'end_column': 162}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-08-10T17:44:51.638332Z,high,high,untriaged,,,2024-08-10 17:44:51.614785+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'data/static/codefixes/dbSchemaChallenge_3.ts', 'line': 11, 'column': 28, 'end_line': 11, 'end_column': 159}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-08-10T17:44:51.638332Z,high,high,untriaged,,,2024-08-10 17:44:51.614771+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'data/static/codefixes/unionSqlInjectionChallenge_1.ts', 'line': 6, 'column': 28, 'end_line': 6, 'end_column': 159}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-08-10T17:44:51.638332Z,high,high,untriaged,,,2024-08-10 17:44:51.614758+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'data/static/codefixes/unionSqlInjectionChallenge_3.ts', 'line': 10, 'column': 28, 'end_line': 10, 'end_column': 159}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-08-10T17:44:51.638332Z,high,high,untriaged,,,2024-08-10 17:44:51.614744+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/login.ts', 'line': 36, 'column': 28, 'end_line': 36, 'end_column': 169}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-08-10T17:44:51.638332Z,high,high,untriaged,,,2024-08-10 17:44:51.614730+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/search.ts', 'line': 23, 'column': 28, 'end_line': 23, 'end_column': 159}"
javascript.express.express-fs-filename.express-fs-filename,"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614716+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/profileImageFileUpload.ts', 'line': 28, 'column': 19, 'end_line': 28, 'end_column': 118}"
javascript.express.express-fs-filename.express-fs-filename,"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614703+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/profileImageUrlUpload.ts', 'line': 31, 'column': 54, 'end_line': 31, 'end_column': 136}"
javascript.express.express-fs-filename.express-fs-filename,"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614689+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/vulnCodeFixes.ts', 'line': 79, 'column': 23, 'end_line': 79, 'end_column': 69}"
javascript.express.express-fs-filename.express-fs-filename,"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.615073+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/vulnCodeFixes.ts', 'line': 80, 'column': 62, 'end_line': 80, 'end_column': 108}"
javascript.express.express-fs-filename.express-fs-filename,"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.615059+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/vulnCodeSnippet.ts', 'line': 93, 'column': 21, 'end_line': 93, 'end_column': 67}"
javascript.express.express-fs-filename.express-fs-filename,"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614675+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/vulnCodeSnippet.ts', 'line': 94, 'column': 60, 'end_line': 94, 'end_column': 106}"
javascript.express.open-redirect-deepsemgrep.open-redirect-deepsemgrep,The application builds a URL using user-controlled input which can lead to an open redirect vulnerability. An attacker can manipulate the URL and redirect users to an arbitrary domain. Open redirect vulnerabilities can lead to issues such as Cross-site scripting (XSS) or redirecting to a malicious domain for activities such as phishing to capture users' credentials. To prevent this vulnerability perform strict input validation of the domain against an allowlist of approved domains. Notify a user in your application that they are leaving the website. Display a domain where they are redirected to the user. A user can then either accept or deny the redirect to an untrusted site.,ignored,2024-08-10T17:44:51.638332Z,medium,high,ignored,2024-08-29 19:38:32.543662+00:00,"The code includes a check to ensure that the URL to which it redirects is allowed by calling 'security.isRedirectAllowed(toUrl)'. This indicates that there is a sanitization process in place to validate the URL against an allowlist, which aligns with the best practices for preventing open redirect vulnerabilities.",2024-08-10 17:44:51.614662+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/redirect.ts', 'line': 19, 'column': 20, 'end_line': 19, 'end_column': 25}"
javascript.express.request.ssrf-deepsemgrep.ssrf-deepsemgrep,"Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.",open,2024-08-10T17:44:51.638332Z,medium,high,untriaged,,,2024-08-10 17:44:51.614648+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/profileImageUrlUpload.ts', 'line': 23, 'column': 16, 'end_line': 23, 'end_column': 19}"
javascript.express.security.audit.express-open-redirect.express-open-redirect,"The application redirects to a URL specified by user-supplied input `query` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.",open,2024-08-10T17:44:51.638332Z,medium,high,untriaged,,,2024-08-10 17:44:51.614634+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/redirect.ts', 'line': 19, 'column': 20, 'end_line': 19, 'end_column': 25}"
javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal,"Possible writing outside of the destination, make sure that the target path is nested in the intended destination",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614621+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/dataErasure.ts', 'line': 69, 'column': 45, 'end_line': 69, 'end_column': 60}"
javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal,"Possible writing outside of the destination, make sure that the target path is nested in the intended destination",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614607+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/keyServer.ts', 'line': 14, 'column': 52, 'end_line': 14, 'end_column': 56}"
javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal,"Possible writing outside of the destination, make sure that the target path is nested in the intended destination",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614593+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/logfileServer.ts', 'line': 14, 'column': 42, 'end_line': 14, 'end_column': 46}"
javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal,"Possible writing outside of the destination, make sure that the target path is nested in the intended destination",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614579+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/quarantineServer.ts', 'line': 14, 'column': 52, 'end_line': 14, 'end_column': 56}"
javascript.express.security.audit.express-res-sendfile.express-res-sendfile,"The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614565+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/fileServer.ts', 'line': 33, 'column': 20, 'end_line': 33, 'end_column': 46}"
javascript.express.security.audit.express-res-sendfile.express-res-sendfile,"The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614551+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/keyServer.ts', 'line': 14, 'column': 20, 'end_line': 14, 'end_column': 57}"
javascript.express.security.audit.express-res-sendfile.express-res-sendfile,"The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614537+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/logfileServer.ts', 'line': 14, 'column': 20, 'end_line': 14, 'end_column': 47}"
javascript.express.security.audit.express-res-sendfile.express-res-sendfile,"The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614523+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/quarantineServer.ts', 'line': 14, 'column': 20, 'end_line': 14, 'end_column': 57}"
javascript.express.security.audit.express-ssrf.express-ssrf,"The following request request.get() was found to be crafted from user-input `req` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. ",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614509+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/profileImageUrlUpload.ts', 'line': 23, 'column': 16, 'end_line': 23, 'end_column': 19}"
javascript.express.security.express-insecure-template-usage.express-insecure-template-usage,"User data from `req` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614495+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/userProfile.ts', 'line': 56, 'column': 22, 'end_line': 56, 'end_column': 43}"
javascript.express.session-fixation.session-fixation,"Detected `req` argument which enters `res.cookie`, this can lead to session fixation vulnerabilities if an attacker can control the cookie value. This vulnerability can lead to unauthorized access to accounts, and in some esoteric cases, Cross-Site-Scripting (XSS). Users should not be able to influence cookies directly, for session cookies, they should be generated securely using an approved session management library. If the cookie does need to be set by a user, consider using an allow-list based approach to restrict the cookies which can be set.",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614481+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/insecurity.ts', 'line': 195, 'column': 31, 'end_line': 195, 'end_column': 36}"
javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",open,2024-08-10T17:44:51.638332Z,medium,high,untriaged,,,2024-08-10 17:44:51.614468+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/insecurity.ts', 'line': 56, 'column': 56, 'end_line': 56, 'end_column': 66}"
javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp,"RegExp() called with a `challengeKey` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614454+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/codingChallenges.ts', 'line': 76, 'column': 9, 'end_line': 76, 'end_column': 67}"
javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp,"RegExp() called with a `file` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614440+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/codingChallenges.ts', 'line': 76, 'column': 9, 'end_line': 76, 'end_column': 67}"
javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp,"RegExp() called with a `paths` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614426+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/codingChallenges.ts', 'line': 76, 'column': 9, 'end_line': 76, 'end_column': 67}"
javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp,"RegExp() called with a `challengeKey` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614412+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/codingChallenges.ts', 'line': 78, 'column': 16, 'end_line': 78, 'end_column': 77}"
javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp,"RegExp() called with a `file` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614398+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/codingChallenges.ts', 'line': 78, 'column': 16, 'end_line': 78, 'end_column': 77}"
javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp,"RegExp() called with a `paths` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614385+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/codingChallenges.ts', 'line': 78, 'column': 16, 'end_line': 78, 'end_column': 77}"
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614371+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'data/staticData.ts', 'line': 7, 'column': 33, 'end_line': 7, 'end_column': 65}"
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614357+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/codingChallenges.ts', 'line': 24, 'column': 40, 'end_line': 24, 'end_column': 48}"
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614344+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/codingChallenges.ts', 'line': 24, 'column': 50, 'end_line': 24, 'end_column': 54}"
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614330+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/startup/restoreOverwrittenFilesWithOriginals.ts', 'line': 28, 'column': 56, 'end_line': 28, 'end_column': 105}"
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614316+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/startup/validatePreconditions.ts', 'line': 120, 'column': 36, 'end_line': 120, 'end_column': 61}"
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614301+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/dataErasure.ts', 'line': 69, 'column': 45, 'end_line': 69, 'end_column': 60}"
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614287+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/fileUpload.ts', 'line': 29, 'column': 47, 'end_line': 29, 'end_column': 55}"
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614273+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/fileUpload.ts', 'line': 39, 'column': 51, 'end_line': 39, 'end_column': 83}"
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614259+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/keyServer.ts', 'line': 14, 'column': 52, 'end_line': 14, 'end_column': 56}"
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614245+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/logfileServer.ts', 'line': 14, 'column': 42, 'end_line': 14, 'end_column': 46}"
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614231+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/order.ts', 'line': 45, 'column': 78, 'end_line': 45, 'end_column': 85}"
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",open,2024-08-10T17:44:51.638332Z,medium,low,untriaged,,,2024-08-10 17:44:51.614217+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/quarantineServer.ts', 'line': 14, 'column': 52, 'end_line': 14, 'end_column': 56}"
typescript.angular.angular-route-bypass-security-trust.angular-route-bypass-security-trust,"Untrusted input could be used to tamper with a web page rendering, which can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. Validate the user input, perform contextual output encoding, or sanitize the input. A popular library used to prevent XSS is DOMPurify. You can also use libraries and frameworks such as Angular, Vue, and React, which offer secure defaults when rendering input.",open,2024-08-10T17:44:51.638332Z,medium,medium,untriaged,,,2024-08-10 17:44:51.614202+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'frontend/src/app/search-result/search-result.component.ts', 'line': 151, 'column': 65, 'end_line': 151, 'end_column': 75}"
javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",open,2024-08-10T17:44:51.638332Z,low,low,untriaged,,,2024-08-10 17:44:51.614170+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'server.ts', 'line': 148, 'column': 21, 'end_line': 148, 'end_column': 63}"
javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing,"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",open,2024-08-03T17:27:26.395767Z,medium,medium,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'server.ts', 'line': 260, 'column': 3, 'end_line': 260, 'end_column': 76}"
javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing,"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",open,2024-08-03T17:27:26.395767Z,medium,medium,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'server.ts', 'line': 264, 'column': 3, 'end_line': 264, 'end_column': 109}"
javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing,"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",open,2024-08-03T17:27:26.395767Z,medium,medium,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'server.ts', 'line': 268, 'column': 3, 'end_line': 268, 'end_column': 115}"
javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing,"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",open,2024-08-03T17:27:26.395767Z,medium,medium,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'server.ts', 'line': 272, 'column': 3, 'end_line': 272, 'end_column': 103}"
javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key,Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.,open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/insecurity.ts', 'line': 44, 'column': 39, 'end_line': 44, 'end_column': 94}"
javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key,Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.,open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/insecurity.ts', 'line': 152, 'column': 16, 'end_line': 152, 'end_column': 55}"
generic.secrets.security.detected-generic-secret.detected-generic-secret,Generic Secret detected,open,2024-08-03T17:27:26.395767Z,high,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'data/static/users.yml', 'line': 150, 'column': 7, 'end_line': 150, 'end_column': 47}"
javascript.browser.security.insecure-document-method.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",open,2024-08-03T17:27:26.395767Z,high,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'frontend/src/hacking-instructor/index.ts', 'line': 107, 'column': 3, 'end_line': 107, 'end_column': 43}"
html.security.audit.missing-integrity.missing-integrity,"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'frontend/src/index.html', 'line': 14, 'column': 3, 'end_line': 14, 'end_column': 127}"
html.security.audit.missing-integrity.missing-integrity,"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'frontend/src/index.html', 'line': 15, 'column': 3, 'end_line': 15, 'end_column': 101}"
html.security.audit.missing-integrity.missing-integrity,"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'frontend/src/index.html', 'line': 16, 'column': 3, 'end_line': 16, 'end_column': 86}"
javascript.browser.security.eval-detected.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/captcha.ts', 'line': 23, 'column': 20, 'end_line': 23, 'end_column': 36}"
javascript.browser.security.eval-detected.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/userProfile.ts', 'line': 36, 'column': 26, 'end_line': 36, 'end_column': 36}"
javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage,"Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function.",open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/b2bOrder.ts', 'line': 22, 'column': 9, 'end_line': 22, 'end_column': 80}"
javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent,Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it.,open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/fileUpload.ts', 'line': 80, 'column': 24, 'end_line': 80, 'end_column': 140}"
javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape,"Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.",open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'views/promotionVideo.pug', 'line': 79, 'column': 13, 'end_line': 79, 'end_column': 40}"
javascript.jssha.jssha-sha1.jssha-sha1,"The SHA1 hashing algorithm is considered to be weak. If this is used in any sensitive operation such as password hashing, or is used to ensure data integrity (collision sensitive) then you should use a stronger hashing algorithm. For passwords, consider using `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider using `SHA-256`.",open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/utils.ts', 'line': 90, 'column': 18, 'end_line': 90, 'end_column': 44}"
javascript.lang.hardcoded.strings.detected-private-key.detected-private-key,"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).",open,2024-08-03T17:27:26.395767Z,medium,medium,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/insecurity.ts', 'line': 23, 'column': 7, 'end_line': 23, 'end_column': 17}"
javascript.lang.hardcoded.strings.detected-private-key.detected-private-key,"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).",open,2024-08-03T17:27:26.395767Z,medium,medium,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/insecurity.ts', 'line': 23, 'column': 21, 'end_line': 23, 'end_column': 901}"
javascript.lang.hardcoded.strings.detected-private-key.detected-private-key,"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).",open,2024-08-03T17:27:26.395767Z,medium,medium,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/insecurity.ts', 'line': 56, 'column': 56, 'end_line': 56, 'end_column': 66}"
javascript.lang.hardcoded.strings.detected-private-key.detected-private-key,"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).",open,2024-08-03T17:27:26.395767Z,medium,medium,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/insecurity.ts', 'line': 152, 'column': 44, 'end_line': 152, 'end_column': 54}"
javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop,"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'frontend/src/hacking-instructor/helpers/helpers.ts', 'line': 36, 'column': 9, 'end_line': 36, 'end_column': 54}"
javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag,"Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.",open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/videoHandler.ts', 'line': 57, 'column': 90, 'end_line': 57, 'end_column': 94}"
javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag,"Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.",open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/videoHandler.ts', 'line': 69, 'column': 165, 'end_line': 69, 'end_column': 169}"
javascript.sequelize.node-sequelize-hardcoded-secret-argument.node-sequelize-hardcoded-secret-argument,"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).",open,2024-08-03T17:27:26.395767Z,medium,high,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'models/index.ts', 'line': 29, 'column': 58, 'end_line': 29, 'end_column': 66}"
yaml.docker-compose.security.no-new-privileges.no-new-privileges,Service 'app' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.,open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'docker-compose.test.yml', 'line': 7, 'column': 3, 'end_line': 7, 'end_column': 6}"
yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service,"Service 'app' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",open,2024-08-03T17:27:26.395767Z,medium,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'docker-compose.test.yml', 'line': 7, 'column': 3, 'end_line': 7, 'end_column': 6}"
javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization,"Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.",open,2024-08-03T17:27:26.395767Z,low,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'data/static/codefixes/restfulXssChallenge_2.ts', 'line': 59, 'column': 34, 'end_line': 59, 'end_column': 82}"
javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization,"Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description.replaceAll('<', '&lt;')`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.",open,2024-08-03T17:27:26.395767Z,low,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'data/static/codefixes/restfulXssChallenge_2.ts', 'line': 59, 'column': 34, 'end_line': 59, 'end_column': 106}"
javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.,open,2024-08-03T17:27:26.395767Z,low,low,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'server.ts', 'line': 105, 'column': 7, 'end_line': 105, 'end_column': 22}"
java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep,"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",open,2024-07-07T23:58:18.548600Z,high,medium,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'src/assistant-fix-custom-message.java', 'line': 14, 'column': 9, 'end_line': 14, 'end_column': 37}"
semgrep_demo.crlf-injection-logs-deepsemgrep-javaorg-copy,"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content. Please use the Jsoup.clean() function to sanitize data.",reviewing,2024-07-07T23:58:18.548595Z,high,medium,reviewing,2024-07-25 18:14:20.992926+00:00,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'src/assistant-fix-custom-message.java', 'line': 14, 'column': 9, 'end_line': 14, 'end_column': 37}"
java.lang.security.audit.crlf-injection-logs.crlf-injection-logs,"When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",open,2024-07-07T23:58:18.548584Z,medium,medium,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'src/assistant-fix-custom-message.java', 'line': 13, 'column': 9, 'end_line': 14, 'end_column': 37}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-07-07T23:58:14.348414Z,high,medium,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'src/assistant-fix-sqli-sequelize.ts', 'line': 5, 'column': 76, 'end_line': 5, 'end_column': 84}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-07-07T23:58:14.348403Z,high,high,untriaged,,,,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'src/assistant-fix-sqli-sequelize.ts', 'line': 5, 'column': 30, 'end_line': 5, 'end_column': 164}"
javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing,"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",fixed,2024-07-07T20:21:01.972703Z,medium,medium,untriaged,,,2024-07-27 17:16:28.270688+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'server.ts', 'line': 260, 'column': 3, 'end_line': 260, 'end_column': 76}"
javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing,"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",fixed,2024-07-07T20:21:01.972698Z,medium,medium,untriaged,,,2024-07-27 17:16:28.270672+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'server.ts', 'line': 264, 'column': 3, 'end_line': 264, 'end_column': 109}"
javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing,"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",fixed,2024-07-07T20:21:01.972694Z,medium,medium,untriaged,,,2024-07-27 17:16:28.270657+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'server.ts', 'line': 268, 'column': 3, 'end_line': 268, 'end_column': 115}"
javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing,"Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",fixed,2024-07-07T20:21:01.972691Z,medium,medium,untriaged,,,2024-07-27 17:16:28.270641+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'server.ts', 'line': 272, 'column': 3, 'end_line': 272, 'end_column': 103}"
javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal,"Possible writing outside of the destination, make sure that the target path is nested in the intended destination",fixed,2024-07-07T20:21:01.972671Z,medium,medium,untriaged,,,2024-07-20 17:06:08.093984+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/fileServer.ts', 'line': 33, 'column': 41, 'end_line': 33, 'end_column': 45}"
javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key,Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.,fixed,2024-07-07T20:21:01.972573Z,medium,low,untriaged,,,2024-07-27 17:16:28.270625+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/insecurity.ts', 'line': 44, 'column': 39, 'end_line': 44, 'end_column': 94}"
javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key,Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.,fixed,2024-07-07T20:21:01.972569Z,medium,low,untriaged,,,2024-07-27 17:16:28.270585+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'lib/insecurity.ts', 'line': 152, 'column': 16, 'end_line': 152, 'end_column': 55}"
javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",fixed,2024-07-07T20:21:01.972540Z,medium,low,untriaged,,,2024-07-20 17:06:08.093944+00:00,"{'name': 'Semgrep-Demo/juice-shop', 'url': 'https://github.com/Semgrep-Demo/juice-shop'}","{'file_path': 'routes/fileServer.ts', 'line': 33, 'column': 41, 'end_line': 33, 'end_column': 45}"
