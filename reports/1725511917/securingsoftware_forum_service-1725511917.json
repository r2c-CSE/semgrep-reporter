[{"id": 77515152, "ref": "update_products", "syntactic_id": "913be96a6bfcd9dcc8a46b7fc0eef35f", "match_based_id": "9137c0160eff7f65f601aa3816af577e094d6a3fb5a6f39c036216f53c41ddd7cc1593405e81423e82044cd258a04fc6a371c134cfbd6a80b18d7d33aafd1366_0", "repository": {"name": "securingsoftware/forum-service", "url": "https://gitlab.com/securingsoftware/forum-service"}, "line_of_code_url": "https://gitlab.com/securingsoftware/forum-service/-/blob/c962a8eec25393dba260a14ee22dca15a51d52ed/sqli-sequelize.ts#L5", "first_seen_scan_id": 31930919, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-26T02:04:37.720567Z", "relevant_since": "2024-07-26T02:04:37.719613Z", "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "location": {"file_path": "sqli-sequelize.ts", "line": 5, "column": 76, "end_line": 5, "end_column": 84}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["SQL Injection"], "cwe_names": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp_names": ["A01:2017 - Injection", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 77515151, "ref": "update_products", "syntactic_id": "9cb6018ebef0f35f0b6c5b680e10dfd1", "match_based_id": "bafb77118d93d72fa07accea596e0d9acf0f23acc2294120a72535a46bac0598e90fd5f93f16b38efda9d67d60d2d0b35fcae79cb09e3186a3809d323981a922_0", "repository": {"name": "securingsoftware/forum-service", "url": "https://gitlab.com/securingsoftware/forum-service"}, "line_of_code_url": "https://gitlab.com/securingsoftware/forum-service/-/blob/c962a8eec25393dba260a14ee22dca15a51d52ed/sqli-sequelize.ts#L5", "first_seen_scan_id": 31930919, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "high", "created_at": "2024-07-26T02:04:37.720533Z", "relevant_since": "2024-07-26T02:04:37.719603Z", "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "location": {"file_path": "sqli-sequelize.ts", "line": 5, "column": 30, "end_line": 5, "end_column": 164}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "confidence": "high", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["SQL Injection"], "cwe_names": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp_names": ["A01:2017 - Injection", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 77514123, "ref": "main", "syntactic_id": "9704ecb19f87b80ad8c009b367c85eef", "match_based_id": "29bf75107da961718a8d8a633958014c6059a7d4c223d043b44a3cf0563722e0140e854a6722aec8f6848a4fae696964e79934f93fa8e012eafe99fd6bcaa5fe_0", "repository": {"name": "securingsoftware/forum-service", "url": "https://gitlab.com/securingsoftware/forum-service"}, "line_of_code_url": "https://gitlab.com/securingsoftware/forum-service/-/blob/8222031ec8963a524948141d7361d0acc7b3ebb7/src/deno-dangerous-run.js#L12", "first_seen_scan_id": 31930629, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-26T01:58:21.166994Z", "relevant_since": "2024-07-26T01:58:21.164715Z", "rule_name": "javascript.deno.security.audit.deno-dangerous-run.deno-dangerous-run", "rule_message": "Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability.", "location": {"file_path": "src/deno-dangerous-run.js", "line": 12, "column": 11, "end_line": 12, "end_column": 20}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "javascript.deno.security.audit.deno-dangerous-run.deno-dangerous-run", "message": "Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Command Injection"], "cwe_names": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp_names": ["A01:2017 - Injection", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 77514122, "ref": "main", "syntactic_id": "c51213876db3fcefca06784ac055f5f9", "match_based_id": "42b425e345cd3026962f094e80018f85ec048603985eddd599398961e168299b475f91eb7e7a9f345c0f551d13992c1ac3a064123dac330c77c7a7cd37797c62_0", "repository": {"name": "securingsoftware/forum-service", "url": "https://gitlab.com/securingsoftware/forum-service"}, "line_of_code_url": "https://gitlab.com/securingsoftware/forum-service/-/blob/8222031ec8963a524948141d7361d0acc7b3ebb7/src/shelljs-exec-injection.js#L5", "first_seen_scan_id": 31930629, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-26T01:58:21.166963Z", "relevant_since": "2024-07-26T01:58:21.164703Z", "rule_name": "javascript.shelljs.security.shelljs-exec-injection.shelljs-exec-injection", "rule_message": "If unverified user data can reach the `exec` method it can result in Remote Code Execution", "location": {"file_path": "src/shelljs-exec-injection.js", "line": 5, "column": 12, "end_line": 5, "end_column": 49}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "javascript.shelljs.security.shelljs-exec-injection.shelljs-exec-injection", "message": "If unverified user data can reach the `exec` method it can result in Remote Code Execution", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Command Injection"], "cwe_names": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "owasp_names": ["A01:2017 - Injection", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}]