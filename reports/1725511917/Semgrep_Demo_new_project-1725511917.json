[{"id": 72095597, "ref": "main", "syntactic_id": "5c9cb7a2cce371771e1f1b3d392ed320", "match_based_id": "d4d30a64a47a998c07e0fa0c9b1d693cdd37a0679e6113587fff5825feb76a0965a7298cc2ebe3dd48a6fe04e1bb1c6cfa13d77b27b0ad1c1952fbdaef7bb14e_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/shippingservice/main.go#L85", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "reviewing", "status": "reviewing", "confidence": "high", "created_at": "2024-07-07T20:13:20.669828Z", "relevant_since": "2024-08-12T02:08:56.940212Z", "rule_name": "go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection", "rule_message": "Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'.", "location": {"file_path": "src/shippingservice/main.go", "line": 85, "column": 9, "end_line": 85, "end_column": 25}, "triaged_at": "2024-08-12T02:08:57.124892Z", "triage_comment": "This needs to be fixed", "triage_reason": null, "state_updated_at": "2024-08-12T02:08:56.937183Z", "categories": ["security"], "rule": {"name": "go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection", "message": "Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'.", "confidence": "high", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Other"], "cwe_names": ["CWE-300: Channel Accessible by Non-Endpoint"], "owasp_names": ["A07:2021 - Identification and Authentication Failures"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "  // Load the certificates from disk\n  creds, err := credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")\n  if err != nil {\n  \tlog.Fatalf(\"failed to load TLS certificates: %v\", err)\n  }\n\n  // Create a new gRPC server with the credentials\n  srv = grpc.NewServer(grpc.Creds(creds))", "explanation": "The fix introduces TLS credentials to the gRPC server, which is a valid change. However, other parts of the code may need to be updated to handle the new TLS configuration, such as ensuring the certificates are correctly placed and accessible. Additionally, the environment or deployment configuration may need to be updated to include the necessary certificates and keys."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Use TLS credentials with `grpc.NewServer()` to secure the gRPC server.", "instructions": "1. Import the `credentials` package from `google.golang.org/grpc/credentials` at the top of your file:\n    ```go\n    import \"google.golang.org/grpc/credentials\"\n    ```\n\n2. Create a new TLS credential using your SSL certificate and key files:\n    ```go\n    creds, err := credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")\n    if err != nil {\n        log.Fatalf(\"failed to load TLS credentials: %v\", err)\n    }\n    ```\n\n3. Update the `grpc.NewServer()` call to include the TLS credentials:\n    ```go\n    srv = grpc.NewServer(grpc.Creds(creds))\n    ```\n\n4. Repeat the update for the second `grpc.NewServer()` call:\n    ```go\n    srv = grpc.NewServer(grpc.Creds(creds))\n    ```\n\nYour updated code should look like this:\n\n```go\nfunc main() {\n    if os.Getenv(\"DISABLE_TRACING\") == \"\" {\n        log.Info(\"Tracing enabled, but temporarily unavailable\")\n        log.Info(\"See https://github.com/GoogleCloudPlatform/microservices-demo/issues/422 for more info.\")\n        go initTracing()\n    } else {\n        log.Info(\"Tracing disabled.\")\n    }\n\n    if os.Getenv(\"DISABLE_PROFILER\") == \"\" {\n        log.Info(\"Profiling enabled.\")\n        go initProfiling(\"shippingservice\", \"1.0.0\")\n    } else {\n        log.Info(\"Profiling disabled.\")\n    }\n\n    port := defaultPort\n    if value, ok := os.LookupEnv(\"PORT\"); ok {\n        port = value\n    }\n    port = fmt.Sprintf(\":%s\", port)\n\n    lis, err := net.Listen(\"tcp\", port)\n    if err != nil {\n        log.Fatalf(\"failed to listen: %v\", err)\n    }\n\n    creds, err := credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")\n    if err != nil {\n        log.Fatalf(\"failed to load TLS credentials: %v\", err)\n    }\n\n    var srv *grpc.Server\n    if os.Getenv(\"DISABLE_STATS\") == \"\" {\n        log.Info(\"Stats enabled, but temporarily unavailable\")\n        srv = grpc.NewServer(grpc.Creds(creds))\n    } else {\n        log.Info(\"Stats disabled.\")\n        srv = grpc.NewServer(grpc.Creds(creds))\n    }\n    svc := &server{}\n    pb.RegisterShippingServiceServer(srv, svc)\n    healthpb.RegisterHealthServer(srv, svc)\n    log.Infof(\"Shipping Service listening on port %s\", port)\n\n    // Register reflection service on gRPC server.\n    reflection.Register(srv)\n    if err := srv.Serve(lis); err != nil {\n        log.Fatalf(\"failed to serve: %v\", err)\n    }\n}\n```"}, "component": null}}, {"id": 72095596, "ref": "main", "syntactic_id": "07f801de26df5cf1c9833a05a62c8363", "match_based_id": "d4d30a64a47a998c07e0fa0c9b1d693cdd37a0679e6113587fff5825feb76a0965a7298cc2ebe3dd48a6fe04e1bb1c6cfa13d77b27b0ad1c1952fbdaef7bb14e_1", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/shippingservice/main.go#L88", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "high", "created_at": "2024-07-07T20:13:20.669812Z", "relevant_since": "2024-08-12T02:08:56.940212Z", "rule_name": "go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection", "rule_message": "Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'.", "location": {"file_path": "src/shippingservice/main.go", "line": 88, "column": 9, "end_line": 88, "end_column": 25}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": "2024-08-12T02:08:56.937169Z", "categories": ["security"], "rule": {"name": "go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection", "message": "Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'.", "confidence": "high", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Other"], "cwe_names": ["CWE-300: Channel Accessible by Non-Endpoint"], "owasp_names": ["A07:2021 - Identification and Authentication Failures"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "  // Load the TLS credentials from the certificate and key files\n  creds, err := credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")\n  if err != nil {\n  \tlog.Fatalf(\"failed to load TLS credentials: %v\", err)\n  }\n\n  // Create a new gRPC server with the TLS credentials\n  srv = grpc.NewServer(grpc.Creds(creds))", "explanation": "The fix introduces TLS credentials to the gRPC server, which is a valid change. However, other parts of the code may need to be updated to handle TLS connections properly, such as client-side changes or additional configuration. Additionally, the environment or infrastructure may need to be updated to include the certificate and key files ('cert.pem' and 'cert.key')."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Use TLS credentials when creating the gRPC server to ensure secure connections.", "instructions": "1. Import the `credentials` package at the top of your file:\n    ```go\n    import \"google.golang.org/grpc/credentials\"\n    ```\n\n2. Create the TLS credentials using your certificate and key files:\n    ```go\n    creds, err := credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")\n    if err != nil {\n        log.Fatalf(\"failed to load TLS credentials: %v\", err)\n    }\n    ```\n\n3. Pass the `creds` variable as an option when creating the gRPC server:\n    ```go\n    srv = grpc.NewServer(grpc.Creds(creds))\n    ```\n\n4. Update both instances of `grpc.NewServer()` in your code to include the credentials:\n    ```go\n    if os.Getenv(\"DISABLE_STATS\") == \"\" {\n        log.Info(\"Stats enabled, but temporarily unavailable\")\n        srv = grpc.NewServer(grpc.Creds(creds))\n    } else {\n        log.Info(\"Stats disabled.\")\n        srv = grpc.NewServer(grpc.Creds(creds))\n    }\n    ```\n\nThis ensures that your gRPC server uses TLS encryption, protecting the connection from tampering."}, "component": null}}, {"id": 72095582, "ref": "main", "syntactic_id": "dfb724069f88db33ff549f3e217f526e", "match_based_id": "64efcaf75b2dc2569af20a59a3bc7751f931756c789cdd940cff66fd1586acc8b0192a101d450c75db9458f79bfe5d572e05386e74e6be19a2101e9af577533a_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/paymentservice/server.js#L37", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669589Z", "relevant_since": "2024-08-12T02:08:56.940212Z", "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal", "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.", "location": {"file_path": "src/paymentservice/server.js", "line": 37, "column": 45, "end_line": 37, "end_column": 54}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": "2024-08-12T02:08:56.937155Z", "categories": ["security"], "rule": {"name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal", "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.", "confidence": "low", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Path Traversal"], "cwe_names": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp_names": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65704, "name": "Rule Board - Block column", "slug": "rule-board-block"}, "assistant": {"autofix": {"fix_code": "      // Import necessary modules\n      const path = require('path');\n      const grpc = require('@grpc/grpc-js');\n      const pino = require('pino');\n      const protoLoader = require('@grpc/proto-loader');\n      const charge = require('./charge');\n\n      // Function to sanitize the input path\n      function sanitizePath(inputPath) {\n        // Use path.normalize to remove any path traversal attempts\n        const normalizedPath = path.normalize(inputPath);\n\n        // Ensure the normalized path does not go outside the intended directory\n        if (normalizedPath.includes('..')) {\n          throw new Error('Invalid path: Path traversal detected');\n        }\n\n        return normalizedPath;\n      }\n\n      class HipsterShopServer {\n        constructor(protoRoot, port = HipsterShopServer.PORT) {\n          this.port = port;\n\n          // Sanitize the protoRoot before using it in path.join\n          const sanitizedProtoRoot = sanitizePath(protoRoot);\n\n          this.packages = {\n            // Use the sanitized path\n            hipsterShop: this.loadProto(path.join(sanitizedProtoRoot, 'demo.proto')),\n            health: this.loadProto(path.join(sanitizedProtoRoot, 'grpc/health/v1/health.proto'))\n          };\n\n          this.server = new grpc.Server();\n          this.loadAllProtos(sanitizedProtoRoot);\n        }\n\n        // Other methods remain unchanged\n      }", "explanation": "The fix introduces a `sanitizePath` function to prevent path traversal vulnerabilities by normalizing paths and checking for '..' sequences. However, if other parts of the codebase rely on unsanitized paths, additional changes might be necessary to ensure compatibility and prevent errors."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Validate or sanitize the `protoRoot` input to prevent path traversal vulnerabilities.", "instructions": "1. Validate the `protoRoot` input to ensure it does not contain any path traversal characters such as `..`. You can use a regular expression to check for invalid patterns or use a library like `validator` to sanitize the input.\n    ```javascript\n    const validator = require('validator');\n    if (!validator.isWhitelisted(protoRoot, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/')) {\n        throw new Error('Invalid protoRoot path');\n    }\n    ```\n2. Alternatively, if you want to ensure the path is within a specific directory, resolve the path and check it starts with the expected base directory.\n    ```javascript\n    const baseDir = '/expected/base/directory';\n    const resolvedPath = path.resolve(protoRoot);\n    if (!resolvedPath.startsWith(baseDir)) {\n        throw new Error('Invalid protoRoot path');\n    }\n    ```\n3. Use the sanitized or validated `protoRoot` when calling `path.join` to construct the file path.\n    ```javascript\n    this.packages = {\n      hipsterShop: this.loadProto(path.join(sanitizedProtoRoot, 'demo.proto')),\n      health: this.loadProto(path.join(sanitizedProtoRoot, 'grpc/health/v1/health.proto'))\n    };\n    ```\n4. Test the application to ensure that the path validation logic correctly prevents path traversal attempts and that legitimate paths are still processed correctly."}, "component": {"tag": "payments", "risk": "high"}}}, {"id": 72095581, "ref": "main", "syntactic_id": "1107532e8509db804743d7f3e147c9c2", "match_based_id": "64efcaf75b2dc2569af20a59a3bc7751f931756c789cdd940cff66fd1586acc8b0192a101d450c75db9458f79bfe5d572e05386e74e6be19a2101e9af577533a_1", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/paymentservice/server.js#L38", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669573Z", "relevant_since": "2024-08-12T02:08:56.940212Z", "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal", "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.", "location": {"file_path": "src/paymentservice/server.js", "line": 38, "column": 40, "end_line": 38, "end_column": 49}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": "2024-08-12T02:08:56.937121Z", "categories": ["security"], "rule": {"name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal", "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.", "confidence": "low", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Path Traversal"], "cwe_names": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "owasp_names": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65704, "name": "Rule Board - Block column", "slug": "rule-board-block"}, "assistant": {"autofix": {"fix_code": "      // Sanitize the protoRoot to prevent path traversal vulnerabilities\n      const sanitizedProtoRoot = path.normalize(protoRoot).replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n      health: this.loadProto(path.join(sanitizedProtoRoot, 'grpc/health/v1/health.proto'))", "explanation": "The fix introduces a sanitization step for the `protoRoot` to prevent path traversal vulnerabilities. However, there is a small chance that the issue might still be present if there are other parts of the code that use `protoRoot` without similar sanitization. Additionally, if there are other parts of the code that rely on the original behavior of `protoRoot`, those parts might need to be updated to accommodate the sanitized path."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Validate or sanitize the `protoRoot` input to prevent path traversal vulnerabilities.", "instructions": "1. Validate the `protoRoot` input to ensure it does not contain any path traversal characters such as `..`. You can use a regular expression to check for invalid patterns. For example, add a validation function:\n\n    ```javascript\n    function isValidPath(inputPath) {\n      return !inputPath.includes('..');\n    }\n    ```\n\n2. Before using `protoRoot` in `path.join`, call the validation function:\n\n    ```javascript\n    if (!isValidPath(protoRoot)) {\n      throw new Error('Invalid protoRoot path');\n    }\n    ```\n\n3. Alternatively, if you want to sanitize the input instead of just validating it, you can use the `path.normalize` method to resolve any `..` segments and ensure the resulting path is within an expected directory. For example:\n\n    ```javascript\n    const safeProtoRoot = path.normalize(protoRoot);\n    if (!safeProtoRoot.startsWith(expectedBasePath)) {\n      throw new Error('Invalid protoRoot path');\n    }\n    ```\n\n    Replace `expectedBasePath` with the base directory you expect `protoRoot` to be within.\n\n4. Use the validated or sanitized `protoRoot` in your `path.join` calls:\n\n    ```javascript\n    this.packages = {\n      hipsterShop: this.loadProto(path.join(safeProtoRoot, 'demo.proto')),\n      health: this.loadProto(path.join(safeProtoRoot, 'grpc/health/v1/health.proto'))\n    };\n    ```\n\nThis approach ensures that the `protoRoot` does not allow path traversal, preventing unauthorized file access."}, "component": {"tag": "payments", "risk": "high"}}}, {"id": 72095598, "ref": "main", "syntactic_id": "903687f6010be9a9ac5e3f4d47ee3330", "match_based_id": "139930047a303fd6fc8c8fe0dd16e8604e371952dda8bacb5ce036571e66e5329ba9109263b66e71d615d78f88ab77672207eb46656ba11bf5301d0523e6e2ee_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/loadgenerator/Dockerfile#L35", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:13:20.669844Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "rule_message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "location": {"file_path": "src/loadgenerator/Dockerfile", "line": 35, "column": 1, "end_line": 35, "end_column": 80}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "dockerfile.security.missing-user-entrypoint.missing-user-entrypoint", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "confidence": "medium", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Improper Authorization"], "cwe_names": ["CWE-269: Improper Privilege Management"], "owasp_names": ["A04:2021 - Insecure Design"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "build process", "risk": "low"}}}, {"id": 72095595, "ref": "main", "syntactic_id": "0916beeeeecc702d025b566066c52d67", "match_based_id": "a0132568109212a70e6e207132748106ae8822a21137393f73d7fe10fb1d70e96a590afb66ed817cde245b9976d4497f976cda0813066b6c469725453a8000c5_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/currencyservice/client.js#L21", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669796Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection", "rule_message": "Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine.", "location": {"file_path": "src/currencyservice/client.js", "line": 21, "column": 1, "end_line": 29, "end_column": 37}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection", "message": "Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Insecure Deserialization "], "cwe_names": ["CWE-502: Deserialization of Untrusted Data"], "owasp_names": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095594, "ref": "main", "syntactic_id": "7593ce657966fb7252d9174502dee67c", "match_based_id": "bdec95170c60b3e304b9ec7d62ecc9af91f679926196136a3cf58b56420540d90cc51397e65292c36adfe45ea3aa3da3dd897edc4532ce90caa9f205ab9dbbb1_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/emailservice/email_server.py#L134", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669780Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "python.lang.best-practice.sleep.arbitrary-sleep", "rule_message": "time.sleep() call; did you mean to leave this in?", "location": {"file_path": "src/emailservice/email_server.py", "line": 134, "column": 7, "end_line": 134, "end_column": 23}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["best-practice"], "rule": {"name": "python.lang.best-practice.sleep.arbitrary-sleep", "message": "time.sleep() call; did you mean to leave this in?", "confidence": "low", "category": "best-practice", "subcategories": [], "vulnerability_classes": [], "cwe_names": [], "owasp_names": []}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095593, "ref": "main", "syntactic_id": "c88d4f283fc9a3f98430ffdae10309f4", "match_based_id": "3b351c4dba7072089a8b51af3049ceb90da180640186de8a72d45c3b064b09527c864013dfc310636f8170d6087141a0eff32f33ac3502fb0ae6a1f5d818af47_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/emailservice/email_server.py#L158", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669764Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "python.lang.best-practice.sleep.arbitrary-sleep", "rule_message": "time.sleep() call; did you mean to leave this in?", "location": {"file_path": "src/emailservice/email_server.py", "line": 158, "column": 9, "end_line": 158, "end_column": 23}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["best-practice"], "rule": {"name": "python.lang.best-practice.sleep.arbitrary-sleep", "message": "time.sleep() call; did you mean to leave this in?", "confidence": "low", "category": "best-practice", "subcategories": [], "vulnerability_classes": [], "cwe_names": [], "owasp_names": []}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095592, "ref": "main", "syntactic_id": "003a233c9b16b169a1eefdc3ae5dbd6e", "match_based_id": "5347d07f407b6e7f1d64cd47fe2cb57385bb5ff6371709ceedecdb81b394eb7afe11a88f324443c831a8b1256882e192747bdeea123b9772ad855320504092f1_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/recommendationservice/recommendation_server.py#L61", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669748Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "python.lang.best-practice.sleep.arbitrary-sleep", "rule_message": "time.sleep() call; did you mean to leave this in?", "location": {"file_path": "src/recommendationservice/recommendation_server.py", "line": 61, "column": 9, "end_line": 61, "end_column": 23}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["best-practice"], "rule": {"name": "python.lang.best-practice.sleep.arbitrary-sleep", "message": "time.sleep() call; did you mean to leave this in?", "confidence": "low", "category": "best-practice", "subcategories": [], "vulnerability_classes": [], "cwe_names": [], "owasp_names": []}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095591, "ref": "main", "syntactic_id": "7472baae9d3dc776e4d7fb2718bd36a4", "match_based_id": "10acbdaac89831e60c2544486f7a90281cd3dd71a12b3d6c2f24d3885f183cf73d1f51015fd3ec42039d3252616f2d4b4d7f744ee77bbffdefddcb0ad8fe725b_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/recommendationservice/recommendation_server.py#L151", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669732Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "python.lang.best-practice.sleep.arbitrary-sleep", "rule_message": "time.sleep() call; did you mean to leave this in?", "location": {"file_path": "src/recommendationservice/recommendation_server.py", "line": 151, "column": 13, "end_line": 151, "end_column": 30}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["best-practice"], "rule": {"name": "python.lang.best-practice.sleep.arbitrary-sleep", "message": "time.sleep() call; did you mean to leave this in?", "confidence": "low", "category": "best-practice", "subcategories": [], "vulnerability_classes": [], "cwe_names": [], "owasp_names": []}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095590, "ref": "main", "syntactic_id": "392e89b059aa445770056de0b39bc0a7", "match_based_id": "4b27c2450f7a0c2cfe0189b1ba0fea0aab3addcf385972a86756624c303f0898f21e93192385195619349056aaa217d34777261d3b472d49b7a6433ab81366a1_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/handlers.go#L21", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:13:20.669716Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "go.lang.security.audit.crypto.math_random.math-random-used", "rule_message": "Do not use `math/rand`. Use `crypto/rand` instead.", "location": {"file_path": "src/frontend/handlers.go", "line": 21, "column": 3, "end_line": 21, "end_column": 12}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": "2024-07-29T01:57:25.065230Z", "categories": ["security"], "rule": {"name": "go.lang.security.audit.crypto.math_random.math-random-used", "message": "Do not use `math/rand`. Use `crypto/rand` instead.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Cryptographic Issues"], "cwe_names": ["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"], "owasp_names": ["A02:2021 - Cryptographic Failures"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095589, "ref": "main", "syntactic_id": "34edceed24759299338ebe172d49e702", "match_based_id": "d03a1fdab7cd09af7337f81bb44ed8b7272ca532ee135aa9f1c978f08c8fe06f4cff7f8d7b8d7e7bfb288f0b30143ef6d953440cc8c3e420dcfa3d6f5992155d_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/shippingservice/tracker.go#L19", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:13:20.669700Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "go.lang.security.audit.crypto.math_random.math-random-used", "rule_message": "Do not use `math/rand`. Use `crypto/rand` instead.", "location": {"file_path": "src/shippingservice/tracker.go", "line": 19, "column": 3, "end_line": 19, "end_column": 12}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "go.lang.security.audit.crypto.math_random.math-random-used", "message": "Do not use `math/rand`. Use `crypto/rand` instead.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Cryptographic Issues"], "cwe_names": ["CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"], "owasp_names": ["A02:2021 - Cryptographic Failures"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095588, "ref": "main", "syntactic_id": "420e55b794cadab2a093010bf422d256", "match_based_id": "9c72f40ffd95d46b43c852df967114fff88ec499d94edc98d7f79ce4f2cd94788950a371e7d7aa8429c3e785f829c2e3b663de71b44881593dbab145e4b68159_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/handlers.go#L418", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:13:20.669684Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "go.lang.security.audit.net.cookie-missing-httponly.cookie-missing-httponly", "rule_message": "A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Cookie.", "location": {"file_path": "src/frontend/handlers.go", "line": 418, "column": 22, "end_line": 422, "end_column": 4}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "go.lang.security.audit.net.cookie-missing-httponly.cookie-missing-httponly", "message": "A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Cookie.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Cookie Security"], "cwe_names": ["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"], "owasp_names": ["A05:2021 - Security Misconfiguration"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095587, "ref": "main", "syntactic_id": "9c1e3795ef6701a91e6854ea289be7eb", "match_based_id": "27d3cfe383c48ad6ffb3943cfd54ea22caf4ce43a17ba569dc1b7a9b7b1ed1004e024564cb3c730ed1e181a54d2e283dd162b79490fd4f8c4cc92fd6cb50a1bf_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/middleware.go#L97", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:13:20.669669Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "go.lang.security.audit.net.cookie-missing-httponly.cookie-missing-httponly", "rule_message": "A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Cookie.", "location": {"file_path": "src/frontend/middleware.go", "line": 97, "column": 23, "end_line": 101, "end_column": 5}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "go.lang.security.audit.net.cookie-missing-httponly.cookie-missing-httponly", "message": "A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Cookie.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Cookie Security"], "cwe_names": ["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"], "owasp_names": ["A05:2021 - Security Misconfiguration"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095586, "ref": "main", "syntactic_id": "4947fa2aca990d748340e78a8f7073d6", "match_based_id": "448e12c5ecd4897cd0a184691a1beaa64f70f956dc73b2b5b9942b2e71701e48a53e9d75a223be38747609bb51484b446b1700f84feba5e3af39afa014c27411_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/handlers.go#L418", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:13:20.669653Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "go.lang.security.audit.net.cookie-missing-secure.cookie-missing-secure", "rule_message": "A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.", "location": {"file_path": "src/frontend/handlers.go", "line": 418, "column": 22, "end_line": 422, "end_column": 4}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "go.lang.security.audit.net.cookie-missing-secure.cookie-missing-secure", "message": "A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Cookie Security"], "cwe_names": ["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"], "owasp_names": ["A05:2021 - Security Misconfiguration"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095585, "ref": "main", "syntactic_id": "251d2d55126306b8a46a25d3b140cc72", "match_based_id": "7f84ef7f8289c0ac1876d1b128573ac7db7927e7c4bab5e7523844aa6d9c58ed07e2babc8e8da891d41d5c31c0337e80ea45e7591a5ff898b47dd0193bb5e665_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/middleware.go#L97", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:13:20.669637Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "go.lang.security.audit.net.cookie-missing-secure.cookie-missing-secure", "rule_message": "A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.", "location": {"file_path": "src/frontend/middleware.go", "line": 97, "column": 23, "end_line": 101, "end_column": 5}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "go.lang.security.audit.net.cookie-missing-secure.cookie-missing-secure", "message": "A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Cookie Security"], "cwe_names": ["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"], "owasp_names": ["A05:2021 - Security Misconfiguration"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095584, "ref": "main", "syntactic_id": "07eeaf93978a5c1f90de9298b868804a", "match_based_id": "6983d5426e57a789550379948d963cbc5acda2c80e8621339d2fdbc5c2f18643645a7698cab4b0910bbaca73d59e5db54b7517f362b7a05c3e371c259fb1cf0c_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/main.go#L159", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:13:20.669621Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "go.lang.security.audit.net.use-tls.use-tls", "rule_message": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.", "location": {"file_path": "src/frontend/main.go", "line": 159, "column": 12, "end_line": 159, "end_column": 58}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "go.lang.security.audit.net.use-tls.use-tls", "message": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.", "confidence": "medium", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Mishandled Sensitive Information"], "cwe_names": ["CWE-319: Cleartext Transmission of Sensitive Information"], "owasp_names": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095583, "ref": "main", "syntactic_id": "fd19b99cd2ec232d9837919229e8bc02", "match_based_id": "0def9c1d4fabde06a84277fd145c4e6bfa157afa80efdd62e9c34faeca811da33458a48487d0e6f9c2c6d8ea5c62ff1b1bbe1dc087e6dea4abd292bcdca3af9b_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/templates/ad.html#L21", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669605Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "javascript.express.security.audit.xss.mustache.var-in-href.var-in-href", "rule_message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.", "location": {"file_path": "src/frontend/templates/ad.html", "line": 21, "column": 9, "end_line": 21, "end_column": 67}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "javascript.express.security.audit.xss.mustache.var-in-href.var-in-href", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site-Scripting (XSS)"], "cwe_names": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp_names": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "        <a href=\"/{{.RedirectUrl}}\" rel=\"nofollow\" target=\"_blank\">", "explanation": "The fix changes the URL to be relative by adding a leading slash. If the original issue was related to the URL not being correctly formed or not working as intended, this change might not resolve it. The original issue could still be present if the problem was not related to the URL format."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Start the `href` attribute with a literal forward slash and validate the `RedirectUrl` on the server side.", "instructions": "1. Change the `href` attribute to start with a literal forward slash and concatenate the URL. Update the code to `href='/{{.RedirectUrl}}'`.\n2. Ensure that `RedirectUrl` does not contain any malicious input by validating it on the server side before rendering the template. For example, you can use a regular expression to allow only specific URL patterns.\n\n```go\nimport (\n    \"net/http\"\n    \"regexp\"\n)\n\nfunc validateRedirectUrl(url string) bool {\n    re := regexp.MustCompile(`^/[a-zA-Z0-9\\-_/]*$`)\n    return re.MatchString(url)\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    redirectUrl := r.FormValue(\"redirectUrl\")\n    if !validateRedirectUrl(redirectUrl) {\n        http.Error(w, \"Invalid URL\", http.StatusBadRequest)\n        return\n    }\n    // Render the template with the validated redirectUrl\n}\n```\n\nAlternatively, if you need to allow full URLs, you can use a whitelist of allowed domains and ensure the URL starts with `http` or `https`:\n\n```go\nfunc validateRedirectUrl(url string) bool {\n    re := regexp.MustCompile(`^(http|https)://(www\\.)?(example\\.com|anotherdomain\\.com)/.*$`)\n    return re.MatchString(url)\n}\n```\n\nThis ensures that only URLs from trusted domains are allowed, mitigating the risk of XSS attacks."}, "component": null}}, {"id": 72095580, "ref": "main", "syntactic_id": "b04df8631a3d9be89d1f1d49a8612837", "match_based_id": "010ec2b4074f731cad1a6b5d9f0872dcc8a470a03dcbaf634888db5970a36f43379283f71352b38fdc6102c628e2faa0471e6377eafe0d49cba2c7a0e36671f0_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/templates/ad.html#L21", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669557Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "python.django.security.audit.xss.template-href-var.template-href-var", "rule_message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.", "location": {"file_path": "src/frontend/templates/ad.html", "line": 21, "column": 12, "end_line": 21, "end_column": 35}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "python.django.security.audit.xss.template-href-var.template-href-var", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site-Scripting (XSS)"], "cwe_names": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp_names": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "        <a href=\"{{ url .RedirectUrl }}\" rel=\"nofollow\" target=\"_blank\">", "explanation": "The fix changes the way the URL is generated by using the 'url' function. This might require additional changes in the codebase to ensure that the 'url' function is available and works as expected. If the 'url' function is not defined or imported correctly, the fix will not work."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Use the `url` template tag and set a Content Security Policy (CSP) header to prevent XSS attacks.", "instructions": "1. Use the `url` template tag to safely generate the URL. Change the `href` attribute to use the `url` template tag.\n    ```html\n    <a href=\"{{ url .RedirectUrl }}\" rel=\"nofollow\" target=\"_blank\">\n    ```\n\n2. Consider setting a Content Security Policy (CSP) header to further protect against XSS attacks. Add the following HTTP header in your server configuration:\n    ```\n    Content-Security-Policy: default-src 'self'; script-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'self'\n    ```\n\nThis ensures that the URL is properly sanitized and reduces the risk of XSS attacks."}, "component": null}}, {"id": 72095579, "ref": "main", "syntactic_id": "3098a7201be3f70ab4feb76c346aaec0", "match_based_id": "fc508e241fbb5a9aeb730ae2401c06f2d070eb5ffb59bddc91bea98df490a33cf92cddd09662da1342ebc4e5b2d3bbe87912a1f753017dbc5879837e438f3967_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/templates/cart.html#L45", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:13:20.669541Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "rule_message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "location": {"file_path": "src/frontend/templates/cart.html", "line": 45, "column": 29, "end_line": 52, "end_column": 36}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "confidence": "medium", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site Request Forgery (CSRF)"], "cwe_names": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "owasp_names": []}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095578, "ref": "main", "syntactic_id": "476dd8de93ebd262241b82c80fb32f00", "match_based_id": "34c9aea6950ae172c281aa7143b66f1913587fb0b06fcf16483e97103785adcd828ee8a49893ce7516dbb2a6d4ac900ce9c9a04b5f178dd68f1358442f3e873e_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/templates/header.html#L71", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:13:20.669526Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "rule_message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "location": {"file_path": "src/frontend/templates/header.html", "line": 71, "column": 29, "end_line": 77, "end_column": 36}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "confidence": "medium", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site Request Forgery (CSRF)"], "cwe_names": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "owasp_names": []}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095577, "ref": "main", "syntactic_id": "087201a65ce67fd1eadfa4413297b0a0", "match_based_id": "0440333b37de5335dac9041a63ed5fa849a008451f34e3a1dfb4e08fa103cf57bbf25f295a4da0dfa6d203463e6b20172d2d7dad9dfd5fec98b98a4257e8456b_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/templates/product.html#L38", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:13:20.669510Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "rule_message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "location": {"file_path": "src/frontend/templates/product.html", "line": 38, "column": 11, "end_line": 52, "end_column": 18}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "confidence": "medium", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site Request Forgery (CSRF)"], "cwe_names": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "owasp_names": []}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095576, "ref": "main", "syntactic_id": "38ec8417f23afdb48f8aedb37d2a6a5c", "match_based_id": "17abe21d5a6d300c3225c7f1cdc92d719243b04204bdec4a9d4eaf8f10897e2db5972a571cc531077a8f4cba5e0a6d02fea96bb7ec9908ab6aa7144823c7c82b_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/emailservice/email_server.py#L45", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669494Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2", "rule_message": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.", "location": {"file_path": "src/emailservice/email_server.py", "line": 45, "column": 7, "end_line": 48, "end_column": 2}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2", "message": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site-Scripting (XSS)"], "cwe_names": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp_names": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": null, "autotriage": {"verdict": "false_positive", "reason": "The code correctly initializes a Jinja2 environment with autoescaping enabled for HTML and XML, which mitigates the risk of XSS vulnerabilities. The rule's intent is to prevent XSS by ensuring HTML escaping, which is being addressed in this snippet."}, "guidance": null, "component": null}}, {"id": 72095575, "ref": "main", "syntactic_id": "88b2f88e6ec6d08d9e23209809a11366", "match_based_id": "0d2562426e280e4d3a8fae57b5084f6fbe573947bbf0dfd40710aa97556f1a5ba73bf454b0f27ba2a7e435db5d263b5fbdafc7d49256f10608e56651462c1715_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/emailservice/email_server.py#L90", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669478Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2", "rule_message": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.", "location": {"file_path": "src/emailservice/email_server.py", "line": 90, "column": 22, "end_line": 90, "end_column": 52}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2", "message": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site-Scripting (XSS)"], "cwe_names": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp_names": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "      confirmation = render_template('order_confirmation.html', order=order)", "explanation": "The suggested fix changes the template rendering function to `render_template`, which is not defined in the provided context. This will likely result in an error unless `render_template` is defined elsewhere in the codebase. Additionally, the original issue of handling the `TemplateError` exception might still be present if the new function does not address the same error conditions."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Use Flask's `render_template` function instead of directly using `template.render`.", "instructions": "1. Import the `render_template` function from Flask at the top of your file:\n    ```python\n    from flask import render_template\n    ```\n\n2. Replace the direct call to `template.render` with `render_template`. Ensure your template file has a `.html` extension and is located in the templates directory:\n    ```python\n    try:\n        confirmation = render_template('confirmation_template.html', order=order)\n    ```\n\n3. Ensure that your template file `confirmation_template.html` is properly HTML-escaped to prevent XSS vulnerabilities. Use Jinja2's autoescaping feature by default.\n\nThis change leverages Flask's built-in template rendering, which automatically handles HTML escaping to prevent XSS vulnerabilities."}, "component": null}}, {"id": 72095574, "ref": "main", "syntactic_id": "e65fc793808170ea6eb58f5ae6b5634a", "match_based_id": "993be3c8163e1ece6d319cc02059c6fa1f5ce673bf66a91c506b6ee8fe6ca6e10c20163e5883656d3de0838e5cee574af7ed4fd852b43f2c1fdb7ad42d15438a_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/templates/ad.html#L21", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669462Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "python.flask.security.xss.audit.template-href-var.template-href-var", "rule_message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.", "location": {"file_path": "src/frontend/templates/ad.html", "line": 21, "column": 12, "end_line": 21, "end_column": 35}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "python.flask.security.xss.audit.template-href-var.template-href-var", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site-Scripting (XSS)"], "cwe_names": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "owasp_names": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "        <a href=\"{{ url_for('.RedirectUrl') }}\" rel=\"nofollow\" target=\"_blank\">", "explanation": "The suggested fix changes the syntax from a template variable to a function call, which is not correct in this context. The original issue is likely still present because the template engine may not recognize 'url_for' in this manner. Additionally, other parts of the codebase may need to be changed to support this new syntax, such as importing the 'url_for' function or ensuring the template engine supports it."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Use `url_for` to safely generate URLs in the `href` attribute of anchor tags.", "instructions": "1. Change the `href` attribute to use a safe URL generation function. Replace `href=\"{{.RedirectUrl}}\"` with `href=\"{{ url_for('.RedirectUrl') }}\"`.\n2. Ensure that the `url_for` function is correctly imported and used in your template rendering context. If not already imported, add `from flask import url_for` at the top of your Python file where the template is rendered.\n3. Verify that `.RedirectUrl` is a valid endpoint or URL that can be safely passed to `url_for`.\n\nAlternatively, if `RedirectUrl` is an external URL and cannot be generated using `url_for`, validate and sanitize the URL in your backend code before passing it to the template. For example, use a whitelist of allowed domains or a URL parsing library to ensure it is safe."}, "component": null}}, {"id": 72095573, "ref": "main", "syntactic_id": "ec39703c397bc7c43b9ba44ade3ace2a", "match_based_id": "4cb0ced2eac01c19b77d8a5517950d3089c9559cd0a41742d94dd71df8c97ccc1ca00e7add4f8a362cd8ba7ea81700bbd11cc2265a71c8551e13430b3251595d_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/handlers.go#L214", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "high", "created_at": "2024-07-07T20:13:20.669446Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "rule_message": "Downcasting or changing sign of an integer with `$CAST_METHOD` method", "location": {"file_path": "src/frontend/handlers.go", "line": 214, "column": 2, "end_line": 231, "end_column": 3}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "message": "Downcasting or changing sign of an integer with `$CAST_METHOD` method", "confidence": "high", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Other"], "cwe_names": ["CWE-681: Incorrect Conversion between Numeric Types"], "owasp_names": []}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095572, "ref": "main", "syntactic_id": "6d85457c97ea9b75c6536573126f2006", "match_based_id": "4d7c1d8bad74881e5aff475049d0ba9bb929850c1b905152030085096da3531e8234100acb171a500e7ecc1a15f4006e18f1b7bede68429591aec00ef5041e71_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/checkoutservice/main.go#L357", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669430Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "dgryski.semgrep-go.contexttodo.context-todo", "rule_message": "Consider to use well-defined context", "location": {"file_path": "src/checkoutservice/main.go", "line": 357, "column": 73, "end_line": 357, "end_column": 87}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["other"], "rule": {"name": "dgryski.semgrep-go.contexttodo.context-todo", "message": "Consider to use well-defined context", "confidence": "low", "category": "other", "subcategories": [], "vulnerability_classes": [], "cwe_names": [], "owasp_names": []}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "payments", "risk": "high"}}}, {"id": 72095571, "ref": "main", "syntactic_id": "5b652229ce112378d22b9d4bb5148904", "match_based_id": "75cebf4630f376f0818e3fdb696096d70dc4b27adfdb04c06f36d4144aca2333df95511d834e64dfdcf7491c90fecca3792a357436429896c1d6ed1d7d0e675e_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/fd7ea90411f66ec403d8b21af29445201620405c/src/frontend/main.go#L159", "first_seen_scan_id": 30013561, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:13:20.669393Z", "relevant_since": "2024-08-05T02:25:53.068781Z", "rule_name": "go.net.dos.slowloris-dos-functions.slowloris-dos-functions", "rule_message": "These functions do not allow to set a a timeout value for reading requests. As a result, the app server may be vulnerable to a Slowloris Denial-of-Service (DoS) attack. Slowloris attacks exploit the fact that HTTP servers keep the connection active if the request received is incomplete. To mitigate this, implement a `Server` and set the timeout with `ReadHeaderTimeout`.", "location": {"file_path": "src/frontend/main.go", "line": 159, "column": 12, "end_line": 159, "end_column": 58}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "go.net.dos.slowloris-dos-functions.slowloris-dos-functions", "message": "These functions do not allow to set a a timeout value for reading requests. As a result, the app server may be vulnerable to a Slowloris Denial-of-Service (DoS) attack. Slowloris attacks exploit the fact that HTTP servers keep the connection active if the request received is incomplete. To mitigate this, implement a `Server` and set the timeout with `ReadHeaderTimeout`.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Denial-of-Service (DoS)"], "cwe_names": ["CWE-400: Uncontrolled Resource Consumption"], "owasp_names": []}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72108940, "ref": "refs/pull/2/merge", "syntactic_id": "0027b646230c95ec62f4a0fee37ad2f9", "match_based_id": "307fa5554db111801064907b4a3921b5da3aa6c51516c1c1f62d02ec402f05796797d0ad41642f76296c73c86ae91ec24b9e17c26e7befe30ce08007210b36ad_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/9cfc3f3014f4af45d484463f6f956471a56a0a7e/src/assistant-fix-custom-message.java#L14", "first_seen_scan_id": 30017830, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T23:55:57.037966Z", "relevant_since": "2024-07-07T23:55:57.036831Z", "rule_name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep", "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.", "location": {"file_path": "src/assistant-fix-custom-message.java", "line": 14, "column": 9, "end_line": 14, "end_column": 37}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep", "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Improper Validation"], "cwe_names": ["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"], "owasp_names": ["A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "tests", "risk": "low"}}}, {"id": 72108939, "ref": "refs/pull/2/merge", "syntactic_id": "2ad8f3bd11b367fe57c95a2f03afa0d8", "match_based_id": "ff70ff5b50b4cc80bbff4a32a39668f765259c447f23fea3dd628d1636f28b997f18f5c328b9d4cd6c452714de2ba7f117d4aed54d271ebf7a97a9685138ef02_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/9cfc3f3014f4af45d484463f6f956471a56a0a7e/src/assistant-fix-custom-message.java#L14", "first_seen_scan_id": 30017830, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T23:55:57.037949Z", "relevant_since": "2024-07-07T23:55:57.036827Z", "rule_name": "semgrep_demo.crlf-injection-logs-deepsemgrep-javaorg-copy", "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content. Please use the Jsoup.clean() function to sanitize data.", "location": {"file_path": "src/assistant-fix-custom-message.java", "line": 14, "column": 9, "end_line": 14, "end_column": 37}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "semgrep_demo.crlf-injection-logs-deepsemgrep-javaorg-copy", "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content. Please use the Jsoup.clean() function to sanitize data.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Improper Validation"], "cwe_names": ["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"], "owasp_names": ["A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "        String sanitizedParam = Jsoup.clean(param, Whitelist.none());\n        log.info(\"foo\" + sanitizedParam + \"bar\");", "explanation": "The fix correctly sanitizes the input parameter using Jsoup's clean method with a Whitelist of none, which should mitigate the risk of logging unsanitized input. However, there is a small chance that the original issue might still be present if the sanitization does not cover all edge cases. Additionally, there might be a need to import the Whitelist class from Jsoup if it is not already imported."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Sanitize the `param` variable using `Jsoup.clean` before logging it.", "instructions": "1. Import `Jsoup` at the top of your file if it is not already imported:\n    ```java\n    import org.jsoup.Jsoup;\n    ```\n\n2. Sanitize the `param` variable using `Jsoup.clean` before logging it:\n    ```java\n    String sanitizedParam = Jsoup.clean(param, Whitelist.none());\n    ```\n\n3. Update the log statement to use the sanitized parameter:\n    ```java\n    log.info(\"foo\" + sanitizedParam + \"bar\");\n    ```\n\nThis will ensure that any potentially malicious content in the `param` variable is neutralized before being logged."}, "component": {"tag": "tests", "risk": "low"}}}, {"id": 72108938, "ref": "refs/pull/2/merge", "syntactic_id": "7bb7faa454ceaf43c2327e322afca664", "match_based_id": "d5bd109ed1e6644652cc611ddf481429ab326102d94401806a161c3dd765895bd0e0202f8f2dd524f58f4f0a3942c416eb8e5ae01e3f1e22b1f0920c75f49796_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/9cfc3f3014f4af45d484463f6f956471a56a0a7e/src/assistant-fix-custom-message.java#L13", "first_seen_scan_id": 30017830, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T23:55:57.037915Z", "relevant_since": "2024-07-07T23:55:57.036815Z", "rule_name": "java.lang.security.audit.crlf-injection-logs.crlf-injection-logs", "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.", "location": {"file_path": "src/assistant-fix-custom-message.java", "line": 13, "column": 9, "end_line": 14, "end_column": 37}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "java.lang.security.audit.crlf-injection-logs.crlf-injection-logs", "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Improper Validation"], "cwe_names": ["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"], "owasp_names": ["A03:2021 - Injection"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "tests", "risk": "low"}}}, {"id": 72108934, "ref": "refs/pull/1/merge", "syntactic_id": "dd5c739c5e006ce1847129057da6b001", "match_based_id": "82a09ae6b8133bb9055387f712c2c4b54da13355678c2981755eb56a33d34f176f18c43d63c10158f4e24d63a25940daf0dcc3dbfc0d3d18c06c055185c09c4b_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/9cd7ad247688bf85563ca3e2da3371d69f240b33/src/assistant-fix-sqli-sequelize.ts#L5", "first_seen_scan_id": 30017828, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T23:55:51.379643Z", "relevant_since": "2024-07-07T23:55:51.376805Z", "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "location": {"file_path": "src/assistant-fix-sqli-sequelize.ts", "line": 5, "column": 76, "end_line": 5, "end_column": 84}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["SQL Injection"], "cwe_names": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp_names": ["A01:2017 - Injection", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "      models.sequelize.query(\n        \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\",\n        {\n          replacements: { criteria: `%${criteria}%` },\n          type: models.sequelize.QueryTypes.SELECT\n        }\n      )", "explanation": "The fix addresses the SQL injection vulnerability by using parameterized queries, which is a correct approach. However, there is a small chance that the original issue might still be present if there are other parts of the code that also need to be sanitized or if the criteria variable is manipulated elsewhere. Additionally, there might be other parts of the codebase that rely on the original query format and would need to be updated to ensure compatibility."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Use Sequelize's parameterized queries instead of string concatenation.", "instructions": "1. Change the SQL query to use Sequelize's parameterized query syntax. Replace the dynamic parts of the query with placeholders.\n    ```javascript\n    const query = \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\";\n    ```\n2. Pass the dynamic value as a parameter to the `query` method.\n    ```javascript\n    models.sequelize.query(query, {\n      replacements: { criteria: `%${criteria}%` }\n    })\n    ```\n3. Update the `query` method call to use the new `query` and `replacements` parameters.\n    ```javascript\n    models.sequelize.query(query, {\n      replacements: { criteria: `%${criteria}%` }\n    })\n    .then(([products]: any) => {\n      const dataString = JSON.stringify(products)\n      for (let i = 0; i < products.length; i++) {\n        products[i].name = req.__(products[i].name)\n        products[i].description = req.__(products[i].description)\n      }\n      res.json(utils.queryResultToJson(products))\n    }).catch((error: ErrorWithParent) => {\n      next(error.parent)\n    })\n    ```\n\nUsing parameterized queries helps prevent SQL injection by ensuring that user input is treated as data rather than executable code."}, "component": null}}, {"id": 72108933, "ref": "refs/pull/1/merge", "syntactic_id": "5569d50d838914ada08b433d0760d09e", "match_based_id": "fe0d67be15ca767b9ad78f6e5d48550943d3be6481349c95a7d7d05fec4411a3d138af01320e287b203565cedd59844742f8cbc134aef23123f0f1ca0ba45e87_0", "repository": {"name": "Semgrep-Demo/new-project", "url": "https://github.com/Semgrep-Demo/new-project"}, "line_of_code_url": "https://github.com/Semgrep-Demo/new-project/blob/9cd7ad247688bf85563ca3e2da3371d69f240b33/src/assistant-fix-sqli-sequelize.ts#L5", "first_seen_scan_id": 30017828, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "high", "created_at": "2024-07-07T23:55:51.379595Z", "relevant_since": "2024-07-07T23:55:51.376794Z", "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "location": {"file_path": "src/assistant-fix-sqli-sequelize.ts", "line": 5, "column": 30, "end_line": 5, "end_column": 164}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "confidence": "high", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["SQL Injection"], "cwe_names": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp_names": ["A01:2017 - Injection", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "      models.sequelize.query(\n        \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\",\n        {\n          replacements: { criteria: `%${criteria}%` },\n          type: models.sequelize.QueryTypes.SELECT\n        }\n      )", "explanation": "The fix addresses the SQL injection vulnerability by using parameterized queries, which is a correct approach. However, there is a small chance that the original issue might still be present if there are other parts of the code that also need to be sanitized or if the criteria variable is manipulated elsewhere. Additionally, there might be other parts of the codebase that rely on the previous query format and may need to be updated to ensure compatibility."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Use Sequelize parameterized queries instead of string concatenation.", "instructions": "1. Change the query string to use parameterized query syntax by replacing the dynamic values with placeholders `:criteria`.\n    ```typescript\n    const query = \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\";\n    ```\n\n2. Pass the dynamic value `criteria` as a parameter in the `sequelize.query` method.\n    ```typescript\n    models.sequelize.query(query, {\n      replacements: { criteria: `%${criteria}%` }\n    })\n    ```\n\n3. Update the `sequelize.query` call in the code to use the new `query` and `replacements` object.\n    ```typescript\n    models.sequelize.query(query, {\n      replacements: { criteria: `%${criteria}%` }\n    })\n    .then(([products]: any) => {\n      const dataString = JSON.stringify(products)\n      for (let i = 0; i < products.length; i++) {\n        products[i].name = req.__(products[i].name)\n        products[i].description = req.__(products[i].description)\n      }\n      res.json(utils.queryResultToJson(products))\n    }).catch((error: ErrorWithParent) => {\n      next(error.parent)\n    })\n    ```\n\nUsing parameterized queries helps prevent SQL injection by ensuring that user input is treated as data rather than executable code."}, "component": null}}]