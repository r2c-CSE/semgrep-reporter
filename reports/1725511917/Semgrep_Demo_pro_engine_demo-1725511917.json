[{"id": 72095483, "ref": "main", "syntactic_id": "cd7b6840d8e69a64a56f4fe7689ecb8d", "match_based_id": "0d0de662f61bbf8a23cc2bbe1580077b74f2e30614ce15693020dcae4efdeef034bb03e256f99651372f9dc1a92869b93f82e43d04131db5542a55a4ce11407a_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/api/jwt/JwtLog4jController.java#L24", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:11:55.268706Z", "relevant_since": "2024-08-12T14:10:27.862086Z", "rule_name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep", "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.", "location": {"file_path": "src/main/java/hawk/api/jwt/JwtLog4jController.java", "line": 24, "column": 13, "end_line": 24, "end_column": 63}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": "2024-08-12T14:10:27.858239Z", "categories": ["security"], "rule": {"name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep", "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Improper Validation"], "cwe_names": ["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"], "owasp_names": ["A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095481, "ref": "main", "syntactic_id": "2638a7bd4a091d525cbdebdf15a5b65a", "match_based_id": "e74a74ebaa9dbc684beee24d255e34069e3f447d3260055cfb30231cb3cfdee291e60963811ec2423a442c5774b36a6519e77dae75c8acc941efb5363712f8e8_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/service/UserSearchService.java#L30", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:11:55.268675Z", "relevant_since": "2024-08-12T14:10:27.862086Z", "rule_name": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "rule_message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "location": {"file_path": "src/main/java/hawk/service/UserSearchService.java", "line": 30, "column": 28, "end_line": 31, "end_column": 50}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": "2024-08-12T14:10:27.858210Z", "categories": ["security"], "rule": {"name": "java.spring.security.injection.tainted-sql-string.tainted-sql-string", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["SQL Injection"], "cwe_names": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp_names": ["A01:2017 - Injection", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "PII", "risk": "high"}}}, {"id": 72095484, "ref": "main", "syntactic_id": "8fb4324658e7ea08a3f655a23e5ccb41", "match_based_id": "748e940d5272b9f00493f8665c3b578b8499d149be1da2920b384817a13ecdc9ccd88d6f20485d89ab859af781dc4f68ee7c982207867f389b4242b58f05a0d6_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/keyStore.pem#L5", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:11:55.268721Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "generic.secrets.security.detected-private-key.detected-private-key", "rule_message": "Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.", "location": {"file_path": "src/main/resources/keyStore.pem", "line": 5, "column": 1, "end_line": 6, "end_column": 59}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "generic.secrets.security.detected-private-key.detected-private-key", "message": "Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Hard-coded Secrets"], "cwe_names": ["CWE-798: Use of Hard-coded Credentials"], "owasp_names": ["A07:2021 - Identification and Authentication Failures"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "cryptography", "risk": "high"}}}, {"id": 72095482, "ref": "main", "syntactic_id": "f041bf8eebdfbf05ff3eb1fd14dca9e6", "match_based_id": "8f8c76b208e9f10528d97311ff1432055c7dbe8ba2b8a6f2f8183c5ab8d3b68e904c60d926c72cbc5118a6d33bf96e8f0259120e241be58ab23d0f711b23af0f_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/application-postgresql.properties#L36", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:11:55.268690Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled", "rule_message": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a significant security risk.", "location": {"file_path": "src/main/resources/application-postgresql.properties", "line": 36, "column": 1, "end_line": 36, "end_column": 44}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled", "message": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a significant security risk.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Mishandled Sensitive Information"], "cwe_names": ["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"], "owasp_names": ["A01:2021 - Broken Access Control"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095479, "ref": "main", "syntactic_id": "520a9c39bbddaf8edc05f555c18713ba", "match_based_id": "b497d9941bb9f64e2fd1b190d2d4e683908dc713bcdb1d4a24856f26ef3712d4e1f9146570c56e7280410251e10415666f317a394a3556e2730b807bcd1327fd_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/controller/LoginController.java#L57", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:11:55.268643Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly", "rule_message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'", "location": {"file_path": "src/main/java/hawk/controller/LoginController.java", "line": 57, "column": 9, "end_line": 57, "end_column": 60}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly", "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cookie Security"], "cwe_names": ["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"], "owasp_names": ["A05:2021 - Security Misconfiguration"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "user authentication", "risk": "high"}}}, {"id": 72095478, "ref": "main", "syntactic_id": "d684fc65e49523cac79c4a17f6c5d2e0", "match_based_id": "ba9e5d1fc18e6f18044e08b4b5d8f4aec117648638b21bbeac6475f943e287bae81b7246bd2aa5bf023667d742e18d5c24517539fe8e1d3f52a81cfc4e7f0abf_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/controller/LoginController.java#L57", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:11:55.268628Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag", "rule_message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);'", "location": {"file_path": "src/main/java/hawk/controller/LoginController.java", "line": 57, "column": 9, "end_line": 57, "end_column": 60}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag", "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);'", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cookie Security"], "cwe_names": ["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"], "owasp_names": ["A05:2021 - Security Misconfiguration"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "        Cookie loginCookie = new Cookie(\"XLOGINID\", cookieCode);\n        loginCookie.setSecure(true); // Ensure the cookie is only sent over secure channels\n        resp.addCookie(loginCookie);", "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..cookie-missing-secure-flag', 'path': 'tmp79t1be6s.java', 'start': {'line': 57, 'col': 9, 'offset': 2485}, 'end': {'line': 57, 'col': 60, 'offset': 2536}, 'extra': {'metavars': {'$RESPONSE': {'start': {'line': 57, 'col': 9, 'offset': 2485}, 'end': {'line': 57, 'col': 13, 'offset': 2489}, 'abstract_content': 'resp'}, '$COOKIE': {'start': {'line': 57, 'col': 24, 'offset': 2500}, 'end': {'line': 57, 'col': 58, 'offset': 2534}, 'abstract_content': 'new Cookie(\"XLOGINID\"cookieCode)'}}, 'message': 'A cookie was detected without setting the \\'secure\\' flag. The \\'secure\\' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the \\'secure\\' flag by calling \\'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);\\'', 'metadata': {'cwe': [\"CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\"], 'owasp': ['A05:2021 - Security Misconfiguration'], 'source-rule-url': 'https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE', 'asvs': {'section': 'V3: Session Management Verification Requirements', 'control_id': '3.4.1 Missing Cookie Attribute', 'control_url': 'https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management', 'version': '4'}, 'category': 'security', 'technology': ['java'], 'references': ['https://owasp.org/Top10/A05_2021-Security_Misconfiguration'], 'subcategory': ['audit'], 'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Cookie Security']}, 'severity': 'WARNING', 'fingerprint': '19976ea1e9592d4a84beec2a0ae81ef84279482d235b736698cadbf9e51946c573e4cb65a3f231247f15726cc31e277af38d17f996d60f527b7a8c9fea0de571_0', 'lines': '        resp.addCookie(new Cookie(\"XLOGINID\", cookieCode));', 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmp79t1be6s.java']}, 'interfile_languages_used': [], 'skipped_rules': []}"}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Set the `secure` flag to `true` when creating the `Cookie` object.", "instructions": "1. Create a new `Cookie` object and set the `secure` flag to `true` using the `setSecure` method.\n    ```java\n    Cookie loginCookie = new Cookie(\"XLOGINID\", cookieCode);\n    loginCookie.setSecure(true);\n    ```\n2. Add the newly created `Cookie` object to the response.\n    ```java\n    resp.addCookie(loginCookie);\n    ```\n\nThe final code should look like this:\n```java\nString cookieCode = UUID.randomUUID().toString();\nloginCodes.put(\"cookie-\" + sessId, cookieCode);\nCookie loginCookie = new Cookie(\"XLOGINID\", cookieCode);\nloginCookie.setSecure(true);\nresp.addCookie(loginCookie);\n```"}, "component": {"tag": "user authentication", "risk": "high"}}}, {"id": 72095477, "ref": "main", "syntactic_id": "be2f8c2c143d9ea11280a45d331ae1eb", "match_based_id": "32a9c639a672deed13f2b238db8a2f4a34c4331e505713d1242f7c056468266db7aa41a7cf93cc0479dcc7d8aa0c3279aeb166818fe94425cea841f3c7e4e7db_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/controller/LoginController.java#L57", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "high", "created_at": "2024-07-07T20:11:55.268612Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly", "rule_message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'", "location": {"file_path": "src/main/java/hawk/controller/LoginController.java", "line": 57, "column": 9, "end_line": 57, "end_column": 60}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly", "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'", "confidence": "high", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cookie Security"], "cwe_names": ["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"], "owasp_names": ["A05:2021 - Security Misconfiguration"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "user authentication", "risk": "high"}}}, {"id": 72095476, "ref": "main", "syntactic_id": "eadf31ff73cd1b444f8ec20eaa4e580b", "match_based_id": "0093520971753776bc6805f81368c825fd2f195fb1f6b6e8845432e450b8a9ee53cb099fbd6c1024c3dc4ca0aadd3c0968a2a5f7856eddc2e9b3592e8509ba26_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/controller/LoginController.java#L57", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "high", "created_at": "2024-07-07T20:11:55.268597Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite", "rule_message": "The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)", "location": {"file_path": "src/main/java/hawk/controller/LoginController.java", "line": 57, "column": 9, "end_line": 57, "end_column": 60}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite", "message": "The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)", "confidence": "high", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site Request Forgery (CSRF)"], "cwe_names": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "owasp_names": ["A01:2021 - Broken Access Control"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "user authentication", "risk": "high"}}}, {"id": 72095475, "ref": "main", "syntactic_id": "6fd2c38ed68978931ed9a57b925bb89f", "match_based_id": "3d6f518ca26a22e090325fbef02cb2a1c4ab3195a567c3dd8a62ea5a5adcfabe692b6fd9db06480743846f37411ae57fd122b68876449d2cff6420f280b0e778_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/controller/LoginController.java#L57", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "high", "created_at": "2024-07-07T20:11:55.268581Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag", "rule_message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);'", "location": {"file_path": "src/main/java/hawk/controller/LoginController.java", "line": 57, "column": 9, "end_line": 57, "end_column": 60}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag", "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);'", "confidence": "high", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cookie Security"], "cwe_names": ["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"], "owasp_names": ["A05:2021 - Security Misconfiguration"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "        Cookie loginCookie = new Cookie(\"XLOGINID\", cookieCode);\n        loginCookie.setSecure(true); // Ensure the cookie is only sent over HTTPS\n        resp.addCookie(loginCookie);", "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..cookie-missing-secure-flag', 'path': 'tmpvsftu1ws.java', 'start': {'line': 57, 'col': 9, 'offset': 2485}, 'end': {'line': 57, 'col': 60, 'offset': 2536}, 'extra': {'metavars': {'$RESPONSE': {'start': {'line': 57, 'col': 9, 'offset': 2485}, 'end': {'line': 57, 'col': 13, 'offset': 2489}, 'abstract_content': 'resp'}, '$COOKIE': {'start': {'line': 57, 'col': 24, 'offset': 2500}, 'end': {'line': 57, 'col': 58, 'offset': 2534}, 'abstract_content': 'new Cookie(\"XLOGINID\"cookieCode)'}}, 'message': 'A cookie was detected without setting the \\'secure\\' flag. The \\'secure\\' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the \\'secure\\' flag by calling \\'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);\\'', 'metadata': {'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'HIGH', 'category': 'security', 'subcategory': ['audit'], 'asvs': {'section': 'V3: Session Management Verification Requirements', 'control_id': '3.4.1 Missing Cookie Attribute', 'control_url': 'https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management', 'version': '4'}, 'cwe': [\"CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\"], 'functional-categories': ['web::search::cookie-config::Servlet'], 'owasp': ['A05:2021 - Security Misconfiguration'], 'references': ['https://owasp.org/www-community/controls/SecureCookieAttribute'], 'source-rule-url': 'https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE', 'technology': ['java', 'servlets'], 'license': 'Copyright 2023 Semgrep, Inc.', 'vulnerability_class': ['Cookie Security']}, 'severity': 'WARNING', 'fingerprint': '3339009cc098893995dc10d5342d30aec2665a765dd3c655fa4c80e054b8dde5ad461905b1ef498b551b72caefc8edcaac03f8c5a953982f85a8c2ed30ff3e01_0', 'lines': '        resp.addCookie(new Cookie(\"XLOGINID\", cookieCode));', 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmpvsftu1ws.java']}, 'interfile_languages_used': [], 'skipped_rules': []}"}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Usa `SecureCookie` en lugar de `Cookie` para establecer autom\u00e1ticamente la bandera `secure` a `true`.", "instructions": "1. Cambia la creaci\u00f3n de la cookie para usar `SecureCookie` en lugar de `Cookie`.\n2. Aseg\u00farate de que `SecureCookie` est\u00e9 implementado en tu proyecto. Si no, crea una clase `SecureCookie` que extienda `Cookie` y establezca la bandera `secure` a `true` por defecto.\n\n```java\npublic class SecureCookie extends Cookie {\n    public SecureCookie(String name, String value) {\n        super(name, value);\n        this.setSecure(true);\n    }\n}\n```\n\n3. Reemplaza la l\u00ednea `resp.addCookie(new Cookie(\"XLOGINID\", cookieCode));` con `resp.addCookie(new SecureCookie(\"XLOGINID\", cookieCode));`.\n\n```java\nresp.addCookie(new SecureCookie(\"XLOGINID\", cookieCode));\n```\n\nEsto asegurar\u00e1 que la cookie solo se transmita a trav\u00e9s de canales seguros como HTTPS."}, "component": {"tag": "user authentication", "risk": "high"}}}, {"id": 72095474, "ref": "main", "syntactic_id": "9fac97a7841bf0e0351448eb11d664ea", "match_based_id": "e514a05b734bec29a96dc7f2063214cc0af9b5cb4bafc65332eac0e5c668b62c227aeecad82b8a81c36addb97a3f574fb085ec6c3db1eecaacfbbd779518743c_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/MultiHttpSecurityConfig.java#L47", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:11:55.268566Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled", "rule_message": "CSRF protection is disabled for this configuration. This is a security risk.", "location": {"file_path": "src/main/java/hawk/MultiHttpSecurityConfig.java", "line": 47, "column": 13, "end_line": 50, "end_column": 42}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled", "message": "CSRF protection is disabled for this configuration. This is a security risk.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site Request Forgery (CSRF)"], "cwe_names": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "owasp_names": ["A01:2021 - Broken Access Control"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "user authentication", "risk": "high"}}}, {"id": 72095473, "ref": "main", "syntactic_id": "e8fa796139f03cc77fb2153996fd0ea9", "match_based_id": "403b601c1cf2f664993a51a6025dd7c5f88ab55eb825b37550ee1e9000702f56887e2a18dc954403537c8badca9f45c5eb5606e0737b558f9608232fa0899ee0_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/MultiHttpSecurityConfig.java#L88", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:11:55.268551Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled", "rule_message": "CSRF protection is disabled for this configuration. This is a security risk.", "location": {"file_path": "src/main/java/hawk/MultiHttpSecurityConfig.java", "line": 88, "column": 13, "end_line": 91, "end_column": 38}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled", "message": "CSRF protection is disabled for this configuration. This is a security risk.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site Request Forgery (CSRF)"], "cwe_names": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "owasp_names": ["A01:2021 - Broken Access Control"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "user authentication", "risk": "high"}}}, {"id": 72095472, "ref": "main", "syntactic_id": "e447e2d80c066fd9682a2a039cea4e95", "match_based_id": "8c490f4cf13edd9944ce978193aafc331aeec2b9545b1f1c32fa30ce494593df2a0ce8cd99d111beea77931c7332e0527aa254e850d0fabcec5498192e9b95fe_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/MultiHttpSecurityConfig.java#L110", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:11:55.268535Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled", "rule_message": "CSRF protection is disabled for this configuration. This is a security risk.", "location": {"file_path": "src/main/java/hawk/MultiHttpSecurityConfig.java", "line": 110, "column": 13, "end_line": 112, "end_column": 38}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled", "message": "CSRF protection is disabled for this configuration. This is a security risk.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site Request Forgery (CSRF)"], "cwe_names": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "owasp_names": ["A01:2021 - Broken Access Control"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "user authentication", "risk": "high"}}}, {"id": 72095471, "ref": "main", "syntactic_id": "6a86fc9f9f45119fbef7ebe3d074c21a", "match_based_id": "56e6622b87cd67e8cf2a70b6a9cfbf5cef39e875f72106908f8784dff44e779afa7c431d189456d0e2ee326ad2bcf8038f3278b99b55b66045b75c62db05dac6_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/templates/general.html#L30", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:11:55.268519Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "rule_message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "location": {"file_path": "src/main/resources/templates/general.html", "line": 30, "column": 13, "end_line": 32, "end_column": 20}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "confidence": "medium", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site Request Forgery (CSRF)"], "cwe_names": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "owasp_names": []}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095470, "ref": "main", "syntactic_id": "0d78828517e7f02f95176a95b9b14027", "match_based_id": "eaaddc652abcdfd8d7edf3f9c551ddae9b99bdce1293c5e60e2f1b1887e1b23e0ff4a460bedc66037c17fd8a58fa9702f0669b98e48decfba400819401958912_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/templates/login-form-multi.html#L15", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:11:55.268503Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "rule_message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "location": {"file_path": "src/main/resources/templates/login-form-multi.html", "line": 15, "column": 13, "end_line": 33, "end_column": 20}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "confidence": "medium", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site Request Forgery (CSRF)"], "cwe_names": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "owasp_names": []}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "user authentication", "risk": "high"}}}, {"id": 72095469, "ref": "main", "syntactic_id": "44a3cf1acaaa87d211b2dda92f42d33e", "match_based_id": "de7ea1bb2459216f6d0533d0228ef53a4a36fb0f267279e51f200ea22cfe33f410257f5b1136bc236df266495acecde2b1d851f83a43cceb5543f59bc3e90392_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/templates/login.html#L15", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:11:55.268487Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "rule_message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "location": {"file_path": "src/main/resources/templates/login.html", "line": 15, "column": 13, "end_line": 28, "end_column": 20}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "confidence": "medium", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site Request Forgery (CSRF)"], "cwe_names": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "owasp_names": []}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "user authentication", "risk": "high"}}}, {"id": 72095468, "ref": "main", "syntactic_id": "146ffdb71366954ae316a864b0e6e457", "match_based_id": "5417172840bbda450fa5594f076f1980ec3c3af27ddcdef07ad4de230a7c152c48303349ffdcbaee8fb9e472f7096f0ece794a58d41e0980a5357237b485142f_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/templates/search.html#L14", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:11:55.268472Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "rule_message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "location": {"file_path": "src/main/resources/templates/search.html", "line": 14, "column": 13, "end_line": 20, "end_column": 20}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "confidence": "medium", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site Request Forgery (CSRF)"], "cwe_names": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "owasp_names": []}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095467, "ref": "main", "syntactic_id": "e18b53be06356af886267277f26bcaeb", "match_based_id": "3a57d11b3400cd26337515a7d9ca59aa9433a7cea8098b60d9ba9833e92a67cf986399104d0e96a24ef5c7d5e713368f9c993a34ca952a1c2c846ebc5758a14f_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/templates/user-search.html#L14", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:11:55.268456Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "rule_message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "location": {"file_path": "src/main/resources/templates/user-search.html", "line": 14, "column": 13, "end_line": 20, "end_column": 20}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "python.django.security.django-no-csrf-token.django-no-csrf-token", "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.", "confidence": "medium", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Cross-Site Request Forgery (CSRF)"], "cwe_names": ["CWE-352: Cross-Site Request Forgery (CSRF)"], "owasp_names": []}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": null}}, {"id": 72095466, "ref": "main", "syntactic_id": "5507e6d5a84772e43cb215512ba787f7", "match_based_id": "0b3b792daab2dc62fd32d3312b5f93adeaaf3cc56f473f8ee518dbf61d96ade648a3e2d21315c12e5e60c401facd36ad19f9c2d5785bd72732b6b486aa7254be_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/docker-compose.yml#L3", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:11:55.268441Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges", "rule_message": "Service 'db' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.", "location": {"file_path": "docker-compose.yml", "line": 3, "column": 3, "end_line": 3, "end_column": 5}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges", "message": "Service 'db' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Improper Authorization"], "cwe_names": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "owasp_names": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "infrastructure", "risk": "high"}}}, {"id": 72095465, "ref": "main", "syntactic_id": "84b86eaf0c06160d96879ee0d4dcdec2", "match_based_id": "c205669c90cadcc099a5f1ade89d9b8cf413df130c0440284807554436ceeba85c1d7bc8d87a55a113ca4e5539715281ed92ef3709c871a65b91a216e2cbfd32_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/docker-compose.yml#L12", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:11:55.268425Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges", "rule_message": "Service 'javavulny' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.", "location": {"file_path": "docker-compose.yml", "line": 12, "column": 3, "end_line": 12, "end_column": 12}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges", "message": "Service 'javavulny' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Improper Authorization"], "cwe_names": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "owasp_names": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "infrastructure", "risk": "high"}}}, {"id": 72095464, "ref": "main", "syntactic_id": "eb9c6bb430ea48df03959cc3c474090d", "match_based_id": "a4c9a5b5da893201bcf0908973bfd478af5ce99508d5c1313c871a7cd96bf620cc2c844d70e6da41d1f6e470eed9006460a3c74048353a89477dec781d9b1505_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/docker-compose.yml#L3", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:11:55.268409Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "rule_message": "Service 'db' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.", "location": {"file_path": "docker-compose.yml", "line": 3, "column": 3, "end_line": 3, "end_column": 5}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "message": "Service 'db' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Improper Authorization"], "cwe_names": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "owasp_names": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "infrastructure", "risk": "high"}}}, {"id": 72095463, "ref": "main", "syntactic_id": "1b60b86e25ea9b782c3ba7415f38c6f0", "match_based_id": "554c45717e6622ca8eaec1d789701653d658cbbe2057e19cb1882e2674e858ea79636ea02affc1616848322aebb07a4c2fe98a2d0f324afcaa934f56360f015e_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/docker-compose.yml#L12", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "low", "created_at": "2024-07-07T20:11:55.268374Z", "relevant_since": "2024-08-05T14:06:50.689100Z", "rule_name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "rule_message": "Service 'javavulny' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.", "location": {"file_path": "docker-compose.yml", "line": 12, "column": 3, "end_line": 12, "end_column": 12}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "message": "Service 'javavulny' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.", "confidence": "low", "category": "security", "subcategories": ["audit"], "vulnerability_classes": ["Improper Authorization"], "cwe_names": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "owasp_names": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "infrastructure", "risk": "high"}}}, {"id": 72108922, "ref": "refs/pull/5/merge", "syntactic_id": "0027b646230c95ec62f4a0fee37ad2f9", "match_based_id": "307fa5554db111801064907b4a3921b5da3aa6c51516c1c1f62d02ec402f05796797d0ad41642f76296c73c86ae91ec24b9e17c26e7befe30ce08007210b36ad_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/3a207963027493fea09b37cdeef7c3ba5ee12e11/src/assistant-fix-custom-message.java#L14", "first_seen_scan_id": 30017809, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T23:55:19.388254Z", "relevant_since": "2024-07-07T23:55:19.386170Z", "rule_name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep", "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.", "location": {"file_path": "src/assistant-fix-custom-message.java", "line": 14, "column": 9, "end_line": 14, "end_column": 37}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep", "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Improper Validation"], "cwe_names": ["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"], "owasp_names": ["A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "tests", "risk": "low"}}}, {"id": 72108921, "ref": "refs/pull/5/merge", "syntactic_id": "2ad8f3bd11b367fe57c95a2f03afa0d8", "match_based_id": "ff70ff5b50b4cc80bbff4a32a39668f765259c447f23fea3dd628d1636f28b997f18f5c328b9d4cd6c452714de2ba7f117d4aed54d271ebf7a97a9685138ef02_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/3a207963027493fea09b37cdeef7c3ba5ee12e11/src/assistant-fix-custom-message.java#L14", "first_seen_scan_id": 30017809, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T23:55:19.388237Z", "relevant_since": "2024-07-07T23:55:19.386165Z", "rule_name": "semgrep_demo.crlf-injection-logs-deepsemgrep-javaorg-copy", "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content. Please use the Jsoup.clean() function to sanitize data.", "location": {"file_path": "src/assistant-fix-custom-message.java", "line": 14, "column": 9, "end_line": 14, "end_column": 37}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "semgrep_demo.crlf-injection-logs-deepsemgrep-javaorg-copy", "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content. Please use the Jsoup.clean() function to sanitize data.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Improper Validation"], "cwe_names": ["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"], "owasp_names": ["A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "        String sanitizedParam = Jsoup.clean(param, Whitelist.none());\n        log.info(\"foo\" + sanitizedParam + \"bar\");", "explanation": "The fix uses Jsoup to sanitize the input parameter, which should address the issue of logging unsanitized input. However, there is a small chance that the sanitization might not cover all edge cases or that additional context-specific sanitization might be needed. Additionally, the Jsoup library needs to be imported, which might require minor changes in the codebase if not already included."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Sanitize the parameter using the `safe_celfocus` function before logging it.", "instructions": "1. Import the `safe_celfocus` function at the top of your file:\n    ```java\n    import com.celfocus.sanitizer.safe_celfocus;\n    ```\n\n2. Use the `safe_celfocus` function to sanitize the `param` variable before logging it:\n    ```java\n    String sanitizedParam = safe_celfocus(param);\n    ```\n\n3. Update the logging statement to use the sanitized parameter:\n    ```java\n    log.info(\"foo\" + sanitizedParam + \"bar\");\n    ```\n\nYour updated code should look like this:\n\n```java\npackage com.vogella.logger.test;\n\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport com.vogella.logger.MyLogger;\nimport org.jsoup.Jsoup;\nimport com.celfocus.sanitizer.safe_celfocus;\n\npublic class TestLog1 {\n  private final static Logger log = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String param = request.getParameter(\"param\");\n        String sanitizedParam = safe_celfocus(param);\n        log.info(\"foo\" + sanitizedParam + \"bar\");\n        response.getWriter().append(\"Served at: \").append(request.getContextPath());\n    }\n}\n```"}, "component": {"tag": "tests", "risk": "low"}}}, {"id": 72108920, "ref": "refs/pull/5/merge", "syntactic_id": "7bb7faa454ceaf43c2327e322afca664", "match_based_id": "d5bd109ed1e6644652cc611ddf481429ab326102d94401806a161c3dd765895bd0e0202f8f2dd524f58f4f0a3942c416eb8e5ae01e3f1e22b1f0920c75f49796_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/3a207963027493fea09b37cdeef7c3ba5ee12e11/src/assistant-fix-custom-message.java#L13", "first_seen_scan_id": 30017809, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T23:55:19.388202Z", "relevant_since": "2024-07-07T23:55:19.386150Z", "rule_name": "java.lang.security.audit.crlf-injection-logs.crlf-injection-logs", "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.", "location": {"file_path": "src/assistant-fix-custom-message.java", "line": 13, "column": 9, "end_line": 14, "end_column": 37}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "java.lang.security.audit.crlf-injection-logs.crlf-injection-logs", "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Improper Validation"], "cwe_names": ["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"], "owasp_names": ["A03:2021 - Injection"]}, "external_ticket": null, "severity": "medium", "sourcing_policy": {"id": 65705, "name": "Rule Board - Audit column", "slug": "rule-board-audit"}, "assistant": {"autofix": null, "autotriage": null, "guidance": null, "component": {"tag": "tests", "risk": "low"}}}, {"id": 72108916, "ref": "refs/pull/4/merge", "syntactic_id": "dd5c739c5e006ce1847129057da6b001", "match_based_id": "82a09ae6b8133bb9055387f712c2c4b54da13355678c2981755eb56a33d34f176f18c43d63c10158f4e24d63a25940daf0dcc3dbfc0d3d18c06c055185c09c4b_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/c777606549d743073a189d91b75689b8c07d7c53/src/assistant-fix-sqli-sequelize.ts#L5", "first_seen_scan_id": 30017807, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T23:55:11.185852Z", "relevant_since": "2024-07-07T23:55:11.184689Z", "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "location": {"file_path": "src/assistant-fix-sqli-sequelize.ts", "line": 5, "column": 76, "end_line": 5, "end_column": 84}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["SQL Injection"], "cwe_names": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp_names": ["A01:2017 - Injection", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "      models.sequelize.query(\n        \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\",\n        {\n          replacements: { criteria: `%${criteria}%` },\n          type: models.sequelize.QueryTypes.SELECT\n        }\n      )", "explanation": "The fix addresses the SQL injection vulnerability by using parameterized queries, which is a correct approach. However, there is a small chance that the original issue might still be present if there are other parts of the code that handle `criteria` in an unsafe manner. Additionally, there might be other parts of the codebase that need to be updated to ensure compatibility with this change, such as how `models.sequelize` is used elsewhere."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Use Sequelize parameterized queries instead of string concatenation.", "instructions": "1. Change the SQL query string to use parameterized query syntax. Replace the dynamic parts with placeholders like `:criteria`.\n    ```javascript\n    const query = \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\";\n    ```\n\n2. Pass the dynamic value in an object as the second parameter to the `sequelize.query` method.\n    ```javascript\n    models.sequelize.query(query, { replacements: { criteria: `%${criteria}%` } })\n    ```\n\n3. Replace the original query call with the updated parameterized query.\n    ```javascript\n    models.sequelize.query(query, { replacements: { criteria: `%${criteria}%` } })\n      .then(([products]: any) => {\n        const dataString = JSON.stringify(products)\n        for (let i = 0; i < products.length; i++) {\n          products[i].name = req.__(products[i].name)\n          products[i].description = req.__(products[i].description)\n        }\n        res.json(utils.queryResultToJson(products))\n      }).catch((error: ErrorWithParent) => {\n        next(error.parent)\n      })\n    ```\n\nUsing parameterized queries helps prevent SQL injection by ensuring that user input is treated as data rather than executable code."}, "component": null}}, {"id": 72108915, "ref": "refs/pull/4/merge", "syntactic_id": "5569d50d838914ada08b433d0760d09e", "match_based_id": "fe0d67be15ca767b9ad78f6e5d48550943d3be6481349c95a7d7d05fec4411a3d138af01320e287b203565cedd59844742f8cbc134aef23123f0f1ca0ba45e87_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/c777606549d743073a189d91b75689b8c07d7c53/src/assistant-fix-sqli-sequelize.ts#L5", "first_seen_scan_id": 30017807, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "high", "created_at": "2024-07-07T23:55:11.185816Z", "relevant_since": "2024-07-07T23:55:11.184677Z", "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "location": {"file_path": "src/assistant-fix-sqli-sequelize.ts", "line": 5, "column": 30, "end_line": 5, "end_column": 164}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection", "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "confidence": "high", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["SQL Injection"], "cwe_names": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "owasp_names": ["A01:2017 - Injection", "A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "      models.sequelize.query(\n        \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\",\n        {\n          replacements: { criteria: `%${criteria}%` },\n          type: models.sequelize.QueryTypes.SELECT\n        }\n      )", "explanation": "The fix addresses the SQL injection vulnerability by using parameterized queries, which is the main issue. However, there is a small chance that the criteria handling logic might still cause unexpected behavior if not thoroughly tested. Additionally, other parts of the code that interact with this query might need minor adjustments to accommodate the new query format."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Use parameterized queries with Sequelize to prevent SQL injection.", "instructions": "1. Change the query string to use parameterized query syntax by replacing the dynamic values with placeholders.\n    ```typescript\n    const query = \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\";\n    ```\n2. Pass the dynamic value in an object as the second parameter of the `sequelize.query` method.\n    ```typescript\n    models.sequelize.query(query, { replacements: { criteria: `%${criteria}%` } })\n    ```\n3. Replace the original query execution line with the updated parameterized query.\n    ```typescript\n    models.sequelize.query(query, { replacements: { criteria: `%${criteria}%` } })\n      .then(([products]: any) => {\n        const dataString = JSON.stringify(products)\n        for (let i = 0; i < products.length; i++) {\n          products[i].name = req.__(products[i].name)\n          products[i].description = req.__(products[i].description)\n        }\n        res.json(utils.queryResultToJson(products))\n      }).catch((error: ErrorWithParent) => {\n        next(error.parent)\n      })\n    ```\n\nUsing parameterized queries helps prevent SQL injection by ensuring that user input is treated as data rather than executable code."}, "component": null}}, {"id": 72095480, "ref": "main", "syntactic_id": "c99bbc9f2073fbc54c14c4d0a25cb29d", "match_based_id": "18e7e9a7afed8512abac732cb4ac803b1eca4fa0138b693b5a1e552b3304361bb5bf2979323a97e265e9653f1590ff2700f4a56cdfdf881bc08d104b63bc94a7_0", "repository": {"name": "Semgrep-Demo/pro-engine-demo", "url": "https://github.com/Semgrep-Demo/pro-engine-demo"}, "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/api/jwt/JwtLog4jController.java#L24", "first_seen_scan_id": 30013558, "state": "unresolved", "triage_state": "untriaged", "status": "open", "confidence": "medium", "created_at": "2024-07-07T20:11:55.268659Z", "relevant_since": "2024-07-07T20:11:55.262180Z", "rule_name": "semgrep_demo.crlf-injection-logs-deepsemgrep-javaorg-copy", "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content. Please use the Jsoup.clean() function to sanitize data.", "location": {"file_path": "src/main/java/hawk/api/jwt/JwtLog4jController.java", "line": 24, "column": 13, "end_line": 24, "end_column": 63}, "triaged_at": null, "triage_comment": null, "triage_reason": null, "state_updated_at": null, "categories": ["security"], "rule": {"name": "semgrep_demo.crlf-injection-logs-deepsemgrep-javaorg-copy", "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content. Please use the Jsoup.clean() function to sanitize data.", "confidence": "medium", "category": "security", "subcategories": ["vuln"], "vulnerability_classes": ["Improper Validation"], "cwe_names": ["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"], "owasp_names": ["A03:2021 - Injection"]}, "external_ticket": null, "severity": "high", "sourcing_policy": {"id": 65703, "name": "Rule Board - PR Comments column", "slug": "rule-board-pr-comments"}, "assistant": {"autofix": {"fix_code": "            logger.info(\"{} = {}\", it, Jsoup.clean(request.getHeader(it), Whitelist.none()));", "explanation": "The suggested fix uses Jsoup to sanitize the header values, which should address potential security issues related to untrusted input. However, there is a small chance that the original issue might still be present if the problem was not related to input sanitization."}, "autotriage": {"verdict": "true_positive", "reason": ""}, "guidance": {"summary": "Use the `safe_hlag` sanitizer function to sanitize untrusted data before logging.", "instructions": "1. Import the `safe_hlag` sanitizer function by adding `import com.celfocus.sanitizer.safe_hlag;` at the top of your file.\n2. Locate the line where the logger is used: `logger.info(\"{} = {}\", it, request.getHeader(it));`.\n3. Sanitize the header value by wrapping `request.getHeader(it)` with `safe_hlag`. The updated line should be:\n    ```java\n    logger.info(\"{} = {}\", it, safe_hlag(request.getHeader(it)));\n    ```\n\nFor more information, please refer to our [AppSec Wiki](https://myappsec.com)."}, "component": null}}]