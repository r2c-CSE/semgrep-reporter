Finding Title,Finding Description & Remediation,status,First Seen,severity,confidence,triage_state,triaged_at,triage_comment,state_updated_at,repository,location
java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag,A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);',open,2024-05-22T14:21:28.598991Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/newnewnenwbadcookie.java', 'line': 23, 'column': 9, 'end_line': 23, 'end_column': 33}"
java.servlets.security.audit.cookie-secure-flag-false.cookie-secure-flag-false,A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);',open,2024-05-22T14:21:28.598978Z,medium,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/newnewnenwbadcookie.java', 'line': 23, 'column': 9, 'end_line': 23, 'end_column': 33}"
java.lang.security.audit.command-injection-process-builder.command-injection-process-builder,A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.,open,2024-05-22T10:36:17.897795Z,high,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/Cowsay.java', 'line': 11, 'column': 5, 'end_line': 11, 'end_column': 46}"
java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep,"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.",open,2024-05-22T10:36:17.897791Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/User.java', 'line': 49, 'column': 22, 'end_line': 49, 'end_column': 46}"
java.lang.security.audit.formatted-sql-string.formatted-sql-string,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.,open,2024-05-22T10:36:17.897788Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/User.java', 'line': 49, 'column': 22, 'end_line': 49, 'end_column': 46}"
java.spring.command-injection.tainted-system-command.tainted-system-command,"Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands. For more information, see: [Java command injection prevention](https://semgrep.dev/docs/cheat-sheets/java-command-injection/)",open,2024-05-22T10:36:17.897784Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/Cowsay.java', 'line': 11, 'column': 42, 'end_line': 11, 'end_column': 45}"
java.spring.security.injection.tainted-sql-string.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",open,2024-05-22T10:36:17.897780Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/User.java', 'line': 47, 'column': 22, 'end_line': 47, 'end_column': 81}"
java.spring.security.injection.tainted-url-host.tainted-url-host,"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.",open,2024-05-22T10:36:17.897776Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/LinkLister.java', 'line': 26, 'column': 17, 'end_line': 26, 'end_column': 29}"
java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add,"Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.",open,2024-05-22T10:36:17.897772Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/LinkLister.java', 'line': 16, 'column': 34, 'end_line': 16, 'end_column': 37}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-05-22T10:36:17.897768Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 35, 'column': 66, 'end_line': 35, 'end_column': 85}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-05-22T10:36:17.897764Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 38, 'column': 68, 'end_line': 38, 'end_column': 87}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-05-22T10:36:17.897760Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 41, 'column': 68, 'end_line': 41, 'end_column': 87}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-05-22T10:36:17.897757Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 44, 'column': 68, 'end_line': 44, 'end_column': 87}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-05-22T10:36:17.897753Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 47, 'column': 68, 'end_line': 47, 'end_column': 87}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-05-22T10:36:17.897749Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 50, 'column': 68, 'end_line': 50, 'end_column': 87}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-05-22T10:36:17.897745Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 53, 'column': 68, 'end_line': 53, 'end_column': 87}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-05-22T10:36:17.897741Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'v-sqli.js', 'line': 34, 'column': 68, 'end_line': 34, 'end_column': 76}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-05-22T10:36:17.897737Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'v-sqli.js', 'line': 36, 'column': 66, 'end_line': 36, 'end_column': 85}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-05-22T10:36:17.897733Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'v-sqli.js', 'line': 39, 'column': 68, 'end_line': 39, 'end_column': 76}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-05-22T10:36:17.897728Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vv-sqli.js', 'line': 34, 'column': 68, 'end_line': 34, 'end_column': 76}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-05-22T10:36:17.897724Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vv-sqli.js', 'line': 36, 'column': 66, 'end_line': 36, 'end_column': 85}"
javascript.express.security.injection.tainted-sql-string.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",open,2024-05-22T10:36:17.897720Z,high,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vv-sqli.js', 'line': 39, 'column': 66, 'end_line': 39, 'end_column': 85}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-05-22T10:36:17.897717Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 35, 'column': 21, 'end_line': 35, 'end_column': 89}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-05-22T10:36:17.897713Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 38, 'column': 23, 'end_line': 38, 'end_column': 91}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-05-22T10:36:17.897709Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 41, 'column': 23, 'end_line': 41, 'end_column': 91}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-05-22T10:36:17.897706Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 44, 'column': 23, 'end_line': 44, 'end_column': 91}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-05-22T10:36:17.897701Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 47, 'column': 23, 'end_line': 47, 'end_column': 91}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-05-22T10:36:17.897698Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 50, 'column': 23, 'end_line': 50, 'end_column': 91}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-05-22T10:36:17.897694Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'sqli.js', 'line': 53, 'column': 23, 'end_line': 53, 'end_column': 91}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-05-22T10:36:17.897689Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'v-sqli.js', 'line': 34, 'column': 23, 'end_line': 34, 'end_column': 80}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-05-22T10:36:17.897686Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'v-sqli.js', 'line': 36, 'column': 21, 'end_line': 36, 'end_column': 89}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-05-22T10:36:17.897682Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'v-sqli.js', 'line': 39, 'column': 23, 'end_line': 39, 'end_column': 80}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-05-22T10:36:17.897678Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vv-sqli.js', 'line': 34, 'column': 23, 'end_line': 34, 'end_column': 80}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-05-22T10:36:17.897674Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vv-sqli.js', 'line': 36, 'column': 21, 'end_line': 36, 'end_column': 89}"
javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection,"Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",open,2024-05-22T10:36:17.897671Z,high,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vv-sqli.js', 'line': 39, 'column': 21, 'end_line': 39, 'end_column': 89}"
python.django.security.audit.xss.var-in-script-tag.var-in-script-tag,"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",open,2024-05-22T10:36:17.897667Z,high,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'client/index.html', 'line': 63, 'column': 41, 'end_line': 63, 'end_column': 47}"
python.django.security.audit.xss.var-in-script-tag.var-in-script-tag,"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",open,2024-05-22T10:36:17.897663Z,high,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'client/index.html', 'line': 67, 'column': 23, 'end_line': 67, 'end_column': 35}"
python.django.security.audit.xss.var-in-script-tag.var-in-script-tag,"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",open,2024-05-22T10:36:17.897659Z,high,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'client/index.html', 'line': 67, 'column': 58, 'end_line': 67, 'end_column': 72}"
python.django.security.audit.xss.var-in-script-tag.var-in-script-tag,"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",open,2024-05-22T10:36:17.897655Z,high,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'client/index.html', 'line': 73, 'column': 37, 'end_line': 73, 'end_column': 45}"
generic.html-templates.security.var-in-script-tag.var-in-script-tag,"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",open,2024-05-22T10:36:17.897651Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'client/index.html', 'line': 63, 'column': 41, 'end_line': 63, 'end_column': 47}"
generic.html-templates.security.var-in-script-tag.var-in-script-tag,"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",open,2024-05-22T10:36:17.897647Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'client/index.html', 'line': 67, 'column': 23, 'end_line': 67, 'end_column': 35}"
generic.html-templates.security.var-in-script-tag.var-in-script-tag,"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",open,2024-05-22T10:36:17.897643Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'client/index.html', 'line': 67, 'column': 58, 'end_line': 67, 'end_column': 72}"
generic.html-templates.security.var-in-script-tag.var-in-script-tag,"Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",open,2024-05-22T10:36:17.897639Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'client/index.html', 'line': 73, 'column': 37, 'end_line': 73, 'end_column': 45}"
html.security.audit.missing-integrity.missing-integrity,"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",open,2024-05-22T10:36:17.897634Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'client/index.html', 'line': 57, 'column': 5, 'end_line': 57, 'end_column': 72}"
html.security.audit.missing-integrity.missing-integrity,"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",open,2024-05-22T10:36:17.897630Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'client/index.html', 'line': 60, 'column': 5, 'end_line': 60, 'end_column': 101}"
html.security.audit.missing-integrity.missing-integrity,"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",open,2024-05-22T10:36:17.897626Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'client/login.html', 'line': 40, 'column': 3, 'end_line': 40, 'end_column': 70}"
html.security.audit.missing-integrity.missing-integrity,"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",open,2024-05-22T10:36:17.897623Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'client/login.html', 'line': 43, 'column': 3, 'end_line': 43, 'end_column': 99}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897618Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/new-vul.java', 'line': 10, 'column': 9, 'end_line': 10, 'end_column': 35}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897614Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/new-vul.java', 'line': 19, 'column': 9, 'end_line': 19, 'end_column': 35}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897610Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/new-vul.java', 'line': 28, 'column': 9, 'end_line': 28, 'end_column': 35}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897606Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/new-vul.java', 'line': 33, 'column': 9, 'end_line': 33, 'end_column': 95}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897602Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/new-vul.java', 'line': 35, 'column': 9, 'end_line': 35, 'end_column': 99}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897598Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/new-vul.java', 'line': 41, 'column': 13, 'end_line': 41, 'end_column': 36}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897595Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/new-vul.java', 'line': 47, 'column': 9, 'end_line': 47, 'end_column': 95}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897591Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/new-vul.java', 'line': 49, 'column': 9, 'end_line': 49, 'end_column': 99}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897587Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/very-new-vul.java', 'line': 10, 'column': 9, 'end_line': 10, 'end_column': 35}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897584Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/very-new-vul.java', 'line': 19, 'column': 9, 'end_line': 19, 'end_column': 35}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897580Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/very-new-vul.java', 'line': 28, 'column': 9, 'end_line': 28, 'end_column': 35}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897576Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/very-new-vul.java', 'line': 33, 'column': 9, 'end_line': 33, 'end_column': 95}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897572Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/very-new-vul.java', 'line': 35, 'column': 9, 'end_line': 35, 'end_column': 99}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897569Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/very-new-vul.java', 'line': 41, 'column': 13, 'end_line': 41, 'end_column': 36}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897565Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/very-new-vul.java', 'line': 47, 'column': 13, 'end_line': 47, 'end_column': 36}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897561Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/very-new-vul.java', 'line': 54, 'column': 13, 'end_line': 54, 'end_column': 36}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897557Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/very-new-vul.java', 'line': 61, 'column': 13, 'end_line': 61, 'end_column': 36}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897553Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/vuln.java', 'line': 10, 'column': 9, 'end_line': 10, 'end_column': 35}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897549Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/vuln.java', 'line': 20, 'column': 9, 'end_line': 20, 'end_column': 35}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897545Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/vuln.java', 'line': 30, 'column': 9, 'end_line': 30, 'end_column': 37}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897542Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/vuln.java', 'line': 40, 'column': 9, 'end_line': 40, 'end_column': 38}"
java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897538Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/vuln.java', 'line': 50, 'column': 9, 'end_line': 50, 'end_column': 38}"
java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897534Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/Comment.java', 'line': 55, 'column': 7, 'end_line': 55, 'end_column': 26}"
java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897530Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/Comment.java', 'line': 70, 'column': 7, 'end_line': 70, 'end_column': 26}"
java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897526Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/Cowsay.java', 'line': 24, 'column': 7, 'end_line': 24, 'end_column': 26}"
java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897523Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/Postgres.java', 'line': 25, 'column': 13, 'end_line': 25, 'end_column': 32}"
java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897519Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/Postgres.java', 'line': 100, 'column': 10, 'end_line': 100, 'end_column': 29}"
java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897515Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/Postgres.java', 'line': 114, 'column': 13, 'end_line': 114, 'end_column': 32}"
java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897512Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/User.java', 'line': 34, 'column': 7, 'end_line': 34, 'end_column': 26}"
java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace,Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.,open,2024-05-22T10:36:17.897508Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/User.java', 'line': 58, 'column': 7, 'end_line': 58, 'end_column': 26}"
java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag,A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);',open,2024-05-22T10:36:17.897505Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/cookie-secure-flag.java', 'line': 23, 'column': 9, 'end_line': 23, 'end_column': 33}"
java.lang.security.audit.crypto.use-of-md5.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.,open,2024-05-22T10:36:17.897501Z,medium,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/Postgres.java', 'line': 67, 'column': 58, 'end_line': 67, 'end_column': 63}"
java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.,open,2024-05-22T10:36:17.897497Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/User.java', 'line': 49, 'column': 22, 'end_line': 49, 'end_column': 46}"
java.servlets.security.audit.cookie-secure-flag-false.cookie-secure-flag-false,A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);',open,2024-05-22T10:36:17.897493Z,medium,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/cookie-secure-flag.java', 'line': 23, 'column': 9, 'end_line': 23, 'end_column': 33}"
java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",open,2024-05-22T10:36:17.897490Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/CowController.java', 'line': 11, 'column': 6, 'end_line': 11, 'end_column': 20}"
java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",open,2024-05-22T10:36:17.897486Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/LinksController.java', 'line': 15, 'column': 4, 'end_line': 15, 'end_column': 18}"
java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",open,2024-05-22T10:36:17.897482Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'src/main/java/com/scalesec/vulnado/LinksController.java', 'line': 19, 'column': 4, 'end_line': 19, 'end_column': 18}"
javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape,"Detected an explicit unescape in a Mustache template, using triple braces '{{{...}}}' or ampersand '&'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.",open,2024-05-22T10:36:17.897478Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'client/index.html', 'line': 73, 'column': 36, 'end_line': 73, 'end_column': 46}"
swift.commoncrypto.hardcoded-salt.hardcoded-salt,"Cryptographic operations were identified that leverage a hardcoded salt/nonce. A salt does not need to remain secret, but should be random, generated from cryptographically secure sources of entropy, such as an CSPRNG. On iOS/macOS platforms, secure random data can be obtained via the `SecCopyRandomBytes` API available from RandomizationServices.",open,2024-05-22T10:36:17.897474Z,medium,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/hardcoded_secrets.swift', 'line': 60, 'column': 8, 'end_line': 60, 'end_column': 16}"
swift.commoncrypto.hardcoded-salt.hardcoded-salt,"Cryptographic operations were identified that leverage a hardcoded salt/nonce. A salt does not need to remain secret, but should be random, generated from cryptographically secure sources of entropy, such as an CSPRNG. On iOS/macOS platforms, secure random data can be obtained via the `SecCopyRandomBytes` API available from RandomizationServices.",open,2024-05-22T10:36:17.897470Z,medium,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/hardcoded_secrets.swift', 'line': 74, 'column': 12, 'end_line': 74, 'end_column': 17}"
swift.commoncrypto.hardcoded-symmetric-key.hardcoded-symmetric-key,"A hard-coded cryptographic key was detected. An attacker that obtains this key via reverse engineering or access to source code will be able to re-use this key to encrypt, decrypt, and/or sign data at will. Cryptographic keys should be unique, and randomly generated per user, per client.",open,2024-05-22T10:36:17.897466Z,medium,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/hardcoded_secrets.swift', 'line': 21, 'column': 5, 'end_line': 21, 'end_column': 10}"
swift.commoncrypto.hardcoded-symmetric-key.hardcoded-symmetric-key,"A hard-coded cryptographic key was detected. An attacker that obtains this key via reverse engineering or access to source code will be able to re-use this key to encrypt, decrypt, and/or sign data at will. Cryptographic keys should be unique, and randomly generated per user, per client.",open,2024-05-22T10:36:17.897462Z,medium,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/hardcoded_secrets.swift', 'line': 57, 'column': 34, 'end_line': 57, 'end_column': 41}"
swift.commoncrypto.insecure-crypto-aes-keysize.insecure-crypto-aes-keysize,AES symmetric cryptographic operations were identified using a key size of 128bit which is less than the industry standard recommendation of 256bit.,open,2024-05-22T10:36:17.897458Z,medium,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/hardcoded_secrets.swift', 'line': 22, 'column': 5, 'end_line': 22, 'end_column': 14}"
swift.commoncrypto.insecure-crypto-aes-keysize.insecure-crypto-aes-keysize,AES symmetric cryptographic operations were identified using a key size of 128bit which is less than the industry standard recommendation of 256bit.,open,2024-05-22T10:36:17.897454Z,medium,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/hardcoded_secrets.swift', 'line': 40, 'column': 21, 'end_line': 40, 'end_column': 30}"
swift.commoncrypto.insecure-crypto-cbc-mode.insecure-crypto-cbc-mode,"Symmetric cryptographic operations were identified that use Cipher Block Chaining (CBC) mode. AES in CBC mode provides unauthenticated cryptographic encryption. CBC is also malleable, meaning that an attacker can influence the decrypted plaintext by modifying bits of the ciphertext (bit flipping attacks). Consider using an authenticated encryption mechanism, such as AES-GCM or ChaChaPoly. If CBC mode is **required**, consider augmenting the encryption with authentication by signing the ciphertexts with a Message Authentication Code (e.g. HMAC).",open,2024-05-22T10:36:17.897450Z,medium,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/hardcoded_secrets.swift', 'line': 16, 'column': 1, 'end_line': 16, 'end_column': 8}"
swift.commoncrypto.insecure-crypto-cbc-mode.insecure-crypto-cbc-mode,"Symmetric cryptographic operations were identified that use Cipher Block Chaining (CBC) mode. AES in CBC mode provides unauthenticated cryptographic encryption. CBC is also malleable, meaning that an attacker can influence the decrypted plaintext by modifying bits of the ciphertext (bit flipping attacks). Consider using an authenticated encryption mechanism, such as AES-GCM or ChaChaPoly. If CBC mode is **required**, consider augmenting the encryption with authentication by signing the ciphertexts with a Message Authentication Code (e.g. HMAC).",open,2024-05-22T10:36:17.897446Z,medium,high,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'vulns/hardcoded_secrets.swift', 'line': 34, 'column': 17, 'end_line': 34, 'end_column': 24}"
terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address,"Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible.",open,2024-05-22T10:36:17.897442Z,medium,medium,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'reverse_shell/main.tf', 'line': 33, 'column': 1, 'end_line': 41, 'end_column': 2}"
yaml.docker-compose.security.no-new-privileges.no-new-privileges,Service 'db' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.,open,2024-05-22T10:36:17.897437Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'docker-compose.yml', 'line': 23, 'column': 3, 'end_line': 23, 'end_column': 5}"
yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service,"Service 'db' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",open,2024-05-22T10:36:17.897426Z,medium,low,untriaged,,,,"{'name': 'local_scan/vulnado', 'url': 'https://github.com/nnayar-r2c/vulnado'}","{'file_path': 'docker-compose.yml', 'line': 23, 'column': 3, 'end_line': 23, 'end_column': 5}"
