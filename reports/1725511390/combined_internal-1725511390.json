[
    {
        "id": 76476607,
        "ref": "main",
        "syntactic_id": "10fea2c100c9a29a1cbd4d90491ab327",
        "match_based_id": "1e3f3b33d36e8279b541c97a9a40a03f2c1fd84c4eba94e9360fe6ffa9cd156a042ce1538c8e963a85cb673ca5eb2fd36fc2ec7ebea0a6d492e7c339e9b06477_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/fileServer.ts#L33",
        "first_seen_scan_id": 31395010,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-21T07:21:13.911088Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "routes/fileServer.ts",
            "line": 33,
            "column": 41,
            "end_line": 33,
            "end_column": 45
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638605Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086749,
        "ref": "main",
        "syntactic_id": "a7c9cb6ab77a6aa54e956b214b19f8c6",
        "match_based_id": "b39f39c0b460d990211dd5b98c1de095502f2fad128a5d41cd88a19712e4afb5b941c957d2afb5cc01d26341d87fd3e614338ad17fc82d7fdc00452ffb6bebce_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/dataExport.ts#L61",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224756Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
        "rule_message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
        "location": {
            "file_path": "routes/dataExport.ts",
            "line": 61,
            "column": 22,
            "end_line": 61,
            "end_column": 45
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639459Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
            "message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
            ],
            "owasp_names": [
                "A01:2017 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      // Ensure updatedEmail is properly sanitized before using it in the query\n      const sanitizedEmail = updatedEmail.replace(/[^\\w@.-]/g, '');\n      db.orders.find({ email: sanitizedEmail }).then((orders: Array<{\n        orderId: string\n        totalPrice: number\n        products: ProductModel[]\n        bonus: number\n        eta: string\n      }>) => {\n        if (orders.length > 0) {\n          orders.forEach(order => {\n            userData.orders.push({\n              orderId: order.orderId,\n              totalPrice: order.totalPrice,\n              products: [...order.products],\n              bonus: order.bonus,\n              eta: order.eta\n            })\n          })\n        }",
                "explanation": "The fix addresses the potential issue of unsanitized input by sanitizing the email. However, there is a small chance that the original issue might still be present if the sanitization does not cover all edge cases. Additionally, other parts of the code that use `updatedEmail` might also need similar sanitization to ensure consistency and security."
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Use `express-mongo-sanitize` to sanitize incoming request data before using it in MongoDB queries.",
                "instructions": "### English Instructions\n\n1. Install the `express-mongo-sanitize` package if it's not already installed by running `$ npm install express-mongo-sanitize`.\n2. Import `express-mongo-sanitize` at the top of your file with `const mongoSanitize = require('express-mongo-sanitize');`.\n3. Use `mongoSanitize` middleware in your Express app to sanitize all incoming requests. Add `app.use(mongoSanitize());` before your route handlers.\n4. Sanitize the `updatedEmail` variable before using it in the MongoDB query by adding `const sanitizedEmail = req.body.updatedEmail ? mongoSanitize.sanitize(req.body.updatedEmail) : '';`.\n5. Replace `updatedEmail` with `sanitizedEmail` in the `db.orders.find` query.\n\n### Spanish Instructions\n\n1. Instala el paquete `express-mongo-sanitize` si no est\u00e1 ya instalado ejecutando `$ npm install express-mongo-sanitize`.\n2. Importa `express-mongo-sanitize` en la parte superior de tu archivo con `const mongoSanitize = require('express-mongo-sanitize');`.\n3. Usa el middleware `mongoSanitize` en tu aplicaci\u00f3n Express para sanitizar todas las solicitudes entrantes. A\u00f1ade `app.use(mongoSanitize());` antes de tus manejadores de rutas.\n4. Sanitiza la variable `updatedEmail` antes de usarla en la consulta de MongoDB a\u00f1adiendo `const sanitizedEmail = req.body.updatedEmail ? mongoSanitize.sanitize(req.body.updatedEmail) : '';`.\n5. Reemplaza `updatedEmail` con `sanitizedEmail` en la consulta `db.orders.find`."
            },
            "component": {
                "tag": "PII",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086748,
        "ref": "main",
        "syntactic_id": "a5dd31c6dce210eb8054e056b82f114b",
        "match_based_id": "94be1e077bb978cbc34901180f67dc2f8b8f319f8a4f72381aa07f6f6423ac4262736a443a4d6c5f23af666f537e90a52de702801e9ebbdb007bbafb94f75d75_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/dataExport.ts#L80",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224740Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
        "rule_message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
        "location": {
            "file_path": "routes/dataExport.ts",
            "line": 80,
            "column": 25,
            "end_line": 80,
            "end_column": 42
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639445Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
            "message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
            ],
            "owasp_names": [
                "A01:2017 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "PII",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086747,
        "ref": "main",
        "syntactic_id": "570041f307134c176634ae603e431215",
        "match_based_id": "8580d07f2d14ed8c71408207e031c649519830853f0fc1ca1380a2bb9706f9d9031f543e828d7063db06b7e1815f61b56bc2ab4760a61349cdb71bd8aa26eb05_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/likeProductReviews.ts#L18",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224724Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
        "rule_message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
        "location": {
            "file_path": "routes/likeProductReviews.ts",
            "line": 18,
            "column": 24,
            "end_line": 18,
            "end_column": 35
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639431Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
            "message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
            ],
            "owasp_names": [
                "A01:2017 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086746,
        "ref": "main",
        "syntactic_id": "9048a86d1634c29024a18b1833349323",
        "match_based_id": "484d72130c1b9671ba08745b3863f046c069ee6a10bf61fcb97a9ac4f4870964a0ad8ac41f9e0e7597c0df1b1a5bfe47711187e0c3232a7b899c512cea450138_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/likeProductReviews.ts#L25",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224709Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
        "rule_message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
        "location": {
            "file_path": "routes/likeProductReviews.ts",
            "line": 25,
            "column": 13,
            "end_line": 25,
            "end_column": 24
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639417Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
            "message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
            ],
            "owasp_names": [
                "A01:2017 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086745,
        "ref": "main",
        "syntactic_id": "9eeac89ae8c19b91be4ad7919d53a33e",
        "match_based_id": "8580d07f2d14ed8c71408207e031c649519830853f0fc1ca1380a2bb9706f9d9031f543e828d7063db06b7e1815f61b56bc2ab4760a61349cdb71bd8aa26eb05_1",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/likeProductReviews.ts#L31",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224693Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
        "rule_message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
        "location": {
            "file_path": "routes/likeProductReviews.ts",
            "line": 31,
            "column": 36,
            "end_line": 31,
            "end_column": 47
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639404Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
            "message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
            ],
            "owasp_names": [
                "A01:2017 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086744,
        "ref": "main",
        "syntactic_id": "d7604341114935744a7ca3eec249bb55",
        "match_based_id": "484d72130c1b9671ba08745b3863f046c069ee6a10bf61fcb97a9ac4f4870964a0ad8ac41f9e0e7597c0df1b1a5bfe47711187e0c3232a7b899c512cea450138_1",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/likeProductReviews.ts#L42",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224677Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
        "rule_message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
        "location": {
            "file_path": "routes/likeProductReviews.ts",
            "line": 42,
            "column": 21,
            "end_line": 42,
            "end_column": 32
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639390Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
            "message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
            ],
            "owasp_names": [
                "A01:2017 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086743,
        "ref": "main",
        "syntactic_id": "57682793c17336e4307feb606c470f8b",
        "match_based_id": "a36cb2722d9458ffad4a1953a2887f6ae7c8d1603530079078ca956adf65e9391103bb2c70f5110f807906adee8716a369982787e19e94d33155119895cc21b6_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/showProductReviews.ts#L34",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224662Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
        "rule_message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
        "location": {
            "file_path": "routes/showProductReviews.ts",
            "line": 34,
            "column": 21,
            "end_line": 34,
            "end_column": 56
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639377Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
            "message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
            ],
            "owasp_names": [
                "A01:2017 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086742,
        "ref": "main",
        "syntactic_id": "75e59a2c0b22e0fda09395bddf42d2ce",
        "match_based_id": "4c2cfe3d2e33971886f6fde706e4ab77126ad8c70c5002c0c9938b75f88f6e055e115b5577e4f6e319114b3c0a1f6a32f2c9f93dda6f67ab579fff58effa3993_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/trackOrder.ts#L18",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224646Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
        "rule_message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
        "location": {
            "file_path": "routes/trackOrder.ts",
            "line": 18,
            "column": 20,
            "end_line": 18,
            "end_column": 58
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639363Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
            "message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
            ],
            "owasp_names": [
                "A01:2017 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086741,
        "ref": "main",
        "syntactic_id": "567ab72df01c022de14e2f1f957c8ec6",
        "match_based_id": "c5d8f2a98a7d71a30d2903ecca58fd59fbc13743481c1bde7ca9f930e13336c2dab7f85f61fee3beb6698d5cdff8e07eab47d622f78870e33b2ead7ab4c37c20_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/updateProductReviews.ts#L18",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224631Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
        "rule_message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
        "location": {
            "file_path": "routes/updateProductReviews.ts",
            "line": 18,
            "column": 7,
            "end_line": 18,
            "end_column": 27
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639349Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli",
            "message": "Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to properly sanitize the data if you absolutely must pass request data into a mongo query.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
            ],
            "owasp_names": [
                "A01:2017 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086740,
        "ref": "main",
        "syntactic_id": "395d7d9dc660f275e57b8daf4a0c9841",
        "match_based_id": "cc6f8a73fe7044cae8b8433c0c5ea2d175f47c90ad6f73a0b0c1e4e9b36069756742671c2d5662a9bf010184c7c773a19bad45b329e39da7b6eaaab6d9a19f11_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/data/static/codefixes/dbSchemaChallenge_1.ts#L5",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224615Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "data/static/codefixes/dbSchemaChallenge_1.ts",
            "line": 5,
            "column": 74,
            "end_line": 5,
            "end_column": 82
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639336Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086739,
        "ref": "main",
        "syntactic_id": "bc59b1217f056fb77833991db1877621",
        "match_based_id": "dabd344c5e9719f8dfae06af7680e1cb154778c1c1661d2f9b879d680585f3024864fc784fc0b213a4a2e2d93ec52adb392a7f9fb79abb8cf04eed36baad5971_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/data/static/codefixes/dbSchemaChallenge_3.ts#L11",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224599Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "data/static/codefixes/dbSchemaChallenge_3.ts",
            "line": 11,
            "column": 74,
            "end_line": 11,
            "end_column": 82
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639322Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086738,
        "ref": "main",
        "syntactic_id": "1c1793e8b6bf4ad6cabcad1ad137b18d",
        "match_based_id": "b537962e8172bf1df5450c26fce4f0747802341cd981226e397ae3c16d1cd3f81dbedb05c2ccbe4c8a791faa1f58143f43e54ec2aa2fe6fd0247b9c70664645f_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/data/static/codefixes/unionSqlInjectionChallenge_1.ts#L6",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224584Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "data/static/codefixes/unionSqlInjectionChallenge_1.ts",
            "line": 6,
            "column": 74,
            "end_line": 6,
            "end_column": 82
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639308Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086737,
        "ref": "main",
        "syntactic_id": "9a4413958a66e3c9369cb2302f537f6d",
        "match_based_id": "11b4b9b9512a71093d60c5236177e0df5e8fbad7bb0f766cff55edbef50cdfc914260978067509087fd0c6f0ee92196a277707259557775fafe444dbc8beff5e_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/data/static/codefixes/unionSqlInjectionChallenge_3.ts#L10",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224568Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "data/static/codefixes/unionSqlInjectionChallenge_3.ts",
            "line": 10,
            "column": 74,
            "end_line": 10,
            "end_column": 82
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639295Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086736,
        "ref": "main",
        "syntactic_id": "aa2119ac12822207ccdc41ae55b03dca",
        "match_based_id": "3eda57581faf9a82db83460d918f4e5b67df9dacf49f0ca0e65f80645bdc2fdb5967744cb68fe61de21afeed495c581b341c5a96425a35897bfca8518b790e10_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/login.ts#L36",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224552Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "routes/login.ts",
            "line": 36,
            "column": 66,
            "end_line": 36,
            "end_column": 86
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639281Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086735,
        "ref": "main",
        "syntactic_id": "9d98017fb67540279be604bc262ec2c6",
        "match_based_id": "4b4e1c021f8ce2bd60bed2d5f57f5b48a0e0df974477f72ff837a6b840d86e5e4ade1992276bf4f46dadf6a55de413bca878412a8882bdec471cfeb0cca1d33a_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/search.ts#L23",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224537Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "routes/search.ts",
            "line": 23,
            "column": 74,
            "end_line": 23,
            "end_column": 82
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639267Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086734,
        "ref": "main",
        "syntactic_id": "c6be3b476a01012e111d16d89cf4cdaa",
        "match_based_id": "01b8e724b9b2ca911743bd18718f705749ee2d12329b08125c003a1141def61cecdb34215ced0cd85fd4a0209fa6f4e024c13099eb57a6251a313830acb5172a_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/data/static/codefixes/dbSchemaChallenge_1.ts#L5",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.224521Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "data/static/codefixes/dbSchemaChallenge_1.ts",
            "line": 5,
            "column": 28,
            "end_line": 5,
            "end_column": 162
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639254Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086733,
        "ref": "main",
        "syntactic_id": "5a4a5daadc9a98790579c51bcd52aeda",
        "match_based_id": "4ded94d6131f70079d7885c7bb41acbbcacd1f422be56352873bb2463cf3648e663483dbf43f137e12b1f4f7e7f4b2f875abb2f7e72fcd74695a7e9c05dadfc6_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/data/static/codefixes/dbSchemaChallenge_3.ts#L11",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.224506Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "data/static/codefixes/dbSchemaChallenge_3.ts",
            "line": 11,
            "column": 28,
            "end_line": 11,
            "end_column": 159
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639240Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086732,
        "ref": "main",
        "syntactic_id": "ab421f76e82b714154116218ebcee65f",
        "match_based_id": "68ee178dbe58f781b2d43de36ca8e69a77939878c90876e25922769ef38429441be8eded69f44074b38e9a176e2c8dbb515131767ba2f80d3acce9c329deae72_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/data/static/codefixes/unionSqlInjectionChallenge_1.ts#L6",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.224490Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "data/static/codefixes/unionSqlInjectionChallenge_1.ts",
            "line": 6,
            "column": 28,
            "end_line": 6,
            "end_column": 159
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639227Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086731,
        "ref": "main",
        "syntactic_id": "c409ef941eec3008da6e1fd347e793aa",
        "match_based_id": "1a9181d8de1aa222fc91e705cd7647a3698dfc4a64e7e64c18fa8e37725eb152473fa798ec9b48f28a3bedc8c7937ff6d931e6e481be2ced162543fced5c95f4_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/data/static/codefixes/unionSqlInjectionChallenge_3.ts#L10",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.224474Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "data/static/codefixes/unionSqlInjectionChallenge_3.ts",
            "line": 10,
            "column": 28,
            "end_line": 10,
            "end_column": 159
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639213Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086730,
        "ref": "main",
        "syntactic_id": "85bda92c1105d740d7567c13e555352d",
        "match_based_id": "eddeedb9d7b92de284db849dde09cb92bbf70d79bbccdbfcbe4afefa3453b08a168120add4e27289a60190707c286b16e61dd9c57feb1988e62e8f89d93669aa_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/login.ts#L36",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.224459Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "routes/login.ts",
            "line": 36,
            "column": 28,
            "end_line": 36,
            "end_column": 169
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639199Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086729,
        "ref": "main",
        "syntactic_id": "5d7ba4f18852f358d353acbf6293e076",
        "match_based_id": "eec4f3b0e3caf0301754e875531abac913fef9be533240d23947ddebae2d44e701050fe63bd4f09afad7732e717b405cc181a3d00462ca54b871ea1fcd0e5822_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/search.ts#L23",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.224443Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "routes/search.ts",
            "line": 23,
            "column": 28,
            "end_line": 23,
            "end_column": 159
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639185Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086723,
        "ref": "main",
        "syntactic_id": "d00a8fb975670eba626b2403360c0ec2",
        "match_based_id": "10ae1f3d5d3e3f8ca7323849997390a22c0104e035eb8902ca75b6374efd81a05b8c8ed947dc3f00e1b5294996219fd41e919e1804fdfcb4614d926d72ef0f64_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/profileImageFileUpload.ts#L28",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224348Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.express-fs-filename.express-fs-filename",
        "rule_message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",
        "location": {
            "file_path": "routes/profileImageFileUpload.ts",
            "line": 28,
            "column": 19,
            "end_line": 28,
            "end_column": 118
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639171Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.express-fs-filename.express-fs-filename",
            "message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "PII",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086722,
        "ref": "main",
        "syntactic_id": "3daf00abf7c5ab65e96be5e2ba735058",
        "match_based_id": "957d0e5b9ee0be4e2b43dd2066c042ede02b497d6231c15c322997bac5dcac0a9e0d6eca5c36e9be0c48d09608a4972135039c290cae64bc8bc081924c13aff6_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/profileImageUrlUpload.ts#L31",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224332Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.express-fs-filename.express-fs-filename",
        "rule_message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",
        "location": {
            "file_path": "routes/profileImageUrlUpload.ts",
            "line": 31,
            "column": 54,
            "end_line": 31,
            "end_column": 136
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639158Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.express-fs-filename.express-fs-filename",
            "message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "PII",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086721,
        "ref": "main",
        "syntactic_id": "db11364d0246bb57c30eafac3a062d25",
        "match_based_id": "eda9eb552cb3f0e1d87ddad2d3e4205299f0a9cc2df84935656b313c5de2e0e5d99f895156d33c7c96636cec9134aeab3c110f66509c3256ab802ebbbf94592c_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeFixes.ts#L81",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224316Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.express-fs-filename.express-fs-filename",
        "rule_message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",
        "location": {
            "file_path": "routes/vulnCodeFixes.ts",
            "line": 81,
            "column": 23,
            "end_line": 81,
            "end_column": 69
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639144Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.express-fs-filename.express-fs-filename",
            "message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086720,
        "ref": "main",
        "syntactic_id": "6a4de051f7d6b1af020622ac49e5253b",
        "match_based_id": "eda9eb552cb3f0e1d87ddad2d3e4205299f0a9cc2df84935656b313c5de2e0e5d99f895156d33c7c96636cec9134aeab3c110f66509c3256ab802ebbbf94592c_1",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeFixes.ts#L82",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224300Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.express-fs-filename.express-fs-filename",
        "rule_message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",
        "location": {
            "file_path": "routes/vulnCodeFixes.ts",
            "line": 82,
            "column": 62,
            "end_line": 82,
            "end_column": 108
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639130Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.express-fs-filename.express-fs-filename",
            "message": "The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the file path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086719,
        "ref": "main",
        "syntactic_id": "23acd04da40389ba62cbdbc64319e899",
        "match_based_id": "0f40601cc0a11e2af577fab319211ef3f773c047d25e5f12e465aec7a62f5ab10581711783e442bf9b69fd13ec92dae7305dc38cd5632b59c337393b650ab2c3_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/redirect.ts#L19",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.224284Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.open-redirect-deepsemgrep.open-redirect-deepsemgrep",
        "rule_message": "The application builds a URL using user-controlled input which can lead to an open redirect vulnerability. An attacker can manipulate the URL and redirect users to an arbitrary domain. Open redirect vulnerabilities can lead to issues such as Cross-site scripting (XSS) or redirecting to a malicious domain for activities such as phishing to capture users' credentials. To prevent this vulnerability perform strict input validation of the domain against an allowlist of approved domains. Notify a user in your application that they are leaving the website. Display a domain where they are redirected to the user. A user can then either accept or deny the redirect to an untrusted site.",
        "location": {
            "file_path": "routes/redirect.ts",
            "line": 19,
            "column": 20,
            "end_line": 19,
            "end_column": 35
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639117Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.open-redirect-deepsemgrep.open-redirect-deepsemgrep",
            "message": "The application builds a URL using user-controlled input which can lead to an open redirect vulnerability. An attacker can manipulate the URL and redirect users to an arbitrary domain. Open redirect vulnerabilities can lead to issues such as Cross-site scripting (XSS) or redirecting to a malicious domain for activities such as phishing to capture users' credentials. To prevent this vulnerability perform strict input validation of the domain against an allowlist of approved domains. Notify a user in your application that they are leaving the website. Display a domain where they are redirected to the user. A user can then either accept or deny the redirect to an untrusted site.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Open Redirect"
            ],
            "cwe_names": [
                "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
            ],
            "owasp_names": [
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086718,
        "ref": "main",
        "syntactic_id": "d27b7ae9abe0cd24123fe549d2364a72",
        "match_based_id": "cd0f13ec26cb692692f53ae714aaff50c73519be9dc8594e3fbf7fa2c9cff848f8c002fc64ff4608ca2bdcadf02316a3dfbaefc600e9f684911326f947363281_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeSnippet.ts#L104",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.224269Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.regexp-redos.regexp-redos",
        "rule_message": "Detected `req` argument enters calls to `RegExp`. This could lead to a Regular Expression Denial of Service (ReDoS) through catastrophic backtracking. If the input is attacker controllable, this vulnerability can lead to systems being non-responsive or may crash due to ReDoS. Where possible avoid calls to `RegExp` with user input, if required ensure user input is escaped or validated. ",
        "location": {
            "file_path": "routes/vulnCodeSnippet.ts",
            "line": 104,
            "column": 32,
            "end_line": 104,
            "end_column": 73
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639103Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.regexp-redos.regexp-redos",
            "message": "Detected `req` argument enters calls to `RegExp`. This could lead to a Regular Expression Denial of Service (ReDoS) through catastrophic backtracking. If the input is attacker controllable, this vulnerability can lead to systems being non-responsive or may crash due to ReDoS. Where possible avoid calls to `RegExp` with user input, if required ensure user input is escaped or validated. ",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Denial-of-Service (DoS)"
            ],
            "cwe_names": [
                "CWE-1333: Inefficient Regular Expression Complexity"
            ],
            "owasp_names": []
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086717,
        "ref": "main",
        "syntactic_id": "563ea74e1d4292f56a9e84fe08376fd6",
        "match_based_id": "4d7a125e02d9de5dfdb1ebf22ec964af29361b06a57e0ea728528d4a11d34527ac23e57dc06ce12d8d6caa5f8f43c86372b4305d63266d1e9e034ef48f315cee_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeSnippet.ts#L108",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.224236Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.regexp-redos.regexp-redos",
        "rule_message": "Detected `req` argument enters calls to `RegExp`. This could lead to a Regular Expression Denial of Service (ReDoS) through catastrophic backtracking. If the input is attacker controllable, this vulnerability can lead to systems being non-responsive or may crash due to ReDoS. Where possible avoid calls to `RegExp` with user input, if required ensure user input is escaped or validated. ",
        "location": {
            "file_path": "routes/vulnCodeSnippet.ts",
            "line": 108,
            "column": 39,
            "end_line": 108,
            "end_column": 135
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639089Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.regexp-redos.regexp-redos",
            "message": "Detected `req` argument enters calls to `RegExp`. This could lead to a Regular Expression Denial of Service (ReDoS) through catastrophic backtracking. If the input is attacker controllable, this vulnerability can lead to systems being non-responsive or may crash due to ReDoS. Where possible avoid calls to `RegExp` with user input, if required ensure user input is escaped or validated. ",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Denial-of-Service (DoS)"
            ],
            "cwe_names": [
                "CWE-1333: Inefficient Regular Expression Complexity"
            ],
            "owasp_names": []
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086716,
        "ref": "main",
        "syntactic_id": "116f343520c0986a989b58a9cccf71d4",
        "match_based_id": "d626245ea5829afab30e16f96aa3d6561f53ce6c6d00d2307ea9ffee8e91f3ae0fdabf9fbb71822cb2d526576297f4e4d7f184f26c198235a88735a1fba3f795_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeSnippet.ts#L123",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.224220Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.regexp-redos.regexp-redos",
        "rule_message": "Detected `req` argument enters calls to `RegExp`. This could lead to a Regular Expression Denial of Service (ReDoS) through catastrophic backtracking. If the input is attacker controllable, this vulnerability can lead to systems being non-responsive or may crash due to ReDoS. Where possible avoid calls to `RegExp` with user input, if required ensure user input is escaped or validated. ",
        "location": {
            "file_path": "routes/vulnCodeSnippet.ts",
            "line": 123,
            "column": 28,
            "end_line": 123,
            "end_column": 73
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639076Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.regexp-redos.regexp-redos",
            "message": "Detected `req` argument enters calls to `RegExp`. This could lead to a Regular Expression Denial of Service (ReDoS) through catastrophic backtracking. If the input is attacker controllable, this vulnerability can lead to systems being non-responsive or may crash due to ReDoS. Where possible avoid calls to `RegExp` with user input, if required ensure user input is escaped or validated. ",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Denial-of-Service (DoS)"
            ],
            "cwe_names": [
                "CWE-1333: Inefficient Regular Expression Complexity"
            ],
            "owasp_names": []
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086715,
        "ref": "main",
        "syntactic_id": "6c312e5a03aa12569a17da6e2a84b818",
        "match_based_id": "d5e4a889ff380e20ff418cf89d458af367cecc8c8bbb524746fb12ae080de64e44725de89e4244d30c28f2718b79576b358e9a9867a1c7a6fe6419c7dcd6287e_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeSnippet.ts#L125",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.224205Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.regexp-redos.regexp-redos",
        "rule_message": "Detected `req` argument enters calls to `RegExp`. This could lead to a Regular Expression Denial of Service (ReDoS) through catastrophic backtracking. If the input is attacker controllable, this vulnerability can lead to systems being non-responsive or may crash due to ReDoS. Where possible avoid calls to `RegExp` with user input, if required ensure user input is escaped or validated. ",
        "location": {
            "file_path": "routes/vulnCodeSnippet.ts",
            "line": 125,
            "column": 35,
            "end_line": 125,
            "end_column": 83
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639062Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.regexp-redos.regexp-redos",
            "message": "Detected `req` argument enters calls to `RegExp`. This could lead to a Regular Expression Denial of Service (ReDoS) through catastrophic backtracking. If the input is attacker controllable, this vulnerability can lead to systems being non-responsive or may crash due to ReDoS. Where possible avoid calls to `RegExp` with user input, if required ensure user input is escaped or validated. ",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Denial-of-Service (DoS)"
            ],
            "cwe_names": [
                "CWE-1333: Inefficient Regular Expression Complexity"
            ],
            "owasp_names": []
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086714,
        "ref": "main",
        "syntactic_id": "8aa0bebab8c9e7611f2c63e5e2065dcb",
        "match_based_id": "044368fd4ae48ba044faf15ecc01da5ebf6dd3974476033399a977621b218fa5dfd455c0ec4295fbb2ec2c12ebc4fb5446575ae35ed6c274643ac48ccb00383b_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/profileImageUrlUpload.ts#L23",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.224190Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.request.ssrf-deepsemgrep.ssrf-deepsemgrep",
        "rule_message": "Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.",
        "location": {
            "file_path": "routes/profileImageUrlUpload.ts",
            "line": 23,
            "column": 16,
            "end_line": 23,
            "end_column": 19
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639048Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.request.ssrf-deepsemgrep.ssrf-deepsemgrep",
            "message": "Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Server-Side Request Forgery (SSRF)"
            ],
            "cwe_names": [
                "CWE-918: Server-Side Request Forgery (SSRF)"
            ],
            "owasp_names": [
                "A10:2021 - Server-Side Request Forgery (SSRF)"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": null,
            "component": {
                "tag": "PII",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086706,
        "ref": "main",
        "syntactic_id": "2115d3cbba2c7c0c3e80a130a3118101",
        "match_based_id": "d41f6282eed135404633f9b172ae34b6b783636a9e9999642e5db986f80d77b827c3a67cf9fe9aae749d4f0bdcb63ae1f7743fc1db2162f97aa3ddd63f41fd56_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/redirect.ts#L19",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.224067Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.audit.express-open-redirect.express-open-redirect",
        "rule_message": "The application redirects to a URL specified by user-supplied input `query` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.",
        "location": {
            "file_path": "routes/redirect.ts",
            "line": 19,
            "column": 20,
            "end_line": 19,
            "end_column": 25
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639035Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-open-redirect.express-open-redirect",
            "message": "The application redirects to a URL specified by user-supplied input `query` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Open Redirect"
            ],
            "cwe_names": [
                "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
            ],
            "owasp_names": [
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": {
                "verdict": "false_positive",
                "reason": "The code checks if the URL is allowed by calling 'security.isRedirectAllowed(toUrl)' before performing the redirect. This indicates that there is a validation mechanism in place to ensure the URL is safe, aligning with the intent of the Semgrep rule to prevent unvalidated redirects."
            },
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086705,
        "ref": "main",
        "syntactic_id": "5adf52e61d9b1c24aaf7445576d4a1ba",
        "match_based_id": "d9646d5b70dc0f1cfaf65c4f780b4838b32f18a2551abec56de0f7eb5a2db13c4ecd0700d7bb9ed42edae19e1b1dfbac66be3feb6ce9d4f82157afc53f03c188_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/dataErasure.ts#L69",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224052Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
        "rule_message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
        "location": {
            "file_path": "routes/dataErasure.ts",
            "line": 69,
            "column": 45,
            "end_line": 69,
            "end_column": 60
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639021Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
            "message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "PII",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086703,
        "ref": "main",
        "syntactic_id": "5f3a013c983e305e29a186ba847d7965",
        "match_based_id": "61ff0ef3a6438f8e69ef8457e3f95f844787ad58ef6a9b2a93dc684a1504d223617e6708689b4ece9b8a784fdacc6357e52220b0226dae233c0aadd44003b493_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/keyServer.ts#L14",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224021Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
        "rule_message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
        "location": {
            "file_path": "routes/keyServer.ts",
            "line": 14,
            "column": 52,
            "end_line": 14,
            "end_column": 56
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.639007Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
            "message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "cryptography",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086702,
        "ref": "main",
        "syntactic_id": "f7a7cc706f032a715cf6eaf3d639c2f1",
        "match_based_id": "b006dd478b7c4c3e581ffefa653e2acc49ff508e726936cf55711b71057a86100d2a66b55e0d7b9b04e48aad88892b8b168b8825d679db573dd93efd650d76d8_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/logfileServer.ts#L14",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224006Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
        "rule_message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
        "location": {
            "file_path": "routes/logfileServer.ts",
            "line": 14,
            "column": 42,
            "end_line": 14,
            "end_column": 46
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638993Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
            "message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "observability",
                "risk": "low"
            }
        }
    },
    {
        "id": 72086701,
        "ref": "main",
        "syntactic_id": "04283f1dce7c6557dc3a2bed1247aa20",
        "match_based_id": "c56fde85159a4267f7b3cb6642b732d750f67ba5e8a4550aa0e9213b802ebf3c27ebd8e6a3183d267eadc3d12749de80ac659ac2d28eabc6b17f92d20307241f_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/quarantineServer.ts#L14",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.223990Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
        "rule_message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
        "location": {
            "file_path": "routes/quarantineServer.ts",
            "line": 14,
            "column": 52,
            "end_line": 14,
            "end_column": 56
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638980Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
            "message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086700,
        "ref": "main",
        "syntactic_id": "e79e3e2b9e8eb21ebe8dd90627dfcc62",
        "match_based_id": "33b7141eed49238da420ec9577803fb8853ce0c26f5dbccf88323265a789cf24f5c8147d6baf6b15c489dd2b1b36fefae7843207e9f3f8e0af88de44306e520a_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/fileServer.ts#L33",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.223975Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "rule_message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
        "location": {
            "file_path": "routes/fileServer.ts",
            "line": 33,
            "column": 20,
            "end_line": 33,
            "end_column": 46
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638966Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
            "message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-73: External Control of File Name or Path"
            ],
            "owasp_names": [
                "A04:2021 - Insecure Design"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086699,
        "ref": "main",
        "syntactic_id": "95563a1cc346969036d17d258e71f248",
        "match_based_id": "169fd21661d97adbf183e909974bcc252fa19a91d68176a8e888d61c2e5283b516ae384c4576ecb09d96af8f1fcb4c5f99af3db7af83ec34f5fc9f11ecd9c927_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/keyServer.ts#L14",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.223960Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "rule_message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
        "location": {
            "file_path": "routes/keyServer.ts",
            "line": 14,
            "column": 20,
            "end_line": 14,
            "end_column": 57
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638952Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
            "message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-73: External Control of File Name or Path"
            ],
            "owasp_names": [
                "A04:2021 - Insecure Design"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "cryptography",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086698,
        "ref": "main",
        "syntactic_id": "e2363ee61a5d1ee3a1d1f3cc03b671f3",
        "match_based_id": "961a9260d800a2bb91582c6046728dc167574254fcc85628c7c79a7fd47557c3587663de55a9715bcf22c43160119c80d17b890e7a12090b6b091eb77fd2750e_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/logfileServer.ts#L14",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.223945Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "rule_message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
        "location": {
            "file_path": "routes/logfileServer.ts",
            "line": 14,
            "column": 20,
            "end_line": 14,
            "end_column": 47
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638939Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
            "message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-73: External Control of File Name or Path"
            ],
            "owasp_names": [
                "A04:2021 - Insecure Design"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "observability",
                "risk": "low"
            }
        }
    },
    {
        "id": 72086697,
        "ref": "main",
        "syntactic_id": "b27f72215c279749e1c76705cf00bf6f",
        "match_based_id": "b63e4f429cf1e1ec583179c073415fef8f2f5962f472dec6d360f25cba12a7a9b9f55a1ded242cfa05827ee23a9d89aafff68d871dd32580e783f6f6d1536c1a_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/quarantineServer.ts#L14",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.223930Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
        "rule_message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
        "location": {
            "file_path": "routes/quarantineServer.ts",
            "line": 14,
            "column": 20,
            "end_line": 14,
            "end_column": 57
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638925Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-res-sendfile.express-res-sendfile",
            "message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-73: External Control of File Name or Path"
            ],
            "owasp_names": [
                "A04:2021 - Insecure Design"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086696,
        "ref": "main",
        "syntactic_id": "a67e973889693387e0bf783aafdcb377",
        "match_based_id": "ed8c9c010a8fcf039af83ee959f95f90a19f060d498c289b67f6c1e89e86573ac8762f43b37e7c8f73ba0459470dd780cbfc28d74a1b74a5982160fac68c2503_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/profileImageUrlUpload.ts#L23",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.223915Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.audit.express-ssrf.express-ssrf",
        "rule_message": "The following request request.get() was found to be crafted from user-input `req` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. ",
        "location": {
            "file_path": "routes/profileImageUrlUpload.ts",
            "line": 23,
            "column": 16,
            "end_line": 23,
            "end_column": 19
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638911Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-ssrf.express-ssrf",
            "message": "The following request request.get() was found to be crafted from user-input `req` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. ",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Server-Side Request Forgery (SSRF)"
            ],
            "cwe_names": [
                "CWE-918: Server-Side Request Forgery (SSRF)"
            ],
            "owasp_names": [
                "A10:2021 - Server-Side Request Forgery (SSRF)"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "PII",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086694,
        "ref": "main",
        "syntactic_id": "863dd2c2fbdb5b98410cfac1499700fc",
        "match_based_id": "991294b6eb598a144349574d0ba9796c68c1a4db1a2c24e484b969a230ed900cb16f4627b84a4cfdcbe8f0c0a1637796d66aa27e934cb77c2a94348604f928ac_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/userProfile.ts#L56",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.223884Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.security.express-insecure-template-usage.express-insecure-template-usage",
        "rule_message": "User data from `req` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.",
        "location": {
            "file_path": "routes/userProfile.ts",
            "line": 56,
            "column": 22,
            "end_line": 56,
            "end_column": 43
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638897Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.express-insecure-template-usage.express-insecure-template-usage",
            "message": "User data from `req` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Code Injection"
            ],
            "cwe_names": [
                "CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine"
            ],
            "owasp_names": [
                "A03:2021 - Injection",
                "A01:2017 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "PII",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086693,
        "ref": "main",
        "syntactic_id": "b0e31b61c685afc4c9065acac2015995",
        "match_based_id": "f71b702bfdee01d7f7f0c77c645d1ba762a0a84c4afcdc9d31a98641c31e6e4e0cb046cdd9fb8e1867f8fec30ad6d1a8fdf971fcab3641a4b13b14c83a816e57_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/lib/insecurity.ts#L211",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.223868Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.express.session-fixation.session-fixation",
        "rule_message": "Detected `req` argument which enters `res.cookie`, this can lead to session fixation vulnerabilities if an attacker can control the cookie value. This vulnerability can lead to unauthorized access to accounts, and in some esoteric cases, Cross-Site-Scripting (XSS). Users should not be able to influence cookies directly, for session cookies, they should be generated securely using an approved session management library. If the cookie does need to be set by a user, consider using an allow-list based approach to restrict the cookies which can be set.",
        "location": {
            "file_path": "lib/insecurity.ts",
            "line": 211,
            "column": 31,
            "end_line": 211,
            "end_column": 36
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638884Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.session-fixation.session-fixation",
            "message": "Detected `req` argument which enters `res.cookie`, this can lead to session fixation vulnerabilities if an attacker can control the cookie value. This vulnerability can lead to unauthorized access to accounts, and in some esoteric cases, Cross-Site-Scripting (XSS). Users should not be able to influence cookies directly, for session cookies, they should be generated securely using an approved session management library. If the cookie does need to be set by a user, consider using an allow-list based approach to restrict the cookies which can be set.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Other"
            ],
            "cwe_names": [
                "CWE-384: Session Fixation"
            ],
            "owasp_names": [
                "A02:2017 - Broken Authentication",
                "A07:2021 - Identification and Authentication Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "cryptography",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086690,
        "ref": "main",
        "syntactic_id": "8a1dcdfb5f070e7c5a4e2011b1ab42cb",
        "match_based_id": "1ceeef3792e75b01e5edcd96b476f641542a4f4e31d9b8007d74d985afb4c0ccb0f905a36b864da4d8cd1e15475163e53689822843d37bf7be6f119c17919e63_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeSnippet.ts#L104",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223821Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
        "rule_message": "RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
        "location": {
            "file_path": "routes/vulnCodeSnippet.ts",
            "line": 104,
            "column": 21,
            "end_line": 104,
            "end_column": 76
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638870Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
            "message": "RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Denial-of-Service (DoS)"
            ],
            "cwe_names": [
                "CWE-1333: Inefficient Regular Expression Complexity"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086689,
        "ref": "main",
        "syntactic_id": "f1788229b12c0a501242f8f150f74357",
        "match_based_id": "cc696bfb60c26371d72888ec01b1653ea9fb0877e1c9f9c12aa8534e08d9b48ae3a368fdd6bad02884a883b17844dec7ca13ae3b6eb295e698d5739be449780c_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeSnippet.ts#L104",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223805Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
        "rule_message": "RegExp() called with a `req` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
        "location": {
            "file_path": "routes/vulnCodeSnippet.ts",
            "line": 104,
            "column": 21,
            "end_line": 104,
            "end_column": 76
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638856Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
            "message": "RegExp() called with a `req` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Denial-of-Service (DoS)"
            ],
            "cwe_names": [
                "CWE-1333: Inefficient Regular Expression Complexity"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086688,
        "ref": "main",
        "syntactic_id": "f122401dd5aebca4ee977e62287ed707",
        "match_based_id": "1ceeef3792e75b01e5edcd96b476f641542a4f4e31d9b8007d74d985afb4c0ccb0f905a36b864da4d8cd1e15475163e53689822843d37bf7be6f119c17919e63_1",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeSnippet.ts#L123",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223790Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
        "rule_message": "RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
        "location": {
            "file_path": "routes/vulnCodeSnippet.ts",
            "line": 123,
            "column": 17,
            "end_line": 123,
            "end_column": 76
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638842Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
            "message": "RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Denial-of-Service (DoS)"
            ],
            "cwe_names": [
                "CWE-1333: Inefficient Regular Expression Complexity"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086687,
        "ref": "main",
        "syntactic_id": "5f982033ef7d1bff3b34bba6695ffa6c",
        "match_based_id": "cc696bfb60c26371d72888ec01b1653ea9fb0877e1c9f9c12aa8534e08d9b48ae3a368fdd6bad02884a883b17844dec7ca13ae3b6eb295e698d5739be449780c_1",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeSnippet.ts#L123",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223774Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
        "rule_message": "RegExp() called with a `req` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
        "location": {
            "file_path": "routes/vulnCodeSnippet.ts",
            "line": 123,
            "column": 17,
            "end_line": 123,
            "end_column": 76
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638828Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
            "message": "RegExp() called with a `req` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Denial-of-Service (DoS)"
            ],
            "cwe_names": [
                "CWE-1333: Inefficient Regular Expression Complexity"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086686,
        "ref": "main",
        "syntactic_id": "d6700b74266184689822f98827657e93",
        "match_based_id": "1ceeef3792e75b01e5edcd96b476f641542a4f4e31d9b8007d74d985afb4c0ccb0f905a36b864da4d8cd1e15475163e53689822843d37bf7be6f119c17919e63_2",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeSnippet.ts#L125",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223758Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
        "rule_message": "RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
        "location": {
            "file_path": "routes/vulnCodeSnippet.ts",
            "line": 125,
            "column": 24,
            "end_line": 125,
            "end_column": 86
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638814Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
            "message": "RegExp() called with a `key` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Denial-of-Service (DoS)"
            ],
            "cwe_names": [
                "CWE-1333: Inefficient Regular Expression Complexity"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086685,
        "ref": "main",
        "syntactic_id": "2a5fc70eb255c41aac363cfe9403ff0e",
        "match_based_id": "cc696bfb60c26371d72888ec01b1653ea9fb0877e1c9f9c12aa8534e08d9b48ae3a368fdd6bad02884a883b17844dec7ca13ae3b6eb295e698d5739be449780c_2",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeSnippet.ts#L125",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223743Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
        "rule_message": "RegExp() called with a `req` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
        "location": {
            "file_path": "routes/vulnCodeSnippet.ts",
            "line": 125,
            "column": 24,
            "end_line": 125,
            "end_column": 86
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638801Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
            "message": "RegExp() called with a `req` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Denial-of-Service (DoS)"
            ],
            "cwe_names": [
                "CWE-1333: Inefficient Regular Expression Complexity"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086683,
        "ref": "main",
        "syntactic_id": "2293a59b15147f5e5d778922e6e6e04a",
        "match_based_id": "cc63a684cea621802562c3aabc866f05b37b9f8658bd0fe4c88e63588609de300bfaabd7191f7ee48bd8017671c3f8e0190de52fa986158dafb899463b79b3ae_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/data/datacreator.ts#L41",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223712Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "data/datacreator.ts",
            "line": 41,
            "column": 33,
            "end_line": 41,
            "end_column": 65
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638787Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086682,
        "ref": "main",
        "syntactic_id": "613211ce04a2724fb9cbe0afcebd357d",
        "match_based_id": "2c1ed46a95df027eb77813b1205bf0482eae6338d0b4921cc2584dd56e7ea6f48a513a398c46a0dcf5cac18a363e5dca9147878eea933fcb6ace30864c751009_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/lib/startup/restoreOverwrittenFilesWithOriginals.ts#L30",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223696Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "lib/startup/restoreOverwrittenFilesWithOriginals.ts",
            "line": 30,
            "column": 80,
            "end_line": 30,
            "end_column": 129
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638773Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086681,
        "ref": "main",
        "syntactic_id": "6f3491c566e8a4cd8ee6a5b796598d53",
        "match_based_id": "eece54dc5f65980d98c700ee02453e9a4b301c904bd3a0a8053aa8d91b0421a6f7f6773f8c05ae90b778d852ccff55d567da1a5816e61d1c33e6663699c299c0_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/lib/startup/validatePreconditions.ts#L95",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223680Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "lib/startup/validatePreconditions.ts",
            "line": 95,
            "column": 30,
            "end_line": 95,
            "end_column": 55
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638574Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086680,
        "ref": "main",
        "syntactic_id": "e769d84e86eea09395c0f80f1a7e1ddb",
        "match_based_id": "8f6f91eeb13bdb8118b87cf066031dd72e61e05bec64d88574f743d851fd60f45b2051285e3133cdf29e0dca864535851ec5870820b19b6015b20e807407f3a0_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/dataErasure.ts#L69",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223665Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "routes/dataErasure.ts",
            "line": 69,
            "column": 45,
            "end_line": 69,
            "end_column": 60
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638759Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "PII",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086678,
        "ref": "main",
        "syntactic_id": "da0d745b0b1f1341bf54b1615a259a15",
        "match_based_id": "c5cd5a4ff3f416f299e1ebcbee485bf38788735d21a163f5aec1fe6fe92c6a45c0f8b5d9971a1cbf31261c6ad8fb9586c1ad2603c9e1275c94f39f6a0d8ecdc7_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/fileUpload.ts#L29",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223633Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "routes/fileUpload.ts",
            "line": 29,
            "column": 47,
            "end_line": 29,
            "end_column": 55
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638745Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      const sanitizedFilename = path.basename(filename); // Sanitize the filename to prevent path traversal\n      const tempFile = path.join(os.tmpdir(), sanitizedFilename);",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..path-join-resolve-traversal', 'path': 'tmpn5x1c1io.ts', 'start': {'line': 29, 'col': 47, 'offset': 974}, 'end': {'line': 29, 'col': 55, 'offset': 982}, 'extra': {'metavars': {'$X': {'start': {'line': 24, 'col': 31, 'offset': 660}, 'end': {'line': 24, 'col': 48, 'offset': 677}, 'abstract_content': '{file file}Request'}, '$PATH': {'start': {'line': 29, 'col': 24, 'offset': 951}, 'end': {'line': 29, 'col': 28, 'offset': 955}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 29, 'col': 47, 'offset': 974}, 'end': {'line': 29, 'col': 55, 'offset': 982}, 'abstract_content': 'filename', 'propagated_value': {'svalue_start': {'line': 28, 'col': 24, 'offset': 896}, 'svalue_end': {'line': 28, 'col': 55, 'offset': 927}, 'svalue_abstract_content': 'file.originalname.toLowerCase()'}}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '95510a9475f95464309ab5c777b39427cf470d6027037424aa460161790662158bb1f304584f714605407b2bc79a92aa0c39e9575e40a0cb3d46516f4bdadf0a_0', 'lines': '      const tempFile = path.join(os.tmpdir(), filename)', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpn5x1c1io.ts', 'start': {'line': 24, 'col': 31, 'offset': 660}, 'end': {'line': 24, 'col': 48, 'offset': 677}}, '{ file }: Request']], 'intermediate_vars': [{'location': {'path': 'tmpn5x1c1io.ts', 'start': {'line': 24, 'col': 33, 'offset': 662}, 'end': {'line': 24, 'col': 37, 'offset': 666}}, 'content': 'file'}, {'location': {'path': 'tmpn5x1c1io.ts', 'start': {'line': 28, 'col': 13, 'offset': 885}, 'end': {'line': 28, 'col': 21, 'offset': 893}}, 'content': 'filename'}], 'taint_sink': ['CliLoc', [{'path': 'tmpn5x1c1io.ts', 'start': {'line': 29, 'col': 47, 'offset': 974}, 'end': {'line': 29, 'col': 55, 'offset': 982}}, 'filename']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpn5x1c1io.ts', 'start': {'line': 31, 'col': 47, 'offset': 1138}, 'end': {'line': 31, 'col': 64, 'offset': 1155}, 'extra': {'metavars': {'$X': {'start': {'line': 24, 'col': 31, 'offset': 660}, 'end': {'line': 24, 'col': 48, 'offset': 677}, 'abstract_content': '{file file}Request'}, '$PATH': {'start': {'line': 31, 'col': 24, 'offset': 1115}, 'end': {'line': 31, 'col': 28, 'offset': 1119}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 31, 'col': 47, 'offset': 1138}, 'end': {'line': 31, 'col': 64, 'offset': 1155}, 'abstract_content': 'sanitizedFilename', 'propagated_value': {'svalue_start': {'line': 30, 'col': 33, 'offset': 1016}, 'svalue_end': {'line': 30, 'col': 56, 'offset': 1039}, 'svalue_abstract_content': 'path.basename(filename)'}}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': 'ca866fbc41c3aef619671ed1b035378fc02300f5d296dcc70f9429c38f1b86e02a02a0b8e253ffd739329a1dba882f4a539251a9b84788830531378c6856b9ee_0', 'lines': '      const tempFile = path.join(os.tmpdir(), sanitizedFilename);', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpn5x1c1io.ts', 'start': {'line': 24, 'col': 31, 'offset': 660}, 'end': {'line': 24, 'col': 48, 'offset': 677}}, '{ file }: Request']], 'intermediate_vars': [{'location': {'path': 'tmpn5x1c1io.ts', 'start': {'line': 24, 'col': 33, 'offset': 662}, 'end': {'line': 24, 'col': 37, 'offset': 666}}, 'content': 'file'}, {'location': {'path': 'tmpn5x1c1io.ts', 'start': {'line': 28, 'col': 13, 'offset': 885}, 'end': {'line': 28, 'col': 21, 'offset': 893}}, 'content': 'filename'}, {'location': {'path': 'tmpn5x1c1io.ts', 'start': {'line': 30, 'col': 13, 'offset': 996}, 'end': {'line': 30, 'col': 30, 'offset': 1013}}, 'content': 'sanitizedFilename'}], 'taint_sink': ['CliLoc', [{'path': 'tmpn5x1c1io.ts', 'start': {'line': 31, 'col': 47, 'offset': 1138}, 'end': {'line': 31, 'col': 64, 'offset': 1155}}, 'sanitizedFilename']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpn5x1c1io.ts', 'start': {'line': 41, 'col': 51, 'offset': 1620}, 'end': {'line': 41, 'col': 83, 'offset': 1652}, 'extra': {'metavars': {'$X': {'start': {'line': 39, 'col': 38, 'offset': 1512}, 'end': {'line': 39, 'col': 43, 'offset': 1517}, 'abstract_content': 'entry'}, '$PATH': {'start': {'line': 41, 'col': 38, 'offset': 1607}, 'end': {'line': 41, 'col': 42, 'offset': 1611}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 41, 'col': 51, 'offset': 1620}, 'end': {'line': 41, 'col': 83, 'offset': 1652}, 'abstract_content': \"'uploads/complaints/'+fileName\"}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': 'ceb08d8da58277d10e0b93ce2893512fada5034b173e58930edb4297a25124265ba231aceb4686af84d4df6d255d0e9d812c6a3d885e6848b7a1a41533767e79_0', 'lines': \"                const absolutePath = path.resolve('uploads/complaints/' + fileName)\", 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpn5x1c1io.ts', 'start': {'line': 39, 'col': 38, 'offset': 1512}, 'end': {'line': 39, 'col': 43, 'offset': 1517}}, 'entry']], 'intermediate_vars': [{'location': {'path': 'tmpn5x1c1io.ts', 'start': {'line': 39, 'col': 38, 'offset': 1512}, 'end': {'line': 39, 'col': 43, 'offset': 1517}}, 'content': 'entry'}, {'location': {'path': 'tmpn5x1c1io.ts', 'start': {'line': 40, 'col': 23, 'offset': 1548}, 'end': {'line': 40, 'col': 31, 'offset': 1556}}, 'content': 'fileName'}], 'taint_sink': ['CliLoc', [{'path': 'tmpn5x1c1io.ts', 'start': {'line': 41, 'col': 51, 'offset': 1620}, 'end': {'line': 41, 'col': 83, 'offset': 1652}}, \"'uploads/complaints/' + fileName\"]]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmpn5x1c1io.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Validate the `filename` to prevent path traversal before using it in `path.join`.",
                "instructions": "1. Validate the `filename` to ensure it does not contain any path traversal characters such as `../`. You can use a regular expression to check for invalid patterns: `if (/(\\.\\.[\\/\\\\])/.test(filename)) { throw new Error('Invalid filename'); }`.\n\n2. Alternatively, if you want to allow only alphanumeric filenames with specific extensions, you can use a stricter regular expression: `if (!/^[a-zA-Z0-9_-]+\\.zip$/.test(filename)) { throw new Error('Invalid filename'); }`.\n\n3. After validating the `filename`, proceed with the existing logic to create the `tempFile` path: `const tempFile = path.join(os.tmpdir(), filename)`.\n\nBy validating the `filename`, you prevent potential path traversal attacks, ensuring that only safe and expected filenames are processed."
            },
            "component": null
        }
    },
    {
        "id": 72086677,
        "ref": "main",
        "syntactic_id": "1f38812837742e27160952c4aceef29a",
        "match_based_id": "02e960aad52bb6a6ac53d36883a93b820d27ba8c4ae6198a5d1fb6d7d7219a598e38daaf8d58979554318156073c83d0df83bc965a5feea3c9eadf70b3c93528_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/fileUpload.ts#L39",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223618Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "routes/fileUpload.ts",
            "line": 39,
            "column": 51,
            "end_line": 39,
            "end_column": 83
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638732Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": {
                "fix_code": "                const sanitizedFileName = path.basename(fileName); // Sanitize the file name to prevent path traversal\n                const absolutePath = path.resolve('uploads/complaints/', sanitizedFileName);",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..path-join-resolve-traversal', 'path': 'tmp8g2u9k2t.ts', 'start': {'line': 29, 'col': 47, 'offset': 974}, 'end': {'line': 29, 'col': 55, 'offset': 982}, 'extra': {'metavars': {'$X': {'start': {'line': 24, 'col': 31, 'offset': 660}, 'end': {'line': 24, 'col': 48, 'offset': 677}, 'abstract_content': '{file file}Request'}, '$PATH': {'start': {'line': 29, 'col': 24, 'offset': 951}, 'end': {'line': 29, 'col': 28, 'offset': 955}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 29, 'col': 47, 'offset': 974}, 'end': {'line': 29, 'col': 55, 'offset': 982}, 'abstract_content': 'filename', 'propagated_value': {'svalue_start': {'line': 28, 'col': 24, 'offset': 896}, 'svalue_end': {'line': 28, 'col': 55, 'offset': 927}, 'svalue_abstract_content': 'file.originalname.toLowerCase()'}}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '130eecc8ac25f79284a159c5d89a2b7a5abe5d489b83a7762d23564aba62e5b03bcc1ff50db4286d292b893b550ac4374aed8625a5761d1225764967e1ca9798_0', 'lines': '      const tempFile = path.join(os.tmpdir(), filename)', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmp8g2u9k2t.ts', 'start': {'line': 24, 'col': 31, 'offset': 660}, 'end': {'line': 24, 'col': 48, 'offset': 677}}, '{ file }: Request']], 'intermediate_vars': [{'location': {'path': 'tmp8g2u9k2t.ts', 'start': {'line': 24, 'col': 33, 'offset': 662}, 'end': {'line': 24, 'col': 37, 'offset': 666}}, 'content': 'file'}, {'location': {'path': 'tmp8g2u9k2t.ts', 'start': {'line': 28, 'col': 13, 'offset': 885}, 'end': {'line': 28, 'col': 21, 'offset': 893}}, 'content': 'filename'}], 'taint_sink': ['CliLoc', [{'path': 'tmp8g2u9k2t.ts', 'start': {'line': 29, 'col': 47, 'offset': 974}, 'end': {'line': 29, 'col': 55, 'offset': 982}}, 'filename']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmp8g2u9k2t.ts', 'start': {'line': 39, 'col': 51, 'offset': 1446}, 'end': {'line': 39, 'col': 83, 'offset': 1478}, 'extra': {'metavars': {'$X': {'start': {'line': 37, 'col': 38, 'offset': 1338}, 'end': {'line': 37, 'col': 43, 'offset': 1343}, 'abstract_content': 'entry'}, '$PATH': {'start': {'line': 39, 'col': 38, 'offset': 1433}, 'end': {'line': 39, 'col': 42, 'offset': 1437}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 39, 'col': 51, 'offset': 1446}, 'end': {'line': 39, 'col': 83, 'offset': 1478}, 'abstract_content': \"'uploads/complaints/'+fileName\"}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': 'e3d55240fb27eec4f72b89de6eb6d5224693798ad5fd067ef8d37d54feca830ca6e0a18e8f2fcb891bd53033f374c46b8131aa57a0b7c37f113849b645a38927_0', 'lines': \"                const absolutePath = path.resolve('uploads/complaints/' + fileName)\", 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmp8g2u9k2t.ts', 'start': {'line': 37, 'col': 38, 'offset': 1338}, 'end': {'line': 37, 'col': 43, 'offset': 1343}}, 'entry']], 'intermediate_vars': [{'location': {'path': 'tmp8g2u9k2t.ts', 'start': {'line': 37, 'col': 38, 'offset': 1338}, 'end': {'line': 37, 'col': 43, 'offset': 1343}}, 'content': 'entry'}, {'location': {'path': 'tmp8g2u9k2t.ts', 'start': {'line': 38, 'col': 23, 'offset': 1374}, 'end': {'line': 38, 'col': 31, 'offset': 1382}}, 'content': 'fileName'}], 'taint_sink': ['CliLoc', [{'path': 'tmp8g2u9k2t.ts', 'start': {'line': 39, 'col': 51, 'offset': 1446}, 'end': {'line': 39, 'col': 83, 'offset': 1478}}, \"'uploads/complaints/' + fileName\"]]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmp8g2u9k2t.ts', 'start': {'line': 41, 'col': 74, 'offset': 1672}, 'end': {'line': 41, 'col': 91, 'offset': 1689}, 'extra': {'metavars': {'$X': {'start': {'line': 37, 'col': 38, 'offset': 1338}, 'end': {'line': 37, 'col': 43, 'offset': 1343}, 'abstract_content': 'entry'}, '$PATH': {'start': {'line': 41, 'col': 38, 'offset': 1636}, 'end': {'line': 41, 'col': 42, 'offset': 1640}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 41, 'col': 74, 'offset': 1672}, 'end': {'line': 41, 'col': 91, 'offset': 1689}, 'abstract_content': 'sanitizedFileName', 'propagated_value': {'svalue_start': {'line': 40, 'col': 43, 'offset': 1522}, 'svalue_end': {'line': 40, 'col': 66, 'offset': 1545}, 'svalue_abstract_content': 'path.basename(fileName)'}}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '170e67d55e733d0dd18f077e2a029293b0cad534a0891e121d2c488c485e2ae9330b4e64bb537c3879ad643c1513e60ff39317d03c498f790d7658ba6c77a0b6_0', 'lines': \"                const absolutePath = path.resolve('uploads/complaints/', sanitizedFileName);\", 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmp8g2u9k2t.ts', 'start': {'line': 37, 'col': 38, 'offset': 1338}, 'end': {'line': 37, 'col': 43, 'offset': 1343}}, 'entry']], 'intermediate_vars': [{'location': {'path': 'tmp8g2u9k2t.ts', 'start': {'line': 37, 'col': 38, 'offset': 1338}, 'end': {'line': 37, 'col': 43, 'offset': 1343}}, 'content': 'entry'}, {'location': {'path': 'tmp8g2u9k2t.ts', 'start': {'line': 38, 'col': 23, 'offset': 1374}, 'end': {'line': 38, 'col': 31, 'offset': 1382}}, 'content': 'fileName'}, {'location': {'path': 'tmp8g2u9k2t.ts', 'start': {'line': 40, 'col': 23, 'offset': 1502}, 'end': {'line': 40, 'col': 40, 'offset': 1519}}, 'content': 'sanitizedFileName'}], 'taint_sink': ['CliLoc', [{'path': 'tmp8g2u9k2t.ts', 'start': {'line': 41, 'col': 74, 'offset': 1672}, 'end': {'line': 41, 'col': 91, 'offset': 1689}}, 'sanitizedFileName']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmp8g2u9k2t.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Validate and sanitize the `fileName` variable and use `path.join` to prevent path traversal vulnerabilities.",
                "instructions": "1. Validate the `fileName` variable to ensure it does not contain any path traversal characters such as `../`. You can use a regular expression or a library function to check for these characters.\n    For example, add a check like `if (fileName.includes('..')) { return next(new Error('Invalid file name')); }`.\n\n2. Use `path.join` instead of string concatenation to construct the `absolutePath`. This ensures that the path is constructed correctly and helps prevent path traversal.\n    Replace `const absolutePath = path.resolve('uploads/complaints/' + fileName)` with `const absolutePath = path.resolve(path.join('uploads/complaints', fileName))`.\n\n3. Ensure that the `absolutePath` is within the intended directory by checking if it starts with the resolved path of the target directory.\n    Add a check like `if (!absolutePath.startsWith(path.resolve('uploads/complaints'))) { return next(new Error('Path traversal detected')); }`.\n\nThese steps will help prevent path traversal vulnerabilities by validating and sanitizing the user input before using it in file path operations."
            },
            "component": null
        }
    },
    {
        "id": 72086676,
        "ref": "main",
        "syntactic_id": "b63415b797922b14d223c07669b46959",
        "match_based_id": "d6a1f2a7ec88f13dc1646a422a889ebd39f9157ee9c3f2cd3b062eb5f611538b0074038e1a55041852ece8757e09f64e2d482558da63bf62a590986b3aaa04f4_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/keyServer.ts#L14",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223603Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "routes/keyServer.ts",
            "line": 14,
            "column": 52,
            "end_line": 14,
            "end_column": 56
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638718Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      // Sanitize the file input to prevent path traversal\n      const sanitizedFile = path.basename(file);\n\n      // Use the sanitized file name in the path resolution\n      res.sendFile(path.resolve('encryptionkeys/', sanitizedFile))",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..path-join-resolve-traversal', 'path': 'tmp5_ciyuy_.ts', 'start': {'line': 14, 'col': 52, 'offset': 438}, 'end': {'line': 14, 'col': 56, 'offset': 442}, 'extra': {'metavars': {'$X': {'start': {'line': 10, 'col': 11, 'offset': 265}, 'end': {'line': 10, 'col': 30, 'offset': 284}, 'abstract_content': '{params params}Request'}, '$SINK': {'start': {'line': 14, 'col': 52, 'offset': 438}, 'end': {'line': 14, 'col': 56, 'offset': 442}, 'abstract_content': 'file', 'propagated_value': {'svalue_start': {'line': 11, 'col': 18, 'offset': 343}, 'svalue_end': {'line': 11, 'col': 29, 'offset': 354}, 'svalue_abstract_content': 'params.file'}}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': 'ee60d6bf8a5983b73650a18a6c259b59fd26cc6fcc11e1eaa479da653c8d38d27d7f54335960ff337787f2f09aa42caea4ce99e1ba853c4f3b74d465d53f1b05_0', 'lines': \"      res.sendFile(path.resolve('encryptionkeys/', file))\", 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmp5_ciyuy_.ts', 'start': {'line': 10, 'col': 11, 'offset': 265}, 'end': {'line': 10, 'col': 30, 'offset': 284}}, '{ params }: Request']], 'intermediate_vars': [{'location': {'path': 'tmp5_ciyuy_.ts', 'start': {'line': 10, 'col': 13, 'offset': 267}, 'end': {'line': 10, 'col': 19, 'offset': 273}}, 'content': 'params'}, {'location': {'path': 'tmp5_ciyuy_.ts', 'start': {'line': 11, 'col': 11, 'offset': 336}, 'end': {'line': 11, 'col': 15, 'offset': 340}}, 'content': 'file'}], 'taint_sink': ['CliLoc', [{'path': 'tmp5_ciyuy_.ts', 'start': {'line': 14, 'col': 52, 'offset': 438}, 'end': {'line': 14, 'col': 56, 'offset': 442}}, 'file']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmp5_ciyuy_.ts', 'start': {'line': 19, 'col': 52, 'offset': 665}, 'end': {'line': 19, 'col': 65, 'offset': 678}, 'extra': {'metavars': {'$X': {'start': {'line': 10, 'col': 11, 'offset': 265}, 'end': {'line': 10, 'col': 30, 'offset': 284}, 'abstract_content': '{params params}Request'}, '$SINK': {'start': {'line': 19, 'col': 52, 'offset': 665}, 'end': {'line': 19, 'col': 65, 'offset': 678}, 'abstract_content': 'sanitizedFile', 'propagated_value': {'svalue_start': {'line': 16, 'col': 29, 'offset': 532}, 'svalue_end': {'line': 16, 'col': 48, 'offset': 551}, 'svalue_abstract_content': 'path.basename(file)'}}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '569987f719c4f5f7c4e2812431ee0f09a9a9cd509649345d5c0577519e963b468d20eea99fd9368a83538a620961b2c85f00c840856494fd3c844f90b211e595_0', 'lines': \"      res.sendFile(path.resolve('encryptionkeys/', sanitizedFile))\", 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmp5_ciyuy_.ts', 'start': {'line': 10, 'col': 11, 'offset': 265}, 'end': {'line': 10, 'col': 30, 'offset': 284}}, '{ params }: Request']], 'intermediate_vars': [{'location': {'path': 'tmp5_ciyuy_.ts', 'start': {'line': 10, 'col': 13, 'offset': 267}, 'end': {'line': 10, 'col': 19, 'offset': 273}}, 'content': 'params'}, {'location': {'path': 'tmp5_ciyuy_.ts', 'start': {'line': 11, 'col': 11, 'offset': 336}, 'end': {'line': 11, 'col': 15, 'offset': 340}}, 'content': 'file'}, {'location': {'path': 'tmp5_ciyuy_.ts', 'start': {'line': 16, 'col': 13, 'offset': 516}, 'end': {'line': 16, 'col': 26, 'offset': 529}}, 'content': 'sanitizedFile'}], 'taint_sink': ['CliLoc', [{'path': 'tmp5_ciyuy_.ts', 'start': {'line': 19, 'col': 52, 'offset': 665}, 'end': {'line': 19, 'col': 65, 'offset': 678}}, 'sanitizedFile']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmp5_ciyuy_.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Sanitize the `file` parameter using the `sanitize-filename` package before using it in `path.resolve`.",
                "instructions": "1. Import the `sanitizeFilename` function from the `sanitize-filename` package at the top of your file: `const sanitizeFilename = require('sanitize-filename');`.\n2. Before using the `file` parameter, sanitize it by adding `const sanitizedFile = sanitizeFilename(file);`.\n3. Replace the usage of `file` in the `res.sendFile` method with `sanitizedFile`: `res.sendFile(path.resolve('encryptionkeys/', sanitizedFile));`.\n\nThis will ensure that the `file` parameter is free from any potentially harmful characters that could lead to path traversal vulnerabilities."
            },
            "component": {
                "tag": "cryptography",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086675,
        "ref": "main",
        "syntactic_id": "49dec167ec35f51e9e9a384151447a67",
        "match_based_id": "3bba6cfdecb0035223a10864e147292351806a048d94984f5f54cd5bf5411ee61e13cb17274bcff7a63b09c91c0985047a40f13e213952b1a9dd4473f0acfaa9_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/logfileServer.ts#L14",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223587Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "routes/logfileServer.ts",
            "line": 14,
            "column": 42,
            "end_line": 14,
            "end_column": 46
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638704Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      // Sanitize the file input to prevent path traversal attacks\n      const sanitizedFile = path.basename(file);\n      res.sendFile(path.resolve('logs/', sanitizedFile))",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..path-join-resolve-traversal', 'path': 'tmpj0e6cb_u.ts', 'start': {'line': 14, 'col': 42, 'offset': 428}, 'end': {'line': 14, 'col': 46, 'offset': 432}, 'extra': {'metavars': {'$X': {'start': {'line': 10, 'col': 11, 'offset': 265}, 'end': {'line': 10, 'col': 30, 'offset': 284}, 'abstract_content': '{params params}Request'}, '$SINK': {'start': {'line': 14, 'col': 42, 'offset': 428}, 'end': {'line': 14, 'col': 46, 'offset': 432}, 'abstract_content': 'file', 'propagated_value': {'svalue_start': {'line': 11, 'col': 18, 'offset': 343}, 'svalue_end': {'line': 11, 'col': 29, 'offset': 354}, 'svalue_abstract_content': 'params.file'}}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': 'e3023ef91b1699fa95ef18a49e8d498ebc333c6fe16b17d842045a6a4cf56aaac25cfb6d97623f9bead75418e8e2e23a6d5242ee8225cdd1b2177d60d90d3cbe_0', 'lines': \"      res.sendFile(path.resolve('logs/', file))\", 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpj0e6cb_u.ts', 'start': {'line': 10, 'col': 11, 'offset': 265}, 'end': {'line': 10, 'col': 30, 'offset': 284}}, '{ params }: Request']], 'intermediate_vars': [{'location': {'path': 'tmpj0e6cb_u.ts', 'start': {'line': 10, 'col': 13, 'offset': 267}, 'end': {'line': 10, 'col': 19, 'offset': 273}}, 'content': 'params'}, {'location': {'path': 'tmpj0e6cb_u.ts', 'start': {'line': 11, 'col': 11, 'offset': 336}, 'end': {'line': 11, 'col': 15, 'offset': 340}}, 'content': 'file'}], 'taint_sink': ['CliLoc', [{'path': 'tmpj0e6cb_u.ts', 'start': {'line': 14, 'col': 42, 'offset': 428}, 'end': {'line': 14, 'col': 46, 'offset': 432}}, 'file']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpj0e6cb_u.ts', 'start': {'line': 17, 'col': 42, 'offset': 592}, 'end': {'line': 17, 'col': 55, 'offset': 605}, 'extra': {'metavars': {'$X': {'start': {'line': 10, 'col': 11, 'offset': 265}, 'end': {'line': 10, 'col': 30, 'offset': 284}, 'abstract_content': '{params params}Request'}, '$SINK': {'start': {'line': 17, 'col': 42, 'offset': 592}, 'end': {'line': 17, 'col': 55, 'offset': 605}, 'abstract_content': 'sanitizedFile', 'propagated_value': {'svalue_start': {'line': 16, 'col': 29, 'offset': 530}, 'svalue_end': {'line': 16, 'col': 48, 'offset': 549}, 'svalue_abstract_content': 'path.basename(file)'}}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '18f5dab042fbb6b4c828bdb3f78913d871bfac9d840002fb82463f2add22ac10596be41df4dd7029b7d2c12c2a02f3ad6f1b627813b9b80a3a2f5a2f47c2d731_0', 'lines': \"      res.sendFile(path.resolve('logs/', sanitizedFile))\", 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpj0e6cb_u.ts', 'start': {'line': 10, 'col': 11, 'offset': 265}, 'end': {'line': 10, 'col': 30, 'offset': 284}}, '{ params }: Request']], 'intermediate_vars': [{'location': {'path': 'tmpj0e6cb_u.ts', 'start': {'line': 10, 'col': 13, 'offset': 267}, 'end': {'line': 10, 'col': 19, 'offset': 273}}, 'content': 'params'}, {'location': {'path': 'tmpj0e6cb_u.ts', 'start': {'line': 11, 'col': 11, 'offset': 336}, 'end': {'line': 11, 'col': 15, 'offset': 340}}, 'content': 'file'}, {'location': {'path': 'tmpj0e6cb_u.ts', 'start': {'line': 16, 'col': 13, 'offset': 514}, 'end': {'line': 16, 'col': 26, 'offset': 527}}, 'content': 'sanitizedFile'}], 'taint_sink': ['CliLoc', [{'path': 'tmpj0e6cb_u.ts', 'start': {'line': 17, 'col': 42, 'offset': 592}, 'end': {'line': 17, 'col': 55, 'offset': 605}}, 'sanitizedFile']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmpj0e6cb_u.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Validate the `file` parameter to prevent path traversal by allowing only safe characters.",
                "instructions": "1. Validate the `file` parameter to ensure it does not contain any path traversal characters such as `..`. You can use a regular expression to allow only safe characters, such as alphanumeric characters, dashes, and underscores. For example: `if (!/^[a-zA-Z0-9_-]+$/.test(file)) { ... }`.\n2. If the `file` parameter is valid, proceed with sending the file using `res.sendFile(path.resolve('logs/', file))`.\n3. If the `file` parameter is invalid, return a 403 status and an error message. You can reuse the existing error handling logic: `res.status(403); next(new Error('Invalid file name!'));`.\n\nThis approach ensures that only safe file names are processed, preventing path traversal vulnerabilities."
            },
            "component": {
                "tag": "observability",
                "risk": "low"
            }
        }
    },
    {
        "id": 72086674,
        "ref": "main",
        "syntactic_id": "1a5d93ed5df8565bd847142fb1fd1b6f",
        "match_based_id": "1fc353b4547904b691d2b711a5bc2312c013f79c9ee1b797db9e9f027f0ebd62a8f0ef476a112235ffeeb21966c5fec55b300554ebca2faf27e7a7d70c8fb592_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/order.ts#L46",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223571Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "routes/order.ts",
            "line": 46,
            "column": 78,
            "end_line": 46,
            "end_column": 85
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638690Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": {
                "fix_code": "          const path = require('path'); // Ensure path module is required\n          const sanitizeFilename = require('sanitize-filename'); // Use a library to sanitize filenames\n\n          // Sanitize the pdfFile to prevent path traversal\n          const sanitizedPdfFile = sanitizeFilename(pdfFile);\n\n          // Use the sanitized filename in path.join\n          const fileWriter = doc.pipe(fs.createWriteStream(path.join('ftp/', sanitizedPdfFile)));",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..path-join-resolve-traversal', 'path': 'tmp0q41qe6l.ts', 'start': {'line': 46, 'col': 78, 'offset': 1800}, 'end': {'line': 46, 'col': 85, 'offset': 1807}, 'extra': {'metavars': {'$X': {'start': {'line': 35, 'col': 11, 'offset': 1070}, 'end': {'line': 35, 'col': 14, 'offset': 1073}, 'abstract_content': 'req'}, '$SINK': {'start': {'line': 46, 'col': 78, 'offset': 1800}, 'end': {'line': 46, 'col': 85, 'offset': 1807}, 'abstract_content': 'pdfFile', 'propagated_value': {'svalue_start': {'line': 43, 'col': 27, 'offset': 1604}, 'svalue_end': {'line': 43, 'col': 48, 'offset': 1625}, 'svalue_abstract_content': '`order_ orderId.pdf'}}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '81515fc782420c4f8f54b07520a8897520ebdc4531b83a6cbb1abc8cc95de488365c3e69d344f2715ab0e027ed2edc905524e21b81fae8c4650ab9009d5eea33_0', 'lines': \"          const fileWriter = doc.pipe(fs.createWriteStream(path.join('ftp/', pdfFile)))\", 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmp0q41qe6l.ts', 'start': {'line': 35, 'col': 11, 'offset': 1070}, 'end': {'line': 35, 'col': 14, 'offset': 1073}}, 'req']], 'intermediate_vars': [{'location': {'path': 'tmp0q41qe6l.ts', 'start': {'line': 35, 'col': 11, 'offset': 1070}, 'end': {'line': 35, 'col': 14, 'offset': 1073}}, 'content': 'req'}, {'location': {'path': 'tmp0q41qe6l.ts', 'start': {'line': 40, 'col': 17, 'offset': 1355}, 'end': {'line': 40, 'col': 25, 'offset': 1363}}, 'content': 'customer'}, {'location': {'path': 'tmp0q41qe6l.ts', 'start': {'line': 41, 'col': 17, 'offset': 1420}, 'end': {'line': 41, 'col': 22, 'offset': 1425}}, 'content': 'email'}, {'location': {'path': 'tmp0q41qe6l.ts', 'start': {'line': 42, 'col': 17, 'offset': 1501}, 'end': {'line': 42, 'col': 24, 'offset': 1508}}, 'content': 'orderId'}, {'location': {'path': 'tmp0q41qe6l.ts', 'start': {'line': 43, 'col': 17, 'offset': 1594}, 'end': {'line': 43, 'col': 24, 'offset': 1601}}, 'content': 'pdfFile'}], 'taint_sink': ['CliLoc', [{'path': 'tmp0q41qe6l.ts', 'start': {'line': 46, 'col': 78, 'offset': 1800}, 'end': {'line': 46, 'col': 85, 'offset': 1807}}, 'pdfFile']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmp0q41qe6l.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Sanitize the `pdfFile` variable using `sanitize-filename` before using it in `path.join`.",
                "instructions": "1. Import the `sanitize-filename` module at the top of your file with `const sanitize = require('sanitize-filename');`.\n2. Sanitize the `pdfFile` variable before using it in `path.join` by adding `const sanitizedPdfFile = sanitize(pdfFile);`.\n3. Replace the `pdfFile` variable in the `path.join` function with `sanitizedPdfFile`: `path.join('ftp/', sanitizedPdfFile)`. \n\nThis will ensure that the filename is safe to use and does not contain any path traversal characters."
            },
            "component": null
        }
    },
    {
        "id": 72086673,
        "ref": "main",
        "syntactic_id": "067c1c2abfc9de4b919f8a3641ebac04",
        "match_based_id": "e198c7dc4b73c836c60be1491e90c1d58e78cc87af53fb9247499cdcbd5e2d9316e886ac2d496a8b7db8586f269a3a108af4638edf0e5ba6eac718636dad8de0_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/quarantineServer.ts#L14",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223555Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "routes/quarantineServer.ts",
            "line": 14,
            "column": 52,
            "end_line": 14,
            "end_column": 56
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638676Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      // Sanitize the file name to prevent path traversal attacks\n      const sanitizedFile = path.basename(file);\n      res.sendFile(path.resolve('ftp/quarantine/', sanitizedFile))",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..path-join-resolve-traversal', 'path': 'tmpb6ibvdxp.ts', 'start': {'line': 14, 'col': 52, 'offset': 452}, 'end': {'line': 14, 'col': 56, 'offset': 456}, 'extra': {'metavars': {'$X': {'start': {'line': 10, 'col': 11, 'offset': 272}, 'end': {'line': 10, 'col': 37, 'offset': 298}, 'abstract_content': '{params params query query}Request'}, '$SINK': {'start': {'line': 14, 'col': 52, 'offset': 452}, 'end': {'line': 14, 'col': 56, 'offset': 456}, 'abstract_content': 'file', 'propagated_value': {'svalue_start': {'line': 11, 'col': 18, 'offset': 357}, 'svalue_end': {'line': 11, 'col': 29, 'offset': 368}, 'svalue_abstract_content': 'params.file'}}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': 'b267eba0187c71b4aa741b629da73c0515f9cdea8354d7cacd60f0e3b3dc9e90a668d87d8ec40fe0a92980b7a9a4ba65f7a697efed0c9ca674310a701550f4fd_0', 'lines': \"      res.sendFile(path.resolve('ftp/quarantine/', file))\", 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpb6ibvdxp.ts', 'start': {'line': 10, 'col': 11, 'offset': 272}, 'end': {'line': 10, 'col': 37, 'offset': 298}}, '{ params, query }: Request']], 'intermediate_vars': [{'location': {'path': 'tmpb6ibvdxp.ts', 'start': {'line': 10, 'col': 13, 'offset': 274}, 'end': {'line': 10, 'col': 19, 'offset': 280}}, 'content': 'params'}, {'location': {'path': 'tmpb6ibvdxp.ts', 'start': {'line': 11, 'col': 11, 'offset': 350}, 'end': {'line': 11, 'col': 15, 'offset': 354}}, 'content': 'file'}], 'taint_sink': ['CliLoc', [{'path': 'tmpb6ibvdxp.ts', 'start': {'line': 14, 'col': 52, 'offset': 452}, 'end': {'line': 14, 'col': 56, 'offset': 456}}, 'file']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpb6ibvdxp.ts', 'start': {'line': 17, 'col': 52, 'offset': 625}, 'end': {'line': 17, 'col': 65, 'offset': 638}, 'extra': {'metavars': {'$X': {'start': {'line': 10, 'col': 11, 'offset': 272}, 'end': {'line': 10, 'col': 37, 'offset': 298}, 'abstract_content': '{params params query query}Request'}, '$SINK': {'start': {'line': 17, 'col': 52, 'offset': 625}, 'end': {'line': 17, 'col': 65, 'offset': 638}, 'abstract_content': 'sanitizedFile', 'propagated_value': {'svalue_start': {'line': 16, 'col': 29, 'offset': 553}, 'svalue_end': {'line': 16, 'col': 48, 'offset': 572}, 'svalue_abstract_content': 'path.basename(file)'}}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '206fc554c44ac8895e30056c6528f69457dc4b32059d523645584f8963949ca1578a13ba252739f2e87170e9031b93d1794b60f5a56bc390957b6a6095193993_0', 'lines': \"      res.sendFile(path.resolve('ftp/quarantine/', sanitizedFile))\", 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpb6ibvdxp.ts', 'start': {'line': 10, 'col': 11, 'offset': 272}, 'end': {'line': 10, 'col': 37, 'offset': 298}}, '{ params, query }: Request']], 'intermediate_vars': [{'location': {'path': 'tmpb6ibvdxp.ts', 'start': {'line': 10, 'col': 13, 'offset': 274}, 'end': {'line': 10, 'col': 19, 'offset': 280}}, 'content': 'params'}, {'location': {'path': 'tmpb6ibvdxp.ts', 'start': {'line': 11, 'col': 11, 'offset': 350}, 'end': {'line': 11, 'col': 15, 'offset': 354}}, 'content': 'file'}, {'location': {'path': 'tmpb6ibvdxp.ts', 'start': {'line': 16, 'col': 13, 'offset': 537}, 'end': {'line': 16, 'col': 26, 'offset': 550}}, 'content': 'sanitizedFile'}], 'taint_sink': ['CliLoc', [{'path': 'tmpb6ibvdxp.ts', 'start': {'line': 17, 'col': 52, 'offset': 625}, 'end': {'line': 17, 'col': 65, 'offset': 638}}, 'sanitizedFile']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmpb6ibvdxp.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Validate the `file` parameter to prevent path traversal before using it with `res.sendFile`.",
                "instructions": "1. Validate the `file` parameter to ensure it does not contain any path traversal characters such as `..` or `/`. You can use a regular expression for this purpose. For example, add a check like `if (!/^[a-zA-Z0-9._-]+$/.test(file)) { ... }` to ensure only safe characters are allowed.\n2. If the `file` parameter passes validation, proceed with sending the file using `res.sendFile`.\n3. If the `file` parameter does not pass validation, return an error response. You can modify the existing error handling code to cover this case: `res.status(400).send('Invalid file name!');`.\n\nThis approach ensures that only valid file names are processed, preventing path traversal vulnerabilities."
            },
            "component": null
        }
    },
    {
        "id": 72086672,
        "ref": "main",
        "syntactic_id": "11f71cf770bf4331565dbf91292211fe",
        "match_based_id": "24af86d8c929337d1a4e36a8c3e44953ef00a6e7cbc149a346715a7d762f834c4d02a42a10d30b7d89667e00fd20c291bf9ae604c24835bcd1a6235cb4322b34_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeSnippet.ts#L33",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223539Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "routes/vulnCodeSnippet.ts",
            "line": 33,
            "column": 74,
            "end_line": 33,
            "end_column": 82
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638662Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      const moreMatches = await fileSniff(files.map(file => {\n        // Sanitize the file name to prevent path traversal\n        const sanitizedFile = path.basename(file);\n        return path.resolve(currPath, sanitizedFile);\n      }), match)",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..path-join-resolve-traversal', 'path': 'tmpe2gktbgs.ts', 'start': {'line': 33, 'col': 74, 'offset': 1026}, 'end': {'line': 33, 'col': 82, 'offset': 1034}, 'extra': {'metavars': {'$X': {'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}, 'abstract_content': 'paths'}, '$PATH': {'start': {'line': 33, 'col': 61, 'offset': 1013}, 'end': {'line': 33, 'col': 65, 'offset': 1017}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 33, 'col': 74, 'offset': 1026}, 'end': {'line': 33, 'col': 82, 'offset': 1034}, 'abstract_content': 'currPath'}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '290a9d9bfd4336137b407717a8ab4afca81e23226514a9045d8075b47055b2557d8b87110342fb91c5059f6ae276f558d41999055a39ec9b83aba7d3675bd3cf_0', 'lines': '      const moreMatches = await fileSniff(files.map(file => path.resolve(currPath, file)), match)', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpe2gktbgs.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'paths']], 'intermediate_vars': [{'location': {'path': 'tmpe2gktbgs.ts', 'start': {'line': 30, 'col': 14, 'offset': 839}, 'end': {'line': 30, 'col': 22, 'offset': 847}}, 'content': 'currPath'}, {'location': {'path': 'tmpe2gktbgs.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'content': 'paths'}], 'taint_sink': ['CliLoc', [{'path': 'tmpe2gktbgs.ts', 'start': {'line': 33, 'col': 74, 'offset': 1026}, 'end': {'line': 33, 'col': 82, 'offset': 1034}}, 'currPath']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpe2gktbgs.ts', 'start': {'line': 33, 'col': 84, 'offset': 1036}, 'end': {'line': 33, 'col': 88, 'offset': 1040}, 'extra': {'metavars': {'$X': {'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}, 'abstract_content': 'paths'}, '$PATH': {'start': {'line': 33, 'col': 61, 'offset': 1013}, 'end': {'line': 33, 'col': 65, 'offset': 1017}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 33, 'col': 84, 'offset': 1036}, 'end': {'line': 33, 'col': 88, 'offset': 1040}, 'abstract_content': 'file'}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '7d3e7c97bca5d1bbacad8415fc4cd0e5bc862e4305772b29944d28a792bb3e41656d52067d890d4b638f1a0e483bcf30bc4226ba4077f7f0440668a2cf7934c6_0', 'lines': '      const moreMatches = await fileSniff(files.map(file => path.resolve(currPath, file)), match)', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpe2gktbgs.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'paths']], 'intermediate_vars': [{'location': {'path': 'tmpe2gktbgs.ts', 'start': {'line': 33, 'col': 53, 'offset': 1005}, 'end': {'line': 33, 'col': 57, 'offset': 1009}}, 'content': 'file'}, {'location': {'path': 'tmpe2gktbgs.ts', 'start': {'line': 32, 'col': 13, 'offset': 920}, 'end': {'line': 32, 'col': 18, 'offset': 925}}, 'content': 'files'}, {'location': {'path': 'tmpe2gktbgs.ts', 'start': {'line': 30, 'col': 14, 'offset': 839}, 'end': {'line': 30, 'col': 22, 'offset': 847}}, 'content': 'currPath'}, {'location': {'path': 'tmpe2gktbgs.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'content': 'paths'}], 'taint_sink': ['CliLoc', [{'path': 'tmpe2gktbgs.ts', 'start': {'line': 33, 'col': 84, 'offset': 1036}, 'end': {'line': 33, 'col': 88, 'offset': 1040}}, 'file']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpe2gktbgs.ts', 'start': {'line': 37, 'col': 29, 'offset': 1252}, 'end': {'line': 37, 'col': 37, 'offset': 1260}, 'extra': {'metavars': {'$X': {'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}, 'abstract_content': 'paths'}, '$PATH': {'start': {'line': 33, 'col': 61, 'offset': 1013}, 'end': {'line': 33, 'col': 65, 'offset': 1017}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 37, 'col': 29, 'offset': 1252}, 'end': {'line': 37, 'col': 37, 'offset': 1260}, 'abstract_content': 'currPath'}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '290a9d9bfd4336137b407717a8ab4afca81e23226514a9045d8075b47055b2557d8b87110342fb91c5059f6ae276f558d41999055a39ec9b83aba7d3675bd3cf_1', 'lines': '        return path.resolve(currPath, sanitizedFile);', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpe2gktbgs.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'paths']], 'intermediate_vars': [{'location': {'path': 'tmpe2gktbgs.ts', 'start': {'line': 30, 'col': 14, 'offset': 839}, 'end': {'line': 30, 'col': 22, 'offset': 847}}, 'content': 'currPath'}, {'location': {'path': 'tmpe2gktbgs.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'content': 'paths'}], 'taint_sink': ['CliLoc', [{'path': 'tmpe2gktbgs.ts', 'start': {'line': 37, 'col': 29, 'offset': 1252}, 'end': {'line': 37, 'col': 37, 'offset': 1260}}, 'currPath']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpe2gktbgs.ts', 'start': {'line': 37, 'col': 39, 'offset': 1262}, 'end': {'line': 37, 'col': 52, 'offset': 1275}, 'extra': {'metavars': {'$X': {'start': {'line': 34, 'col': 53, 'offset': 1103}, 'end': {'line': 34, 'col': 57, 'offset': 1107}, 'abstract_content': 'file'}, '$PATH': {'start': {'line': 37, 'col': 16, 'offset': 1239}, 'end': {'line': 37, 'col': 20, 'offset': 1243}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 37, 'col': 39, 'offset': 1262}, 'end': {'line': 37, 'col': 52, 'offset': 1275}, 'abstract_content': 'sanitizedFile', 'propagated_value': {'svalue_start': {'line': 36, 'col': 31, 'offset': 1203}, 'svalue_end': {'line': 36, 'col': 50, 'offset': 1222}, 'svalue_abstract_content': 'path.basename(file)'}}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '3cc6f203f2c7c30e237e0ba3c8126844b7a97b189e2faf7b6576e5c0f551a0cba830413283cca662c3f4f63f5dae53fda998f8d36d7caefa1aa5a56649870f65_0', 'lines': '        return path.resolve(currPath, sanitizedFile);', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpe2gktbgs.ts', 'start': {'line': 34, 'col': 53, 'offset': 1103}, 'end': {'line': 34, 'col': 57, 'offset': 1107}}, 'file']], 'intermediate_vars': [{'location': {'path': 'tmpe2gktbgs.ts', 'start': {'line': 34, 'col': 53, 'offset': 1103}, 'end': {'line': 34, 'col': 57, 'offset': 1107}}, 'content': 'file'}, {'location': {'path': 'tmpe2gktbgs.ts', 'start': {'line': 36, 'col': 15, 'offset': 1187}, 'end': {'line': 36, 'col': 28, 'offset': 1200}}, 'content': 'sanitizedFile'}], 'taint_sink': ['CliLoc', [{'path': 'tmpe2gktbgs.ts', 'start': {'line': 37, 'col': 39, 'offset': 1262}, 'end': {'line': 37, 'col': 52, 'offset': 1275}}, 'sanitizedFile']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpe2gktbgs.ts', 'start': {'line': 112, 'col': 53, 'offset': 2985}, 'end': {'line': 112, 'col': 68, 'offset': 3000}, 'extra': {'metavars': {'$X': {'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}, 'abstract_content': 'paths'}, '$PATH': {'start': {'line': 112, 'col': 40, 'offset': 2972}, 'end': {'line': 112, 'col': 44, 'offset': 2976}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 112, 'col': 53, 'offset': 2985}, 'end': {'line': 112, 'col': 68, 'offset': 3000}, 'abstract_content': 'matches[0].path'}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '0bc70e8c5177718928d51dbe5fb5567650f1b2e09aa5bf9b2057b8f55055ba8e34fafae88d13b6aa72d1a60129ab020eab39d54077a68894cc891c781f0571f0_0', 'lines': \"        const source = fs.readFileSync(path.resolve(matches[0].path), 'utf8')\", 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliCall', [[{'path': 'tmpe2gktbgs.ts', 'start': {'line': 110, 'col': 29, 'offset': 2820}, 'end': {'line': 110, 'col': 38, 'offset': 2829}}, 'fileSniff'], [{'location': {'path': 'tmpe2gktbgs.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'content': 'paths'}, {'location': {'path': 'tmpe2gktbgs.ts', 'start': {'line': 30, 'col': 14, 'offset': 839}, 'end': {'line': 30, 'col': 22, 'offset': 847}}, 'content': 'currPath'}], ['CliLoc', [{'path': 'tmpe2gktbgs.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'paths']]]], 'intermediate_vars': [{'location': {'path': 'tmpe2gktbgs.ts', 'start': {'line': 110, 'col': 13, 'offset': 2804}, 'end': {'line': 110, 'col': 20, 'offset': 2811}}, 'content': 'matches'}], 'taint_sink': ['CliLoc', [{'path': 'tmpe2gktbgs.ts', 'start': {'line': 112, 'col': 53, 'offset': 2985}, 'end': {'line': 112, 'col': 68, 'offset': 3000}}, 'matches[0].path']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmpe2gktbgs.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Validate file names to prevent path traversal before using them with `path.resolve`.",
                "instructions": "1. Validate the `file` variable before using it in `path.resolve`. You can use a regular expression to ensure it does not contain any path traversal characters like `..` or `/`.\n\n2. Add a validation function before the `fileSniff` function:\n    ```javascript\n    const isValidFileName = (fileName) => {\n      const invalidPattern = /(\\.\\.\\/|\\/)/;\n      return !invalidPattern.test(fileName);\n    };\n    ```\n\n3. Use the validation function in the `fileSniff` function to filter out invalid file names:\n    ```javascript\n    const validFiles = files.filter(isValidFileName);\n    const moreMatches = await fileSniff(validFiles.map(file => path.resolve(currPath, file)), match);\n    ```\n\nThis ensures that only valid file names are processed, preventing potential path traversal vulnerabilities."
            },
            "component": null
        }
    },
    {
        "id": 72086671,
        "ref": "main",
        "syntactic_id": "b4863723b083b6324ecbabf41dd2acee",
        "match_based_id": "8cca17c7445150adb2f09e5fffb143a76db05374b9197e2fa60bba424b946c81fb2dc308a31eb52107e84f736b5707038afe7e8c394bc34fffb0e7754c0cbb87_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeSnippet.ts#L33",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223523Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "routes/vulnCodeSnippet.ts",
            "line": 33,
            "column": 84,
            "end_line": 33,
            "end_column": 88
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638648Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      const moreMatches = await fileSniff(files.map(file => {\n        const resolvedPath = path.resolve(currPath, file);\n        // Ensure the resolved path is within the allowed directories to prevent path traversal\n        if (!SNIPPET_PATHS.some(allowedPath => resolvedPath.startsWith(path.resolve(allowedPath)))) {\n          throw new BrokenBoundary(`Path traversal attempt detected: ${resolvedPath}`);\n        }\n        return resolvedPath;\n      }), match);",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..path-join-resolve-traversal', 'path': 'tmpt7mwtcfo.ts', 'start': {'line': 33, 'col': 74, 'offset': 1026}, 'end': {'line': 33, 'col': 82, 'offset': 1034}, 'extra': {'metavars': {'$X': {'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}, 'abstract_content': 'paths'}, '$PATH': {'start': {'line': 33, 'col': 61, 'offset': 1013}, 'end': {'line': 33, 'col': 65, 'offset': 1017}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 33, 'col': 74, 'offset': 1026}, 'end': {'line': 33, 'col': 82, 'offset': 1034}, 'abstract_content': 'currPath'}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': 'a1fb76089ef36f576d95e86bc1ae6775ab13c575dff0cb8c1d5e4d59cad51c1cdfcc5070c12ddb74e6f791a4602faebfdcb765f79cf25e607e08c7432e01b43f_0', 'lines': '      const moreMatches = await fileSniff(files.map(file => path.resolve(currPath, file)), match)', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpt7mwtcfo.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'paths']], 'intermediate_vars': [{'location': {'path': 'tmpt7mwtcfo.ts', 'start': {'line': 30, 'col': 14, 'offset': 839}, 'end': {'line': 30, 'col': 22, 'offset': 847}}, 'content': 'currPath'}, {'location': {'path': 'tmpt7mwtcfo.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'content': 'paths'}], 'taint_sink': ['CliLoc', [{'path': 'tmpt7mwtcfo.ts', 'start': {'line': 33, 'col': 74, 'offset': 1026}, 'end': {'line': 33, 'col': 82, 'offset': 1034}}, 'currPath']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpt7mwtcfo.ts', 'start': {'line': 33, 'col': 84, 'offset': 1036}, 'end': {'line': 33, 'col': 88, 'offset': 1040}, 'extra': {'metavars': {'$X': {'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}, 'abstract_content': 'paths'}, '$PATH': {'start': {'line': 33, 'col': 61, 'offset': 1013}, 'end': {'line': 33, 'col': 65, 'offset': 1017}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 33, 'col': 84, 'offset': 1036}, 'end': {'line': 33, 'col': 88, 'offset': 1040}, 'abstract_content': 'file'}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': 'b3b6f95916f35c8f794e52c402b8a155d3476a4e8ced7354e47fba9047be4c711344733405bb48b58e64a97f67f510511512261b2266264cbd3040d6cd16c3b1_0', 'lines': '      const moreMatches = await fileSniff(files.map(file => path.resolve(currPath, file)), match)', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpt7mwtcfo.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'paths']], 'intermediate_vars': [{'location': {'path': 'tmpt7mwtcfo.ts', 'start': {'line': 33, 'col': 53, 'offset': 1005}, 'end': {'line': 33, 'col': 57, 'offset': 1009}}, 'content': 'file'}, {'location': {'path': 'tmpt7mwtcfo.ts', 'start': {'line': 32, 'col': 13, 'offset': 920}, 'end': {'line': 32, 'col': 18, 'offset': 925}}, 'content': 'files'}, {'location': {'path': 'tmpt7mwtcfo.ts', 'start': {'line': 30, 'col': 14, 'offset': 839}, 'end': {'line': 30, 'col': 22, 'offset': 847}}, 'content': 'currPath'}, {'location': {'path': 'tmpt7mwtcfo.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'content': 'paths'}], 'taint_sink': ['CliLoc', [{'path': 'tmpt7mwtcfo.ts', 'start': {'line': 33, 'col': 84, 'offset': 1036}, 'end': {'line': 33, 'col': 88, 'offset': 1040}}, 'file']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpt7mwtcfo.ts', 'start': {'line': 35, 'col': 43, 'offset': 1155}, 'end': {'line': 35, 'col': 51, 'offset': 1163}, 'extra': {'metavars': {'$X': {'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}, 'abstract_content': 'paths'}, '$PATH': {'start': {'line': 33, 'col': 61, 'offset': 1013}, 'end': {'line': 33, 'col': 65, 'offset': 1017}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 35, 'col': 43, 'offset': 1155}, 'end': {'line': 35, 'col': 51, 'offset': 1163}, 'abstract_content': 'currPath'}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': 'a1fb76089ef36f576d95e86bc1ae6775ab13c575dff0cb8c1d5e4d59cad51c1cdfcc5070c12ddb74e6f791a4602faebfdcb765f79cf25e607e08c7432e01b43f_1', 'lines': '        const resolvedPath = path.resolve(currPath, file);', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpt7mwtcfo.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'paths']], 'intermediate_vars': [{'location': {'path': 'tmpt7mwtcfo.ts', 'start': {'line': 30, 'col': 14, 'offset': 839}, 'end': {'line': 30, 'col': 22, 'offset': 847}}, 'content': 'currPath'}, {'location': {'path': 'tmpt7mwtcfo.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'content': 'paths'}], 'taint_sink': ['CliLoc', [{'path': 'tmpt7mwtcfo.ts', 'start': {'line': 35, 'col': 43, 'offset': 1155}, 'end': {'line': 35, 'col': 51, 'offset': 1163}}, 'currPath']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpt7mwtcfo.ts', 'start': {'line': 35, 'col': 53, 'offset': 1165}, 'end': {'line': 35, 'col': 57, 'offset': 1169}, 'extra': {'metavars': {'$PATH': {'start': {'line': 33, 'col': 61, 'offset': 1013}, 'end': {'line': 33, 'col': 65, 'offset': 1017}, 'abstract_content': 'path'}, '$X': {'start': {'line': 34, 'col': 53, 'offset': 1103}, 'end': {'line': 34, 'col': 57, 'offset': 1107}, 'abstract_content': 'file'}, '$SINK': {'start': {'line': 35, 'col': 53, 'offset': 1165}, 'end': {'line': 35, 'col': 57, 'offset': 1169}, 'abstract_content': 'file'}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': 'f172a8be73a91fb6823559a9f46c9a5f18a49a64313808544aecef148f43bd9fa567f9be837ec1db5505751289fc4e7d5003f17dfcfcb1add0af34f350856f7a_0', 'lines': '        const resolvedPath = path.resolve(currPath, file);', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpt7mwtcfo.ts', 'start': {'line': 34, 'col': 53, 'offset': 1103}, 'end': {'line': 34, 'col': 57, 'offset': 1107}}, 'file']], 'intermediate_vars': [{'location': {'path': 'tmpt7mwtcfo.ts', 'start': {'line': 34, 'col': 53, 'offset': 1103}, 'end': {'line': 34, 'col': 57, 'offset': 1107}}, 'content': 'file'}], 'taint_sink': ['CliLoc', [{'path': 'tmpt7mwtcfo.ts', 'start': {'line': 35, 'col': 53, 'offset': 1165}, 'end': {'line': 35, 'col': 57, 'offset': 1169}}, 'file']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpt7mwtcfo.ts', 'start': {'line': 37, 'col': 85, 'offset': 1352}, 'end': {'line': 37, 'col': 96, 'offset': 1363}, 'extra': {'metavars': {'$X': {'start': {'line': 37, 'col': 33, 'offset': 1300}, 'end': {'line': 37, 'col': 44, 'offset': 1311}, 'abstract_content': 'allowedPath'}, '$PATH': {'start': {'line': 37, 'col': 72, 'offset': 1339}, 'end': {'line': 37, 'col': 76, 'offset': 1343}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 37, 'col': 85, 'offset': 1352}, 'end': {'line': 37, 'col': 96, 'offset': 1363}, 'abstract_content': 'allowedPath'}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '3ae57e1a1170942dcb3295f5cb4965c9e645518cd5af1c246007bb371d9a162bf9572a6a679c82009a0d22524b460549e75a49e94239c3a4692e7d12039ff3dd_0', 'lines': '        if (!SNIPPET_PATHS.some(allowedPath => resolvedPath.startsWith(path.resolve(allowedPath)))) {', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpt7mwtcfo.ts', 'start': {'line': 37, 'col': 33, 'offset': 1300}, 'end': {'line': 37, 'col': 44, 'offset': 1311}}, 'allowedPath']], 'intermediate_vars': [{'location': {'path': 'tmpt7mwtcfo.ts', 'start': {'line': 37, 'col': 33, 'offset': 1300}, 'end': {'line': 37, 'col': 44, 'offset': 1311}}, 'content': 'allowedPath'}], 'taint_sink': ['CliLoc', [{'path': 'tmpt7mwtcfo.ts', 'start': {'line': 37, 'col': 85, 'offset': 1352}, 'end': {'line': 37, 'col': 96, 'offset': 1363}}, 'allowedPath']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpt7mwtcfo.ts', 'start': {'line': 115, 'col': 53, 'offset': 3205}, 'end': {'line': 115, 'col': 68, 'offset': 3220}, 'extra': {'metavars': {'$X': {'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}, 'abstract_content': 'paths'}, '$PATH': {'start': {'line': 115, 'col': 40, 'offset': 3192}, 'end': {'line': 115, 'col': 44, 'offset': 3196}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 115, 'col': 53, 'offset': 3205}, 'end': {'line': 115, 'col': 68, 'offset': 3220}, 'abstract_content': 'matches[0].path'}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': 'c275d49990b0a3c646744640229099e468fc6259988f171012be54da2605c66bf19c712579607333fd85415b25742d9d1a1d309512a4a826bdcdff449a439ee1_0', 'lines': \"        const source = fs.readFileSync(path.resolve(matches[0].path), 'utf8')\", 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliCall', [[{'path': 'tmpt7mwtcfo.ts', 'start': {'line': 113, 'col': 29, 'offset': 3040}, 'end': {'line': 113, 'col': 38, 'offset': 3049}}, 'fileSniff'], [{'location': {'path': 'tmpt7mwtcfo.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'content': 'paths'}, {'location': {'path': 'tmpt7mwtcfo.ts', 'start': {'line': 30, 'col': 14, 'offset': 839}, 'end': {'line': 30, 'col': 22, 'offset': 847}}, 'content': 'currPath'}], ['CliLoc', [{'path': 'tmpt7mwtcfo.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'paths']]]], 'intermediate_vars': [{'location': {'path': 'tmpt7mwtcfo.ts', 'start': {'line': 113, 'col': 13, 'offset': 3024}, 'end': {'line': 113, 'col': 20, 'offset': 3031}}, 'content': 'matches'}], 'taint_sink': ['CliLoc', [{'path': 'tmpt7mwtcfo.ts', 'start': {'line': 115, 'col': 53, 'offset': 3205}, 'end': {'line': 115, 'col': 68, 'offset': 3220}}, 'matches[0].path']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmpt7mwtcfo.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Validate or sanitize the `file` variable before using it in `path.resolve` to prevent path traversal vulnerabilities.",
                "instructions": "1. Validate the `file` variable before using it in `path.resolve`. Ensure that it does not contain any path traversal characters like `..` or `/`.\n   You can use a regular expression to check for these characters: `if (/(\\.\\.|\\/)/.test(file)) { throw new Error('Invalid file path'); }`.\n2. Alternatively, if you want to allow only specific file names, create a whitelist of allowed file names and check against it: `const allowedFiles = ['file1.js', 'file2.js']; if (!allowedFiles.includes(file)) { throw new Error('Invalid file name'); }`.\n3. Use the validated or sanitized `file` variable in the `path.resolve` function: `path.resolve(currPath, file)`."
            },
            "component": null
        }
    },
    {
        "id": 72086670,
        "ref": "main",
        "syntactic_id": "bf2a011b7dbfbf81fbc04005b5f5683b",
        "match_based_id": "e924231cf301b93390890ed4aa05503d0ed707dd44f04728309957cb6cb16094f1c8fedc344070d25aa117347b06f71baf33d4da17f960984b48fb60231c642b_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/vulnCodeSnippet.ts#L107",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223507Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "routes/vulnCodeSnippet.ts",
            "line": 107,
            "column": 53,
            "end_line": 107,
            "end_column": 68
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638634Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": {
                "fix_code": "        // Sanitize the path to prevent path traversal vulnerabilities\n        const sanitizedPath = path.normalize(matches[0].path).replace(/^(\\.\\.[\\/\\\\])+/, '');\n        const source = fs.readFileSync(path.resolve(sanitizedPath), 'utf8')",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..path-join-resolve-traversal', 'path': 'tmpm6zlf17m.ts', 'start': {'line': 33, 'col': 74, 'offset': 1026}, 'end': {'line': 33, 'col': 82, 'offset': 1034}, 'extra': {'metavars': {'$X': {'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}, 'abstract_content': 'paths'}, '$PATH': {'start': {'line': 33, 'col': 61, 'offset': 1013}, 'end': {'line': 33, 'col': 65, 'offset': 1017}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 33, 'col': 74, 'offset': 1026}, 'end': {'line': 33, 'col': 82, 'offset': 1034}, 'abstract_content': 'currPath'}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': 'e316029a000307becff944068597545ceee8a090266e6e2bc661f72cebda2e05b1bb8d41365f4ecb8f916f569aa3ab05420428dfb6b830985d0060d96b43de5b_0', 'lines': '      const moreMatches = await fileSniff(files.map(file => path.resolve(currPath, file)), match)', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpm6zlf17m.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'paths']], 'intermediate_vars': [{'location': {'path': 'tmpm6zlf17m.ts', 'start': {'line': 30, 'col': 14, 'offset': 839}, 'end': {'line': 30, 'col': 22, 'offset': 847}}, 'content': 'currPath'}, {'location': {'path': 'tmpm6zlf17m.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'content': 'paths'}], 'taint_sink': ['CliLoc', [{'path': 'tmpm6zlf17m.ts', 'start': {'line': 33, 'col': 74, 'offset': 1026}, 'end': {'line': 33, 'col': 82, 'offset': 1034}}, 'currPath']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpm6zlf17m.ts', 'start': {'line': 33, 'col': 84, 'offset': 1036}, 'end': {'line': 33, 'col': 88, 'offset': 1040}, 'extra': {'metavars': {'$X': {'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}, 'abstract_content': 'paths'}, '$PATH': {'start': {'line': 33, 'col': 61, 'offset': 1013}, 'end': {'line': 33, 'col': 65, 'offset': 1017}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 33, 'col': 84, 'offset': 1036}, 'end': {'line': 33, 'col': 88, 'offset': 1040}, 'abstract_content': 'file'}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '8c2f74607a1bbdaea277e1b33532d6da189e8c94d6b6992b46b3b33daea50c1838b6edcabb4b2071b0809314e1ccbe91c2b33c2b81310e3523c6551bc723e0d5_0', 'lines': '      const moreMatches = await fileSniff(files.map(file => path.resolve(currPath, file)), match)', 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliLoc', [{'path': 'tmpm6zlf17m.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'paths']], 'intermediate_vars': [{'location': {'path': 'tmpm6zlf17m.ts', 'start': {'line': 33, 'col': 53, 'offset': 1005}, 'end': {'line': 33, 'col': 57, 'offset': 1009}}, 'content': 'file'}, {'location': {'path': 'tmpm6zlf17m.ts', 'start': {'line': 32, 'col': 13, 'offset': 920}, 'end': {'line': 32, 'col': 18, 'offset': 925}}, 'content': 'files'}, {'location': {'path': 'tmpm6zlf17m.ts', 'start': {'line': 30, 'col': 14, 'offset': 839}, 'end': {'line': 30, 'col': 22, 'offset': 847}}, 'content': 'currPath'}, {'location': {'path': 'tmpm6zlf17m.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'content': 'paths'}], 'taint_sink': ['CliLoc', [{'path': 'tmpm6zlf17m.ts', 'start': {'line': 33, 'col': 84, 'offset': 1036}, 'end': {'line': 33, 'col': 88, 'offset': 1040}}, 'file']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..path-join-resolve-traversal', 'path': 'tmpm6zlf17m.ts', 'start': {'line': 107, 'col': 53, 'offset': 2741}, 'end': {'line': 107, 'col': 68, 'offset': 2756}, 'extra': {'metavars': {'$X': {'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}, 'abstract_content': 'paths'}, '$PATH': {'start': {'line': 107, 'col': 40, 'offset': 2728}, 'end': {'line': 107, 'col': 44, 'offset': 2732}, 'abstract_content': 'path'}, '$SINK': {'start': {'line': 107, 'col': 53, 'offset': 2741}, 'end': {'line': 107, 'col': 68, 'offset': 2756}, 'abstract_content': 'matches[0].path'}}, 'message': 'Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.', 'metadata': {'owasp': ['A05:2017 - Broken Access Control', 'A01:2021 - Broken Access Control'], 'cwe': [\"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"], 'category': 'security', 'references': ['https://owasp.org/www-community/attacks/Path_Traversal'], 'technology': ['javascript', 'node.js'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['vuln'], 'likelihood': 'HIGH', 'impact': 'MEDIUM', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Path Traversal']}, 'severity': 'WARNING', 'fingerprint': '79f50da188a735ea7d158f5df79ac80fe2da5cd2124565272465073fc6f7387888339960b0922da80c0e819478c54f5783697191b9341a00087cb15693b92e31_0', 'lines': \"        const source = fs.readFileSync(path.resolve(matches[0].path), 'utf8')\", 'is_ignored': False, 'dataflow_trace': {'taint_source': ['CliCall', [[{'path': 'tmpm6zlf17m.ts', 'start': {'line': 105, 'col': 29, 'offset': 2576}, 'end': {'line': 105, 'col': 38, 'offset': 2585}}, 'fileSniff'], [{'location': {'path': 'tmpm6zlf17m.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'content': 'paths'}, {'location': {'path': 'tmpm6zlf17m.ts', 'start': {'line': 30, 'col': 14, 'offset': 839}, 'end': {'line': 30, 'col': 22, 'offset': 847}}, 'content': 'currPath'}], ['CliLoc', [{'path': 'tmpm6zlf17m.ts', 'start': {'line': 28, 'col': 33, 'offset': 741}, 'end': {'line': 28, 'col': 38, 'offset': 746}}, 'paths']]]], 'intermediate_vars': [{'location': {'path': 'tmpm6zlf17m.ts', 'start': {'line': 105, 'col': 13, 'offset': 2560}, 'end': {'line': 105, 'col': 20, 'offset': 2567}}, 'content': 'matches'}], 'taint_sink': ['CliLoc', [{'path': 'tmpm6zlf17m.ts', 'start': {'line': 107, 'col': 53, 'offset': 2741}, 'end': {'line': 107, 'col': 68, 'offset': 2756}}, 'matches[0].path']]}, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmpm6zlf17m.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Validate or sanitize the input path to prevent path traversal vulnerabilities.",
                "instructions": "1. Validate the `matches[0].path` input to ensure it does not contain any malicious path traversal sequences. You can use a regular expression to check for patterns like `../` or `..\\\\` and reject such inputs. For example, add a check like `if (/(\\.\\.\\/|\\\\\\.\\.\\\\)/.test(matches[0].path)) throw new Error('Invalid path');`.\n\n2. Alternatively, if you want to allow only specific directories, use `path` to resolve the input path and compare it against an allowed base directory. For example:\n   ```javascript\n   const basePath = '/allowed/base/directory';\n   const resolvedPath = path.resolve(basePath, matches[0].path);\n   if (!resolvedPath.startsWith(basePath)) {\n     throw new Error('Path traversal detected');\n   }\n   ```\n\n3. Use the validated or sanitized path in the `path.resolve` function to read the file safely. This ensures that the file access is restricted to the intended directory structure."
            },
            "component": null
        }
    },
    {
        "id": 72086665,
        "ref": "main",
        "syntactic_id": "d6b32716324a72d0951c45072fb171c8",
        "match_based_id": "44d0cbd8325ad9dbf15f3d41159ee2b813bac3c7cc7fa58844fc11bc13bf90c0197e2cae62aec5e3eff1a18957e0a2be9bd019a69bcf27b8c3c7fd9c37e79d27_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/frontend/src/app/search-result/search-result.component.ts#L152",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.223425Z",
        "relevant_since": "2024-08-11T07:27:20.651538Z",
        "rule_name": "typescript.angular.angular-route-bypass-security-trust.angular-route-bypass-security-trust",
        "rule_message": "Untrusted input could be used to tamper with a web page rendering, which can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. Validate the user input, perform contextual output encoding, or sanitize the input. A popular library used to prevent XSS is DOMPurify. You can also use libraries and frameworks such as Angular, Vue, and React, which offer secure defaults when rendering input.",
        "location": {
            "file_path": "frontend/src/app/search-result/search-result.component.ts",
            "line": 152,
            "column": 65,
            "end_line": 152,
            "end_column": 75
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-11T07:27:20.638620Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "typescript.angular.angular-route-bypass-security-trust.angular-route-bypass-security-trust",
            "message": "Untrusted input could be used to tamper with a web page rendering, which can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. Validate the user input, perform contextual output encoding, or sanitize the input. A popular library used to prevent XSS is DOMPurify. You can also use libraries and frameworks such as Angular, Vue, and React, which offer secure defaults when rendering input.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      // Use DOMPurify to sanitize the queryParam before assigning it to searchValue\n      this.searchValue = DOMPurify.sanitize(queryParam)",
                "explanation": "The fix replaces the use of `bypassSecurityTrustHtml` with `DOMPurify.sanitize`, which is a valid approach to prevent XSS by sanitizing input. However, the code assumes that `DOMPurify` is already available in the environment. If `DOMPurify` is not imported or available, additional code changes will be needed to import or include it in the project. Additionally, if the environment or build process does not currently support `DOMPurify`, infrastructure changes may be necessary to include the library."
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Use DOMPurify to sanitize the query parameter instead of using `bypassSecurityTrustHtml`.",
                "instructions": "1. Remove the use of `bypassSecurityTrustHtml` from the line where `this.searchValue` is assigned.\n2. Import DOMPurify at the top of your file with `import DOMPurify from 'dompurify';`.\n3. Sanitize the `queryParam` using DOMPurify before assigning it to `this.searchValue`. Replace the assignment with `this.searchValue = DOMPurify.sanitize(queryParam);`.\n\nThis change ensures that any potentially harmful HTML content in `queryParam` is sanitized, preventing XSS vulnerabilities."
            },
            "component": null
        }
    },
    {
        "id": 77820931,
        "ref": "main",
        "syntactic_id": "7e25a474009aa682146e0e783a58248b",
        "match_based_id": "c2c7cc5931e16da7a7bc9e2fc1e98093f4c2df0159cda8677f10cd4747a7e125dbcf1faf73b825dc6d1908c737a9c354fc272b9f0bb4f3620c4a5909de3fd6be_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/server.ts#L241",
        "first_seen_scan_id": 32100113,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-28T07:01:35.800850Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "rule_message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
        "location": {
            "file_path": "server.ts",
            "line": 241,
            "column": 3,
            "end_line": 241,
            "end_column": 76
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
            "message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Mishandled Sensitive Information"
            ],
            "cwe_names": [
                "CWE-548: Exposure of Information Through Directory Listing"
            ],
            "owasp_names": [
                "A06:2017 - Security Misconfiguration",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 77820930,
        "ref": "main",
        "syntactic_id": "d092fe01e8e24ae85da44ef47eae1b08",
        "match_based_id": "c2c7cc5931e16da7a7bc9e2fc1e98093f4c2df0159cda8677f10cd4747a7e125dbcf1faf73b825dc6d1908c737a9c354fc272b9f0bb4f3620c4a5909de3fd6be_1",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/server.ts#L246",
        "first_seen_scan_id": 32100113,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-28T07:01:35.800834Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "rule_message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
        "location": {
            "file_path": "server.ts",
            "line": 246,
            "column": 3,
            "end_line": 246,
            "end_column": 115
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
            "message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Mishandled Sensitive Information"
            ],
            "cwe_names": [
                "CWE-548: Exposure of Information Through Directory Listing"
            ],
            "owasp_names": [
                "A06:2017 - Security Misconfiguration",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": {
                "fix_code": "  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details', hidden: false, filter: (filename, index, files, dir) => {\n    // Filter out sensitive files\n    const sensitiveFiles = ['private.key', 'secret.txt'];\n    return !sensitiveFiles.includes(filename);\n  }}))",
                "explanation": "The fix appears to address the issue by filtering out sensitive files. However, there is a small chance that the original issue might still be present if there are other sensitive files not listed in the filter. Additionally, other parts of the codebase might need to be updated to handle the new filtering logic correctly."
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Disable directory listing by removing the `serveIndex` middleware and adding access control middleware to protect sensitive files.",
                "instructions": "1. Remove the `serveIndex` middleware from the `/encryptionkeys` route to disable directory listing.\n    ```javascript\n    app.use('/encryptionkeys', serveIndexMiddleware)\n    ```\n\n2. Ensure that sensitive files in the `/encryptionkeys` directory are not accessible by adding appropriate access control middleware.\n    ```javascript\n    app.use('/encryptionkeys/:file', accessControlMiddleware, keyServer())\n    ```\n\n3. Repeat the above steps for other routes where `serveIndex` is used, such as `/ftp` and `/support/logs`.\n\n    For `/ftp`:\n    ```javascript\n    app.use('/ftp', serveIndexMiddleware)\n    app.use('/ftp(?!/quarantine)/:file', accessControlMiddleware, fileServer())\n    ```\n\n    For `/support/logs`:\n    ```javascript\n    app.use('/support/logs', serveIndexMiddleware)\n    app.use('/support/logs', verify.accessControlChallenges())\n    app.use('/support/logs/:file', accessControlMiddleware, logFileServer())\n    ```\n\nAlternatively, if you need to keep directory listing enabled for public resources, ensure that sensitive files are not stored in these directories or are properly protected by access control mechanisms."
            },
            "component": null
        }
    },
    {
        "id": 77820929,
        "ref": "main",
        "syntactic_id": "3724c6535423c5d95d1d5f7bb9b16a7c",
        "match_based_id": "c2c7cc5931e16da7a7bc9e2fc1e98093f4c2df0159cda8677f10cd4747a7e125dbcf1faf73b825dc6d1908c737a9c354fc272b9f0bb4f3620c4a5909de3fd6be_2",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/server.ts#L250",
        "first_seen_scan_id": 32100113,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-28T07:01:35.800802Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "rule_message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
        "location": {
            "file_path": "server.ts",
            "line": 250,
            "column": 3,
            "end_line": 250,
            "end_column": 103
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
            "message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Mishandled Sensitive Information"
            ],
            "cwe_names": [
                "CWE-548: Exposure of Information Through Directory Listing"
            ],
            "owasp_names": [
                "A06:2017 - Security Misconfiguration",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": {
                "fix_code": "  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details', filter: (filename, index, files, dir) => {\n    // Exclude sensitive files from being listed\n    const sensitiveFiles = ['sensitive.log', 'secret.log'];\n    return !sensitiveFiles.includes(filename);\n  }})) // vuln-code-snippet vuln-line accessLogDisclosureChallenge",
                "explanation": "The fix introduces a filter to exclude sensitive files from being listed, which addresses the immediate issue. However, there is a small chance that other sensitive files not listed in the `sensitiveFiles` array could still be exposed. Regular updates to the list of sensitive files may be required to ensure comprehensive protection."
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Disable directory listing or filter out sensitive files when using `serve-index`.",
                "instructions": "1. Identify the routes where directory listing is enabled using `serve-index`. In this case, the routes are `/ftp`, `/encryptionkeys`, and `/support/logs`.\n\n2. Determine if directory listing is necessary for these routes. If not, remove the `serveIndex` middleware. For example, change:\n    ```javascript\n    app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))\n    ```\n    to:\n    ```javascript\n    app.use('/support/logs', serveIndexMiddleware)\n    ```\n\n3. If directory listing is necessary, ensure sensitive files are inaccessible. You can use a middleware to filter out sensitive files. For example:\n    ```javascript\n    const sensitiveFiles = ['secret.txt', 'config.json'];\n    \n    function filterSensitiveFiles(req, res, next) {\n      const originalUrl = req.originalUrl;\n      if (sensitiveFiles.some(file => originalUrl.includes(file))) {\n        return res.status(403).send('Access Denied');\n      }\n      next();\n    }\n    \n    app.use('/support/logs', filterSensitiveFiles, serveIndex('logs', { icons: true, view: 'details' }));\n    ```\n\n4. Repeat the above steps for other routes where `serve-index` is used, such as `/ftp` and `/encryptionkeys`.\n\n5. Test the application to ensure that directory listing is either disabled or sensitive files are properly protected."
            },
            "component": null
        }
    },
    {
        "id": 72086751,
        "ref": "main",
        "syntactic_id": "b9a45df0ea0cfc004eb43ceca1dcc069",
        "match_based_id": "d88ab23597e5dd26aac1d4036d60ded436d6c11cbdf4835e90361d4fc8d7560519cd06917716a7c62b545bb91658078213beeaf9ab967face86db4ebba54c374_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/data/static/users.yml#L150",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.224786Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "generic.secrets.security.detected-generic-secret.detected-generic-secret",
        "rule_message": "Generic Secret detected",
        "location": {
            "file_path": "data/static/users.yml",
            "line": 150,
            "column": 7,
            "end_line": 150,
            "end_column": 47
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "generic.secrets.security.detected-generic-secret.detected-generic-secret",
            "message": "Generic Secret detected",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Hard-coded Secrets"
            ],
            "cwe_names": [
                "CWE-798: Use of Hard-coded Credentials"
            ],
            "owasp_names": [
                "A07:2021 - Identification and Authentication Failures"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "PII",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086750,
        "ref": "main",
        "syntactic_id": "84fd02aa42e62d57fa049a4eec3deb51",
        "match_based_id": "2c98e3f2a3876269bc65deaaaf7d15babb665e2ef3c1ad4d5f0a13c8b18a4e1e5d025a370b85781ad5d3d629000ef15e98f99eddabd1b2ef147f05f1bb0acbc1_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/frontend/src/hacking-instructor/index.ts#L107",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.224771Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.browser.security.insecure-document-method.insecure-document-method",
        "rule_message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
        "location": {
            "file_path": "frontend/src/hacking-instructor/index.ts",
            "line": 107,
            "column": 3,
            "end_line": 107,
            "end_column": 43
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.browser.security.insecure-document-method.insecure-document-method",
            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "  textBox.textContent = snarkdown(hint.text)\n  // Note: Ensure that snarkdown(hint.text) returns plain text. If it returns HTML, \n  // consider using a library to sanitize the HTML before setting it to innerHTML.",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..insecure-document-method', 'path': 'tmpj44psbdm.ts', 'start': {'line': 107, 'col': 3, 'offset': 3393}, 'end': {'line': 107, 'col': 43, 'offset': 3433}, 'extra': {'metavars': {'$EL': {'start': {'line': 107, 'col': 3, 'offset': 3393}, 'end': {'line': 107, 'col': 10, 'offset': 3400}, 'abstract_content': 'textBox'}, '$HTML': {'start': {'line': 107, 'col': 23, 'offset': 3413}, 'end': {'line': 107, 'col': 43, 'offset': 3433}, 'abstract_content': 'snarkdown(hint.text)'}}, 'message': 'User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities', 'metadata': {'cwe': [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], 'owasp': ['A07:2017 - Cross-Site Scripting (XSS)', 'A03:2021 - Injection'], 'category': 'security', 'technology': ['browser'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['audit'], 'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'LOW', 'references': ['https://owasp.org/Top10/A03_2021-Injection'], 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Cross-Site-Scripting (XSS)']}, 'severity': 'ERROR', 'fingerprint': '168d9b626f60be9820eab1f4007cb5c3db955e3c86abc76f3ba19cbd9b3b3b019b49749bf16c8ed003589301df1d7c21967c753145e191255de2c186f03ba8f7_0', 'lines': '  textBox.innerHTML = snarkdown(hint.text)', 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmpj44psbdm.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Sanitize the user input using `sanitize-html` before assigning it to `innerHTML`.",
                "instructions": "1. Import the `sanitize-html` library at the top of your file if it's not already imported:\n    ```javascript\n    const sanitizeHtml = require('sanitize-html');\n    ```\n\n2. Sanitize the `hint.text` before passing it to `snarkdown`:\n    ```javascript\n    const sanitizedText = sanitizeHtml(hint.text);\n    ```\n\n3. Update the assignment to `textBox.innerHTML` to use the sanitized text:\n    ```javascript\n    textBox.innerHTML = snarkdown(sanitizedText);\n    ```\n\nThis ensures that any potentially harmful HTML content in `hint.text` is sanitized before being processed and inserted into the DOM, preventing XSS vulnerabilities."
            },
            "component": null
        }
    },
    {
        "id": 72086728,
        "ref": "main",
        "syntactic_id": "96f36d354118304316392a230872f16c",
        "match_based_id": "19be5f56108517fd4aa13ac781c2efa1b958845f8d0981d6045c2753b8e7859ef1821500b10f91f929701216b3e5d4db275c51b46841cc243755694916586294_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/frontend/src/index.html#L14",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.224427Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "html.security.audit.missing-integrity.missing-integrity",
        "rule_message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
        "location": {
            "file_path": "frontend/src/index.html",
            "line": 14,
            "column": 3,
            "end_line": 14,
            "end_column": 127
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "html.security.audit.missing-integrity.missing-integrity",
            "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp_names": [
                "A08:2021 - Software and Data Integrity Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086727,
        "ref": "main",
        "syntactic_id": "55a9023947c22bf892902d9f35f43169",
        "match_based_id": "ebbd0e51d187d45d29d545a4830b8fae70a465182495e82c41f5bb19edeb840fccb0d1748ed38ea0e9abac63d5f4d6f3bf7ad12718494a0a42a444eee3688658_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/frontend/src/index.html#L15",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.224412Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "html.security.audit.missing-integrity.missing-integrity",
        "rule_message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
        "location": {
            "file_path": "frontend/src/index.html",
            "line": 15,
            "column": 3,
            "end_line": 15,
            "end_column": 101
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "html.security.audit.missing-integrity.missing-integrity",
            "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp_names": [
                "A08:2021 - Software and Data Integrity Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086726,
        "ref": "main",
        "syntactic_id": "ea2ff6a4dc18c8a51a909619ae7b7565",
        "match_based_id": "851e3da7310a6d14c8b13e343b5a11f16c7e4a36829868ba5b108d5ec90277647bc99dbaec56808e40aa9983ba8f765af23c4f1c043ae68a981e4fbdf6982b7a_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/frontend/src/index.html#L16",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.224396Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "html.security.audit.missing-integrity.missing-integrity",
        "rule_message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
        "location": {
            "file_path": "frontend/src/index.html",
            "line": 16,
            "column": 3,
            "end_line": 16,
            "end_column": 86
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "html.security.audit.missing-integrity.missing-integrity",
            "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp_names": [
                "A08:2021 - Software and Data Integrity Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086725,
        "ref": "main",
        "syntactic_id": "73c41523219f252eff52bcb0aa3309e8",
        "match_based_id": "30e76aaa5bef79d7d1e08ea08a077f36bd5d9208a7539558327aaa05a7eeef20a0ebbda2e94cc6c562cdde67be2b6ab108bdfa8ceb90fa79d57cd6dff4c9bfee_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/captcha.ts#L23",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.224380Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.browser.security.eval-detected.eval-detected",
        "rule_message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
        "location": {
            "file_path": "routes/captcha.ts",
            "line": 23,
            "column": 20,
            "end_line": 23,
            "end_column": 36
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.browser.security.eval-detected.eval-detected",
            "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Code Injection"
            ],
            "cwe_names": [
                "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
            ],
            "owasp_names": [
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "user authentication",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086724,
        "ref": "main",
        "syntactic_id": "f8a4110fab179956a4404c53dac5eabe",
        "match_based_id": "d15c8803dcd0a83365b887c4207db4e681c9470c390b31cbb40733b5c358b1dc30a01071b536a6c562cf1d1dff32b7529c508947d34cd8da6bad5958cb4f531a_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/userProfile.ts#L36",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.224364Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.browser.security.eval-detected.eval-detected",
        "rule_message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
        "location": {
            "file_path": "routes/userProfile.ts",
            "line": 36,
            "column": 26,
            "end_line": 36,
            "end_column": 36
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.browser.security.eval-detected.eval-detected",
            "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Code Injection"
            ],
            "cwe_names": [
                "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
            ],
            "owasp_names": [
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "PII",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086710,
        "ref": "main",
        "syntactic_id": "b310fb710e17d1c2b6483072ce383971",
        "match_based_id": "a7c1157f627c0e1215d1ff43f3a6d9b1b5567cb820656c0d47ba71699d5f1777339d8c02e423a9838fd65d018b6cdae86d10d52cc0e4f33f3812e21c6c7694aa_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/b2bOrder.ts#L22",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.224128Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage",
        "rule_message": "Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function.",
        "location": {
            "file_path": "routes/b2bOrder.ts",
            "line": 22,
            "column": 9,
            "end_line": 22,
            "end_column": 80
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage",
            "message": "Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Other"
            ],
            "cwe_names": [
                "CWE-1104: Use of Unmaintained Third Party Components"
            ],
            "owasp_names": [
                "A06:2021 - Vulnerable and Outdated Components"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086709,
        "ref": "main",
        "syntactic_id": "65026e82f504e525ca6c2b0ed358a8cb",
        "match_based_id": "600ed07ed79be3e05ab666fb222a33c7e1151498a49cc26f3447f2620adc464a8a3effdd2972444b1855a65df184688b12acdcbd9bb92674dc73bc0b33c77a86_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/lib/insecurity.ts#L53",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224113Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked",
        "rule_message": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.",
        "location": {
            "file_path": "lib/insecurity.ts",
            "line": 53,
            "column": 30,
            "end_line": 53,
            "end_column": 63
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked",
            "message": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-522: Insufficiently Protected Credentials"
            ],
            "owasp_names": [
                "A02:2017 - Broken Authentication",
                "A04:2021 - Insecure Design"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "cryptography",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086708,
        "ref": "main",
        "syntactic_id": "1e2e41d1b6fe0d4d6fb2b39c35f968be",
        "match_based_id": "600ed07ed79be3e05ab666fb222a33c7e1151498a49cc26f3447f2620adc464a8a3effdd2972444b1855a65df184688b12acdcbd9bb92674dc73bc0b33c77a86_1",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/lib/insecurity.ts#L54",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224098Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked",
        "rule_message": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.",
        "location": {
            "file_path": "lib/insecurity.ts",
            "line": 54,
            "column": 25,
            "end_line": 54,
            "end_column": 67
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked",
            "message": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-522: Insufficiently Protected Credentials"
            ],
            "owasp_names": [
                "A02:2017 - Broken Authentication",
                "A04:2021 - Insecure Design"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "cryptography",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086707,
        "ref": "main",
        "syntactic_id": "0e10de1aaead0851e87fec886b870a4c",
        "match_based_id": "fb1a0af0f9c22fdf942dbf02cb817d29328027189abae102be114f5e8abeff7f3fb88a86e113c84f85eb88fa06095246952f29eae8ce1f0e6434f256290e47f8_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/fileUpload.ts#L80",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.224082Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent",
        "rule_message": "Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it.",
        "location": {
            "file_path": "routes/fileUpload.ts",
            "line": 80,
            "column": 24,
            "end_line": 80,
            "end_column": 140
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent",
            "message": "Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "XML Injection"
            ],
            "cwe_names": [
                "CWE-611: Improper Restriction of XML External Entity Reference"
            ],
            "owasp_names": [
                "A04:2017 - XML External Entities (XXE)",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086695,
        "ref": "main",
        "syntactic_id": "267673b384a24c1d87945d3447c5951a",
        "match_based_id": "a15f585b68d6d123be356ae999949a88694dcee167c404b60d277df0ecb69aceaa54652bb72451e4c0cd5b1e6152730adc6dc1c6487ae2b3dc443410f1188dc4_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/views/promotionVideo.pug#L79",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223899Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape",
        "rule_message": "Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.",
        "location": {
            "file_path": "views/promotionVideo.pug",
            "line": 79,
            "column": 13,
            "end_line": 79,
            "end_column": 40
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape",
            "message": "Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": {
                "verdict": "false_positive",
                "reason": "The matched code snippet is a JavaScript comparison operation, not a Pug template unescape operation. The rule intended to detect unescapes in Pug templates, but this match is unrelated to that context."
            },
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086692,
        "ref": "main",
        "syntactic_id": "2da27c2e61fce7d63d93956c946fd492",
        "match_based_id": "58790189b9fb025d2ba62d9e109eb9ef94e90279cbdba46db794787843a5d2ed7883d21d5ed1887959dc1bbc3f543b93aa1a69c6d05b702056c814cc4cee3be6_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/lib/insecurity.ts#L55",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223853Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.jsonwebtoken.security.audit.jwt-exposed-data.jwt-exposed-data",
        "rule_message": "The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload.",
        "location": {
            "file_path": "lib/insecurity.ts",
            "line": 55,
            "column": 36,
            "end_line": 55,
            "end_column": 112
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.jsonwebtoken.security.audit.jwt-exposed-data.jwt-exposed-data",
            "message": "The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-522: Insufficiently Protected Credentials"
            ],
            "owasp_names": [
                "A02:2017 - Broken Authentication",
                "A04:2021 - Insecure Design"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "cryptography",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086691,
        "ref": "main",
        "syntactic_id": "f5891e42ca6716621d73d927f09102f2",
        "match_based_id": "2fe55de96af3e117edd636c512047bbb15e1da1f559d7ce00cbac78a735d3150228c4e7ddfe23cec93eeac93fe913acc8722b8a63cfb7f5b0fd576d2526ebfaf_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/lib/utils.ts#L97",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223837Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.jssha.jssha-sha1.jssha-sha1",
        "rule_message": "The SHA1 hashing algorithm is considered to be weak. If this is used in any sensitive operation such as password hashing, or is used to ensure data integrity (collision sensitive) then you should use a stronger hashing algorithm. For passwords, consider using `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider using `SHA-256`.",
        "location": {
            "file_path": "lib/utils.ts",
            "line": 97,
            "column": 18,
            "end_line": 97,
            "end_column": 44
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.jssha.jssha-sha1.jssha-sha1",
            "message": "The SHA1 hashing algorithm is considered to be weak. If this is used in any sensitive operation such as password hashing, or is used to ensure data integrity (collision sensitive) then you should use a stronger hashing algorithm. For passwords, consider using `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider using `SHA-256`.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
            ],
            "owasp_names": [
                "A03:2017 - Sensitive Data Exposure",
                "A02:2021 - Cryptographic Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086684,
        "ref": "main",
        "syntactic_id": "3c4aa958e7317f56fd5b9b913fa8400a",
        "match_based_id": "569e806f7e4276ac73f185c72e97867ad00c7577b6de01cb8ddf4d0baac7e4e87d2a1332921d7904bc42be66144ec687c33426d62ca235adbef07da7962cfc84_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/lib/insecurity.ts#L43",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223728Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key",
        "rule_message": "Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.",
        "location": {
            "file_path": "lib/insecurity.ts",
            "line": 43,
            "column": 34,
            "end_line": 43,
            "end_column": 89
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key",
            "message": "Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Hard-coded Secrets"
            ],
            "cwe_names": [
                "CWE-798: Use of Hard-coded Credentials"
            ],
            "owasp_names": [
                "A07:2021 - Identification and Authentication Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65704,
            "name": "Rule Board - Block column",
            "slug": "rule-board-block"
        },
        "assistant": {
            "autofix": {
                "fix_code": "exports.hmac = (data: string) => {\n  const hmacKey = process.env.HMAC_KEY;\n  if (!hmacKey) {\n    throw new Error('HMAC_KEY environment variable is not set');\n  }\n  return crypto.createHmac('sha256', hmacKey).update(data).digest('hex');\n}",
                "explanation": "The fix requires the HMAC_KEY environment variable to be set. If this environment variable is not configured, the code will throw an error. This requires a manual step to ensure the environment variable is properly set."
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Use the `config` module to store and retrieve the HMAC secret instead of hardcoding it.",
                "instructions": "1. Import the `config` or `convict` module at the top of your file if not already imported:\n    ```javascript\n    const config = require('config');\n    ```\n\n2. Add a configuration entry for the HMAC secret in your configuration file (e.g., `config/default.json`):\n    ```json\n    {\n      \"hmacSecret\": \"pa4qacea4VK9t9nGv7yZtwmj\"\n    }\n    ```\n\n3. Replace the hardcoded HMAC secret in your `hmac` function with a reference to the configuration entry:\n    ```javascript\n    const hmacSecret = config.get('hmacSecret');\n    exports.hmac = (data: string) => crypto.createHmac('sha256', hmacSecret).update(data).digest('hex');\n    ```\n\nBy storing the HMAC secret in a configuration file, you can manage it more securely and change it without modifying the code."
            },
            "component": {
                "tag": "cryptography",
                "risk": "high"
            }
        }
    },
    {
        "id": 72086669,
        "ref": "main",
        "syntactic_id": "d80d7d7faba108a84b14cadfe47ec156",
        "match_based_id": "5cead82d9a4735f083309009863d61c9b55b4caf4f217d8ee8d570d7f3159dedbfede69a52f5f8f43ffdedeedaa7ea4b87f15e2b53e8e916394ee253cb05610a_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/frontend/src/hacking-instructor/helpers/helpers.ts#L36",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223490Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop",
        "rule_message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",
        "location": {
            "file_path": "frontend/src/hacking-instructor/helpers/helpers.ts",
            "line": 36,
            "column": 9,
            "end_line": 36,
            "end_column": 54
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop",
            "message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Mass Assignment"
            ],
            "cwe_names": [
                "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"
            ],
            "owasp_names": [
                "A08:2021 - Software and Data Integrity Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086668,
        "ref": "main",
        "syntactic_id": "f72028106b66a0d862c6cbe3453eca93",
        "match_based_id": "e4b02808f1038a915ab7df4473e7c597698ea1457a76d1f78398678d11b9ead64f6e3acee2f93e5a31b40d2ae234bdfa608e03426cd5bf8e7d0bb76c60ddbcb1_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/videoHandler.ts#L57",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223474Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag",
        "rule_message": "Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.",
        "location": {
            "file_path": "routes/videoHandler.ts",
            "line": 57,
            "column": 90,
            "end_line": 57,
            "end_column": 94
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag",
            "message": "Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      challengeUtils.solveIf(challenges.videoXssChallenge, () => { \n        // Ensure 'subs' is not externally controlled or sanitize this data\n        const sanitizedSubs = entities.encode(subs);\n        return utils.contains(sanitizedSubs, '</script><script>alert(`xss`)</script>') \n      })",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..unknown-value-with-script-tag', 'path': 'tmpf849kplb.ts', 'start': {'line': 57, 'col': 90, 'offset': 1902}, 'end': {'line': 57, 'col': 94, 'offset': 1906}, 'extra': {'metavars': {'$ANYFUNC': {'start': {'line': 55, 'col': 20, 'offset': 1794}, 'end': {'line': 55, 'col': 35, 'offset': 1809}, 'abstract_content': 'getSubsFromFile'}, '$OTHERFUNC': {'start': {'line': 57, 'col': 75, 'offset': 1887}, 'end': {'line': 57, 'col': 89, 'offset': 1901}, 'abstract_content': 'utils.contains'}, '$UNK': {'start': {'line': 57, 'col': 90, 'offset': 1902}, 'end': {'line': 57, 'col': 94, 'offset': 1906}, 'abstract_content': 'subs', 'propagated_value': {'svalue_start': {'line': 55, 'col': 20, 'offset': 1794}, 'svalue_end': {'line': 55, 'col': 37, 'offset': 1811}, 'svalue_abstract_content': 'getSubsFromFile()'}}}, 'message': \"Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.\", 'metadata': {'owasp': ['A07:2017 - Cross-Site Scripting (XSS)', 'A03:2021 - Injection'], 'cwe': [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], 'references': ['https://www.developsec.com/2017/11/09/xss-in-a-script-tag/', 'https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68'], 'category': 'security', 'technology': ['javascript'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['audit'], 'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Cross-Site-Scripting (XSS)']}, 'severity': 'WARNING', 'fingerprint': '66fbdf8e7b4b67de60cd96d35960d5cd7ac7eacf66f3571799c9ce0e61317c409b386ce6592b1702e915e684692d39b42bb43ffb40a2fad54794c963fd41af09_0', 'lines': \"      challengeUtils.solveIf(challenges.videoXssChallenge, () => { return utils.contains(subs, '</script><script>alert(`xss`)</script>') })\", 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..unknown-value-with-script-tag', 'path': 'tmpf849kplb.ts', 'start': {'line': 61, 'col': 31, 'offset': 2180}, 'end': {'line': 61, 'col': 44, 'offset': 2193}, 'extra': {'metavars': {'$ANYFUNC': {'start': {'line': 60, 'col': 31, 'offset': 2127}, 'end': {'line': 60, 'col': 46, 'offset': 2142}, 'abstract_content': 'entities.encode'}, '$OTHERFUNC': {'start': {'line': 61, 'col': 16, 'offset': 2165}, 'end': {'line': 61, 'col': 30, 'offset': 2179}, 'abstract_content': 'utils.contains'}, '$UNK': {'start': {'line': 61, 'col': 31, 'offset': 2180}, 'end': {'line': 61, 'col': 44, 'offset': 2193}, 'abstract_content': 'sanitizedSubs', 'propagated_value': {'svalue_start': {'line': 60, 'col': 31, 'offset': 2127}, 'svalue_end': {'line': 60, 'col': 52, 'offset': 2148}, 'svalue_abstract_content': 'entities.encode(subs)'}}}, 'message': \"Cannot determine what 'sanitizedSubs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'sanitizedSubs' is not externally controlled, or sanitize this data.\", 'metadata': {'owasp': ['A07:2017 - Cross-Site Scripting (XSS)', 'A03:2021 - Injection'], 'cwe': [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], 'references': ['https://www.developsec.com/2017/11/09/xss-in-a-script-tag/', 'https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68'], 'category': 'security', 'technology': ['javascript'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['audit'], 'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Cross-Site-Scripting (XSS)']}, 'severity': 'WARNING', 'fingerprint': '1bfff2e1b7f470182b784c49c9bca914fef89a0318c73fed8b860e47518c6f196755f42d591b7e77f5e4489fa6ffc0e76e3c94498bcc4706db76ebd2cf2ef99b_0', 'lines': \"        return utils.contains(sanitizedSubs, '</script><script>alert(`xss`)</script>') \", 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..unknown-value-with-script-tag', 'path': 'tmpf849kplb.ts', 'start': {'line': 74, 'col': 165, 'offset': 3026}, 'end': {'line': 74, 'col': 169, 'offset': 3030}, 'extra': {'metavars': {'$ANYFUNC': {'start': {'line': 55, 'col': 20, 'offset': 1794}, 'end': {'line': 55, 'col': 35, 'offset': 1809}, 'abstract_content': 'getSubsFromFile'}, '$OTHERFUNC': {'start': {'line': 74, 'col': 26, 'offset': 2887}, 'end': {'line': 74, 'col': 50, 'offset': 2911}, 'abstract_content': 'compiledTemplate.replace'}, '$UNK': {'start': {'line': 74, 'col': 165, 'offset': 3026}, 'end': {'line': 74, 'col': 169, 'offset': 3030}, 'abstract_content': 'subs', 'propagated_value': {'svalue_start': {'line': 55, 'col': 20, 'offset': 1794}, 'svalue_end': {'line': 55, 'col': 37, 'offset': 1811}, 'svalue_abstract_content': 'getSubsFromFile()'}}}, 'message': \"Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.\", 'metadata': {'owasp': ['A07:2017 - Cross-Site Scripting (XSS)', 'A03:2021 - Injection'], 'cwe': [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], 'references': ['https://www.developsec.com/2017/11/09/xss-in-a-script-tag/', 'https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68'], 'category': 'security', 'technology': ['javascript'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['audit'], 'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Cross-Site-Scripting (XSS)']}, 'severity': 'WARNING', 'fingerprint': '125db58e7ba6c12e3d60df4c1594790f312686aa33a4d8dbde18a0a4ac8642bebe41b4ef17e4046007b2712df5aa0c738301132c6cd49be737c0b6512a22674a_0', 'lines': '      compiledTemplate = compiledTemplate.replace(\\'<script id=\"subtitle\"></script>\\', \\'<script id=\"subtitle\" type=\"text/vtt\" data-label=\"English\" data-lang=\"en\">\\' + subs + \\'</script>\\')', 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmpf849kplb.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Sanitize the `subs` variable using the `html-entities` library before embedding it in the script tag.",
                "instructions": "1. Sanitize the `subs` variable before using it in the script tag. Import the `html-entities` library at the top of your file if it's not already imported:\n    ```javascript\n    const { encode } = require('html-entities');\n    ```\n\n2. Replace the line where `subs` is used in the script tag with a sanitized version:\n    ```javascript\n    compiledTemplate = compiledTemplate.replace('<script id=\"subtitle\"></script>', '<script id=\"subtitle\" type=\"text/vtt\" data-label=\"English\" data-lang=\"en\">' + encode(subs) + '</script>');\n    ```\n\nThis ensures that any potentially harmful characters in `subs` are encoded, preventing XSS attacks."
            },
            "component": null
        }
    },
    {
        "id": 72086667,
        "ref": "main",
        "syntactic_id": "35361d4355112aa5127eebf706c6ae53",
        "match_based_id": "fde17572f3af182fa82133427aa273d2a1448e390f9c14557d65eab9120e1cb862201465a25eb17cc7e5426f93bf534e942e56742437bb896fb0b32f8e25b6b0_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/videoHandler.ts#L69",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223458Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag",
        "rule_message": "Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.",
        "location": {
            "file_path": "routes/videoHandler.ts",
            "line": 69,
            "column": 165,
            "end_line": 69,
            "end_column": 169
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag",
            "message": "Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      // Sanitize the 'subs' variable to prevent XSS\n      const sanitizedSubs = entities.encode(subs);\n      compiledTemplate = compiledTemplate.replace('<script id=\"subtitle\"></script>', '<script id=\"subtitle\" type=\"text/vtt\" data-label=\"English\" data-lang=\"en\">' + sanitizedSubs + '</script>')",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..unknown-value-with-script-tag', 'path': 'tmp902ipv2n.ts', 'start': {'line': 57, 'col': 90, 'offset': 1902}, 'end': {'line': 57, 'col': 94, 'offset': 1906}, 'extra': {'metavars': {'$ANYFUNC': {'start': {'line': 55, 'col': 20, 'offset': 1794}, 'end': {'line': 55, 'col': 35, 'offset': 1809}, 'abstract_content': 'getSubsFromFile'}, '$OTHERFUNC': {'start': {'line': 57, 'col': 75, 'offset': 1887}, 'end': {'line': 57, 'col': 89, 'offset': 1901}, 'abstract_content': 'utils.contains'}, '$UNK': {'start': {'line': 57, 'col': 90, 'offset': 1902}, 'end': {'line': 57, 'col': 94, 'offset': 1906}, 'abstract_content': 'subs', 'propagated_value': {'svalue_start': {'line': 55, 'col': 20, 'offset': 1794}, 'svalue_end': {'line': 55, 'col': 37, 'offset': 1811}, 'svalue_abstract_content': 'getSubsFromFile()'}}}, 'message': \"Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.\", 'metadata': {'owasp': ['A07:2017 - Cross-Site Scripting (XSS)', 'A03:2021 - Injection'], 'cwe': [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], 'references': ['https://www.developsec.com/2017/11/09/xss-in-a-script-tag/', 'https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68'], 'category': 'security', 'technology': ['javascript'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['audit'], 'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Cross-Site-Scripting (XSS)']}, 'severity': 'WARNING', 'fingerprint': '3f1d3ce625448c1d6193ffbaf626c6e6d4c608b0238f94e6aa731dbbde39360f65c33ee82597921e525c7586b2c5a83dcac29971d0a203ae0cc57e0e5b9b7d5e_0', 'lines': \"      challengeUtils.solveIf(challenges.videoXssChallenge, () => { return utils.contains(subs, '</script><script>alert(`xss`)</script>') })\", 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..unknown-value-with-script-tag', 'path': 'tmp902ipv2n.ts', 'start': {'line': 69, 'col': 165, 'offset': 2732}, 'end': {'line': 69, 'col': 169, 'offset': 2736}, 'extra': {'metavars': {'$ANYFUNC': {'start': {'line': 55, 'col': 20, 'offset': 1794}, 'end': {'line': 55, 'col': 35, 'offset': 1809}, 'abstract_content': 'getSubsFromFile'}, '$OTHERFUNC': {'start': {'line': 69, 'col': 26, 'offset': 2593}, 'end': {'line': 69, 'col': 50, 'offset': 2617}, 'abstract_content': 'compiledTemplate.replace'}, '$UNK': {'start': {'line': 69, 'col': 165, 'offset': 2732}, 'end': {'line': 69, 'col': 169, 'offset': 2736}, 'abstract_content': 'subs', 'propagated_value': {'svalue_start': {'line': 55, 'col': 20, 'offset': 1794}, 'svalue_end': {'line': 55, 'col': 37, 'offset': 1811}, 'svalue_abstract_content': 'getSubsFromFile()'}}}, 'message': \"Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.\", 'metadata': {'owasp': ['A07:2017 - Cross-Site Scripting (XSS)', 'A03:2021 - Injection'], 'cwe': [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], 'references': ['https://www.developsec.com/2017/11/09/xss-in-a-script-tag/', 'https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68'], 'category': 'security', 'technology': ['javascript'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['audit'], 'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Cross-Site-Scripting (XSS)']}, 'severity': 'WARNING', 'fingerprint': 'cb5777d130732367a8451073fbf919056a2ab4249818c3e8f152da1e2149255fa16f6eab29b8dd4d5fd655303f8667c9d689b672b349a1b1eb800905729e2daa_0', 'lines': '      compiledTemplate = compiledTemplate.replace(\\'<script id=\"subtitle\"></script>\\', \\'<script id=\"subtitle\" type=\"text/vtt\" data-label=\"English\" data-lang=\"en\">\\' + subs + \\'</script>\\')', 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..unknown-value-with-script-tag', 'path': 'tmp902ipv2n.ts', 'start': {'line': 72, 'col': 165, 'offset': 3020}, 'end': {'line': 72, 'col': 178, 'offset': 3033}, 'extra': {'metavars': {'$ANYFUNC': {'start': {'line': 71, 'col': 29, 'offset': 2833}, 'end': {'line': 71, 'col': 44, 'offset': 2848}, 'abstract_content': 'entities.encode'}, '$OTHERFUNC': {'start': {'line': 72, 'col': 26, 'offset': 2881}, 'end': {'line': 72, 'col': 50, 'offset': 2905}, 'abstract_content': 'compiledTemplate.replace'}, '$UNK': {'start': {'line': 72, 'col': 165, 'offset': 3020}, 'end': {'line': 72, 'col': 178, 'offset': 3033}, 'abstract_content': 'sanitizedSubs', 'propagated_value': {'svalue_start': {'line': 71, 'col': 29, 'offset': 2833}, 'svalue_end': {'line': 71, 'col': 50, 'offset': 2854}, 'svalue_abstract_content': 'entities.encode(subs)'}}}, 'message': \"Cannot determine what 'sanitizedSubs' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'sanitizedSubs' is not externally controlled, or sanitize this data.\", 'metadata': {'owasp': ['A07:2017 - Cross-Site Scripting (XSS)', 'A03:2021 - Injection'], 'cwe': [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], 'references': ['https://www.developsec.com/2017/11/09/xss-in-a-script-tag/', 'https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68'], 'category': 'security', 'technology': ['javascript'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['audit'], 'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Cross-Site-Scripting (XSS)']}, 'severity': 'WARNING', 'fingerprint': '5400b210d97a785bb7305b80795096d5b1f00870287e92c5fb76e1acb1a8d9891fbcfe4c119f2ab1c955672c5864023c7abd7dbfab99058bf6925a408205eea3_0', 'lines': '      compiledTemplate = compiledTemplate.replace(\\'<script id=\"subtitle\"></script>\\', \\'<script id=\"subtitle\" type=\"text/vtt\" data-label=\"English\" data-lang=\"en\">\\' + sanitizedSubs + \\'</script>\\')', 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmp902ipv2n.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Sanitize the `subs` variable using the `sanitize-html` library before inserting it into the HTML.",
                "instructions": "1. Import the `sanitize-html` library at the top of your file with `const sanitizeHtml = require('sanitize-html');`.\n2. Sanitize the `subs` variable before using it in the `replace` method.\n    Replace `const subs = getSubsFromFile()` with `const subs = sanitizeHtml(getSubsFromFile());`.\n3. Ensure that the `sanitize-html` library is configured to allow only safe HTML tags and attributes.\n    You can customize the sanitization options if needed, but the default settings should be sufficient for this case.\n\nYour updated code should look like this:\n\n```javascript\nconst sanitizeHtml = require('sanitize-html');\n\n...\n\nconst subs = sanitizeHtml(getSubsFromFile());\n\n...\n\ncompiledTemplate = compiledTemplate.replace('<script id=\"subtitle\"></script>', '<script id=\"subtitle\" type=\"text/vtt\" data-label=\"English\" data-lang=\"en\">' + subs + '</script>');\n```\n\nThis will ensure that any potentially harmful content in the `subs` variable is sanitized before being inserted into the HTML, preventing XSS attacks."
            },
            "component": null
        }
    },
    {
        "id": 72086666,
        "ref": "main",
        "syntactic_id": "699809ecd529b064d800d7142b837151",
        "match_based_id": "40274dba9d9f5ebaf5aedf0a6285de35c91053ea94a8ea5923462ec358e8e58387f42ba5a944bd79ca6cf6fe358f58bcbb8ff53febe91bc1a85e039a0c8e4dac_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/models/index.ts#L31",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T16:22:05.223441Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.sequelize.node-sequelize-hardcoded-secret-argument.node-sequelize-hardcoded-secret-argument",
        "rule_message": "A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).",
        "location": {
            "file_path": "models/index.ts",
            "line": 31,
            "column": 58,
            "end_line": 31,
            "end_column": 66
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.node-sequelize-hardcoded-secret-argument.node-sequelize-hardcoded-secret-argument",
            "message": "A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Hard-coded Secrets"
            ],
            "cwe_names": [
                "CWE-798: Use of Hard-coded Credentials"
            ],
            "owasp_names": [
                "A07:2021 - Identification and Authentication Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "const sequelize = new Sequelize(\n  process.env.DB_NAME || 'database',\n  process.env.DB_USER || 'username',\n  process.env.DB_PASSWORD || 'password',\n  {\n    dialect: 'sqlite',\n    retry: {\n      match: [/SQLITE_BUSY/],\n      name: 'query',\n      max: 5\n    },\n    transactionType: 'IMMEDIATE',\n    storage: 'data/juiceshop.sqlite',\n    logging: false\n  }\n)",
                "explanation": "The suggested fix introduces the use of environment variables for database configuration. This change requires that the environment variables (DB_NAME, DB_USER, DB_PASSWORD) be set in the environment where the application runs. If these variables are not set, the application will fall back to the default values, but to fully utilize the fix, manual steps are needed to configure the environment."
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Use environment variables to store database credentials instead of hard-coding them.",
                "instructions": "1. Import the `dotenv` package at the top of your file to manage environment variables. If it's not installed, install it with `$ npm install dotenv`.\n\n    ```javascript\n    require('dotenv').config();\n    ```\n\n2. Create a `.env` file in the root of your project if it doesn't already exist. Add the database credentials to this file:\n\n    ```\n    DB_NAME=database\n    DB_USER=username\n    DB_PASSWORD=password\n    ```\n\n3. Update the Sequelize initialization to use the environment variables instead of hard-coded values:\n\n    ```javascript\n    const sequelize = new Sequelize(\n      process.env.DB_NAME,\n      process.env.DB_USER,\n      process.env.DB_PASSWORD,\n      {\n        dialect: 'sqlite',\n        retry: {\n          match: [/SQLITE_BUSY/],\n          name: 'query',\n          max: 5\n        },\n        transactionType: 'IMMEDIATE',\n        storage: 'data/juiceshop.sqlite',\n        logging: false\n      }\n    );\n    ```\n\nUsing environment variables helps keep sensitive information out of your source code and allows for easier configuration changes."
            },
            "component": null
        }
    },
    {
        "id": 72086664,
        "ref": "main",
        "syntactic_id": "a297457ebe524d57dfa5d7fe4d2c1d1b",
        "match_based_id": "960bdef15b384a188683a14ab9ebc796ddd5bc75b2642aa1dc86959ba51f08808cc9fa32c9221b95724debbe72eb57486030196a10b152f507ae0118f990929b_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/docker-compose.test.yml#L7",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223409Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
        "rule_message": "Service 'app' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "location": {
            "file_path": "docker-compose.test.yml",
            "line": 7,
            "column": 3,
            "end_line": 7,
            "end_column": 6
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
            "message": "Service 'app' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Improper Authorization"
            ],
            "cwe_names": [
                "CWE-732: Incorrect Permission Assignment for Critical Resource"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "tests",
                "risk": "low"
            }
        }
    },
    {
        "id": 72086663,
        "ref": "main",
        "syntactic_id": "667d042d68bc6a36458b5dbf22e13627",
        "match_based_id": "63debf450769f920206dd0550ae469561755f4c91137ceef779f4418608e72e7fc96d8f91c44c198948b90d5940ce9ec10e1731c487f706ddba1663a44fcc221_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/docker-compose.test.yml#L7",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223392Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
        "rule_message": "Service 'app' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "location": {
            "file_path": "docker-compose.test.yml",
            "line": 7,
            "column": 3,
            "end_line": 7,
            "end_column": 6
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
            "message": "Service 'app' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Improper Authorization"
            ],
            "cwe_names": [
                "CWE-732: Incorrect Permission Assignment for Critical Resource"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "tests",
                "risk": "low"
            }
        }
    },
    {
        "id": 72086662,
        "ref": "main",
        "syntactic_id": "cd644b5593a196a2ce90100466df56ba",
        "match_based_id": "9fa5d4f9ee838f516fa47960eb756794dfa777c774e9b39aded42ac966208474faecc33edc588d26a35971045219cf6f2c9258803477f4060d0b970fff080f7f_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/data/static/codefixes/restfulXssChallenge_2.ts#L59",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223376Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization",
        "rule_message": "Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.",
        "location": {
            "file_path": "data/static/codefixes/restfulXssChallenge_2.ts",
            "line": 59,
            "column": 34,
            "end_line": 59,
            "end_column": 82
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization",
            "message": "Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "low",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      const sanitizeHtml = require('sanitize-html');\n\n      encodeProductDescription (tableData: any[]) {\n        for (let i = 0; i < tableData.length; i++) {\n          tableData[i].description = sanitizeHtml(tableData[i].description);\n        }\n      }",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [{'code': 3, 'level': 'warn', 'type': ['PartialParsing', [{'path': 'tmpgdqj04nc.ts', 'start': {'line': 57, 'col': 38, 'offset': 0}, 'end': {'line': 57, 'col': 45, 'offset': 7}}, {'path': 'tmpgdqj04nc.ts', 'start': {'line': 62, 'col': 42, 'offset': 0}, 'end': {'line': 62, 'col': 49, 'offset': 7}}]], 'message': 'Syntax error at line tmpgdqj04nc.ts:57:\\n `: any[]` was unexpected', 'path': 'tmpgdqj04nc.ts', 'spans': [{'file': 'tmpgdqj04nc.ts', 'start': {'line': 57, 'col': 38, 'offset': 0}, 'end': {'line': 57, 'col': 45, 'offset': 7}}, {'file': 'tmpgdqj04nc.ts', 'start': {'line': 62, 'col': 42, 'offset': 0}, 'end': {'line': 62, 'col': 49, 'offset': 7}}]}], 'results': [{'check_id': '..detect-replaceall-sanitization', 'path': 'tmpgdqj04nc.ts', 'start': {'line': 59, 'col': 34, 'offset': 2022}, 'end': {'line': 59, 'col': 82, 'offset': 2070}, 'extra': {'metavars': {'$1': {'start': {'line': 1, 'col': 1, 'offset': 0}, 'end': {'line': 1, 'col': 8, 'offset': 7}, 'abstract_content': 'replace'}, '$STR': {'start': {'line': 59, 'col': 34, 'offset': 2022}, 'end': {'line': 59, 'col': 58, 'offset': 2046}, 'abstract_content': 'tableData[i].description'}, '$FUNC': {'start': {'line': 59, 'col': 59, 'offset': 2047}, 'end': {'line': 59, 'col': 69, 'offset': 2057}, 'abstract_content': 'replaceAll'}}, 'message': \"Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.\", 'metadata': {'category': 'security', 'technology': ['javascript', 'typescript'], 'owasp': ['A07:2017 - Cross-Site Scripting (XSS)', 'A03:2021 - Injection'], 'cwe': [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], 'references': ['https://www.npmjs.com/package/dompurify', 'https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['audit'], 'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Cross-Site-Scripting (XSS)']}, 'severity': 'INFO', 'fingerprint': '0a51b60c0ca6c04bd14ac46498713d50bce2dc13e519e8793c341d9107fbd8d5503bb3cc0b508f5c095d43928622710bd6b0db070042aa61df0dbd5ea0b59e6c_0', 'lines': \"      tableData[i].description = tableData[i].description.replaceAll('<', '&lt;').replaceAll('>', '&gt;')\", 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..detect-replaceall-sanitization', 'path': 'tmpgdqj04nc.ts', 'start': {'line': 59, 'col': 34, 'offset': 2022}, 'end': {'line': 59, 'col': 106, 'offset': 2094}, 'extra': {'metavars': {'$1': {'start': {'line': 1, 'col': 1, 'offset': 0}, 'end': {'line': 1, 'col': 8, 'offset': 7}, 'abstract_content': 'replace'}, '$STR': {'start': {'line': 59, 'col': 34, 'offset': 2022}, 'end': {'line': 59, 'col': 82, 'offset': 2070}, 'abstract_content': \"tableData[i].description.replaceAll('<''&lt;')\"}, '$FUNC': {'start': {'line': 59, 'col': 83, 'offset': 2071}, 'end': {'line': 59, 'col': 93, 'offset': 2081}, 'abstract_content': 'replaceAll'}}, 'message': \"Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description.replaceAll('<', '&lt;')`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.\", 'metadata': {'category': 'security', 'technology': ['javascript', 'typescript'], 'owasp': ['A07:2017 - Cross-Site Scripting (XSS)', 'A03:2021 - Injection'], 'cwe': [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], 'references': ['https://www.npmjs.com/package/dompurify', 'https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['audit'], 'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Cross-Site-Scripting (XSS)']}, 'severity': 'INFO', 'fingerprint': '639c2d610505602b8d98fa4e49ee789f205de6badacc24a63af96ef5b2423d7075c9b024d338b678ebb0c3c4339bd51cb1dbf91b35a17a7eae55ce9c70246853_0', 'lines': \"      tableData[i].description = tableData[i].description.replaceAll('<', '&lt;').replaceAll('>', '&gt;')\", 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmpgdqj04nc.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Use the `sanitize-html` library to sanitize the `description` field instead of manually escaping HTML characters.",
                "instructions": "1. Import the `sanitize-html` library at the top of your file with `import sanitizeHtml from 'sanitize-html';`.\n2. Replace the manual HTML escaping in the `encodeProductDescription` function with a call to `sanitizeHtml`.\n    ```javascript\n    encodeProductDescription(tableData: any[]) {\n      for (let i = 0; i < tableData.length; i++) {\n        tableData[i].description = sanitizeHtml(tableData[i].description);\n      }\n    }\n    ```\n\nUsing `sanitize-html` ensures that the input is properly sanitized and prevents various injection attacks."
            },
            "component": null
        }
    },
    {
        "id": 72086661,
        "ref": "main",
        "syntactic_id": "235c45ac2587ae268cd2e101ea27ba1e",
        "match_based_id": "95c70d4c6aa16c60d8380102c20b4dfdcb1213882eebed408ec0dc18e2047eaf29d079d517b1f509b287865a7f9587d7b9b43f02a0a5cf7d584a252f122da7e6_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/data/static/codefixes/restfulXssChallenge_2.ts#L59",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223359Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization",
        "rule_message": "Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description.replaceAll('<', '&lt;')`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.",
        "location": {
            "file_path": "data/static/codefixes/restfulXssChallenge_2.ts",
            "line": 59,
            "column": 34,
            "end_line": 59,
            "end_column": 106
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization",
            "message": "Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description.replaceAll('<', '&lt;')`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "low",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      const sanitizeHtml = require('sanitize-html');\n\n      encodeProductDescription (tableData: any[]) {\n        for (let i = 0; i < tableData.length; i++) {\n          tableData[i].description = sanitizeHtml(tableData[i].description);\n        }\n      }",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [{'code': 3, 'level': 'warn', 'type': ['PartialParsing', [{'path': 'tmp99ksfsuw.ts', 'start': {'line': 57, 'col': 38, 'offset': 0}, 'end': {'line': 57, 'col': 45, 'offset': 7}}, {'path': 'tmp99ksfsuw.ts', 'start': {'line': 62, 'col': 42, 'offset': 0}, 'end': {'line': 62, 'col': 49, 'offset': 7}}]], 'message': 'Syntax error at line tmp99ksfsuw.ts:57:\\n `: any[]` was unexpected', 'path': 'tmp99ksfsuw.ts', 'spans': [{'file': 'tmp99ksfsuw.ts', 'start': {'line': 57, 'col': 38, 'offset': 0}, 'end': {'line': 57, 'col': 45, 'offset': 7}}, {'file': 'tmp99ksfsuw.ts', 'start': {'line': 62, 'col': 42, 'offset': 0}, 'end': {'line': 62, 'col': 49, 'offset': 7}}]}], 'results': [{'check_id': '..detect-replaceall-sanitization', 'path': 'tmp99ksfsuw.ts', 'start': {'line': 59, 'col': 34, 'offset': 2022}, 'end': {'line': 59, 'col': 82, 'offset': 2070}, 'extra': {'metavars': {'$1': {'start': {'line': 1, 'col': 1, 'offset': 0}, 'end': {'line': 1, 'col': 8, 'offset': 7}, 'abstract_content': 'replace'}, '$STR': {'start': {'line': 59, 'col': 34, 'offset': 2022}, 'end': {'line': 59, 'col': 58, 'offset': 2046}, 'abstract_content': 'tableData[i].description'}, '$FUNC': {'start': {'line': 59, 'col': 59, 'offset': 2047}, 'end': {'line': 59, 'col': 69, 'offset': 2057}, 'abstract_content': 'replaceAll'}}, 'message': \"Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.\", 'metadata': {'category': 'security', 'technology': ['javascript', 'typescript'], 'owasp': ['A07:2017 - Cross-Site Scripting (XSS)', 'A03:2021 - Injection'], 'cwe': [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], 'references': ['https://www.npmjs.com/package/dompurify', 'https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['audit'], 'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Cross-Site-Scripting (XSS)']}, 'severity': 'INFO', 'fingerprint': '26eae243af5d3ab495c3a85a68b3cfb9c28d1f99f6213ce4b683c3391c4db9ec0cac6b3d993cebe617b4bd61df34a548c72e91f386fcf3dc735a8e357c0126a9_0', 'lines': \"      tableData[i].description = tableData[i].description.replaceAll('<', '&lt;').replaceAll('>', '&gt;')\", 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}, {'check_id': '..detect-replaceall-sanitization', 'path': 'tmp99ksfsuw.ts', 'start': {'line': 59, 'col': 34, 'offset': 2022}, 'end': {'line': 59, 'col': 106, 'offset': 2094}, 'extra': {'metavars': {'$1': {'start': {'line': 1, 'col': 1, 'offset': 0}, 'end': {'line': 1, 'col': 8, 'offset': 7}, 'abstract_content': 'replace'}, '$STR': {'start': {'line': 59, 'col': 34, 'offset': 2022}, 'end': {'line': 59, 'col': 82, 'offset': 2070}, 'abstract_content': \"tableData[i].description.replaceAll('<''&lt;')\"}, '$FUNC': {'start': {'line': 59, 'col': 83, 'offset': 2071}, 'end': {'line': 59, 'col': 93, 'offset': 2081}, 'abstract_content': 'replaceAll'}}, 'message': \"Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description.replaceAll('<', '&lt;')`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.\", 'metadata': {'category': 'security', 'technology': ['javascript', 'typescript'], 'owasp': ['A07:2017 - Cross-Site Scripting (XSS)', 'A03:2021 - Injection'], 'cwe': [\"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"], 'references': ['https://www.npmjs.com/package/dompurify', 'https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html'], 'cwe2022-top25': True, 'cwe2021-top25': True, 'subcategory': ['audit'], 'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Cross-Site-Scripting (XSS)']}, 'severity': 'INFO', 'fingerprint': '0df8974daeb02829a185b6ce775c0a952ad0c4f3267b18d6a50699dde1005c809f67830e25e0af2dcba22f14399078fc209460797ddb6bfcb245eb47af92454b_0', 'lines': \"      tableData[i].description = tableData[i].description.replaceAll('<', '&lt;').replaceAll('>', '&gt;')\", 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmp99ksfsuw.ts']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Use the `sanitize-html` library to sanitize the `description` field instead of manually escaping HTML characters.",
                "instructions": "1. Import the `sanitize-html` library at the top of your file with `const sanitizeHtml = require('sanitize-html');`.\n2. Replace the manual HTML escaping in the `encodeProductDescription` function with a call to `sanitizeHtml`.\n\nHere is the updated function:\n\n```javascript\nencodeProductDescription(tableData) {\n  for (let i = 0; i < tableData.length; i++) {\n    tableData[i].description = sanitizeHtml(tableData[i].description);\n  }\n}\n```\n\nUsing `sanitize-html` ensures that the input is properly sanitized and reduces the risk of missing any edge cases."
            },
            "component": null
        }
    },
    {
        "id": 72086660,
        "ref": "main",
        "syntactic_id": "0d065cea0929080ca18f9ad69312f30e",
        "match_based_id": "7338534e3ae4610be8b37f2ee262821ad403400990016d6a0bc165186cee76b5b94b45ddc93c344c66852c320ed5c67c5b43a1a65fca831ae6d09de67c61c350_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/server.ts#L91",
        "first_seen_scan_id": 30007189,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223321Z",
        "relevant_since": "2024-08-04T07:09:17.558640Z",
        "rule_name": "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
        "rule_message": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.",
        "location": {
            "file_path": "server.ts",
            "line": 91,
            "column": 7,
            "end_line": 91,
            "end_column": 22
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
            "message": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site Request Forgery (CSRF)"
            ],
            "cwe_names": [
                "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp_names": [
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "low",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72108839,
        "ref": "refs/pull/34/merge",
        "syntactic_id": "0027b646230c95ec62f4a0fee37ad2f9",
        "match_based_id": "307fa5554db111801064907b4a3921b5da3aa6c51516c1c1f62d02ec402f05796797d0ad41642f76296c73c86ae91ec24b9e17c26e7befe30ce08007210b36ad_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/fb1bb366e5f1729f0c67a809a5e877e8e5475cdb/src/assistant-fix-custom-message.java#L14",
        "first_seen_scan_id": 30017483,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T23:36:59.910879Z",
        "relevant_since": "2024-07-07T23:36:59.908481Z",
        "rule_name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
        "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
        "location": {
            "file_path": "src/assistant-fix-custom-message.java",
            "line": 14,
            "column": 9,
            "end_line": 14,
            "end_column": 37
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
            ],
            "owasp_names": [
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "tests",
                "risk": "low"
            }
        }
    },
    {
        "id": 72108838,
        "ref": "refs/pull/34/merge",
        "syntactic_id": "2ad8f3bd11b367fe57c95a2f03afa0d8",
        "match_based_id": "ff70ff5b50b4cc80bbff4a32a39668f765259c447f23fea3dd628d1636f28b997f18f5c328b9d4cd6c452714de2ba7f117d4aed54d271ebf7a97a9685138ef02_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/fb1bb366e5f1729f0c67a809a5e877e8e5475cdb/src/assistant-fix-custom-message.java#L14",
        "first_seen_scan_id": 30017483,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T23:36:59.910842Z",
        "relevant_since": "2024-07-07T23:36:59.908473Z",
        "rule_name": "semgrep_demo.crlf-injection-logs-deepsemgrep-javaorg-copy",
        "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content. Please use the Jsoup.clean() function to sanitize data.",
        "location": {
            "file_path": "src/assistant-fix-custom-message.java",
            "line": 14,
            "column": 9,
            "end_line": 14,
            "end_column": 37
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "semgrep_demo.crlf-injection-logs-deepsemgrep-javaorg-copy",
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content. Please use the Jsoup.clean() function to sanitize data.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
            ],
            "owasp_names": [
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "        String sanitizedParam = Jsoup.clean(param, Whitelist.none());\n        log.info(\"foo\" + sanitizedParam + \"bar\");",
                "explanation": "The fix uses Jsoup to sanitize the input parameter, which should address the issue of logging unsanitized input. However, there is a small chance that the sanitization might not cover all edge cases or that additional context-specific sanitization might be needed. The code itself is syntactically correct and does not require changes to other parts of the codebase or infrastructure."
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Sanitize the `param` variable using `Jsoup.clean` before logging it.",
                "instructions": "1. Import `sanitize-html` at the top of your file:\n    ```java\n    import org.jsoup.Jsoup;\n    ```\n\n2. Sanitize the `param` variable using `Jsoup.clean` before logging it:\n    ```java\n    String sanitizedParam = Jsoup.clean(param, Whitelist.none());\n    ```\n\n3. Update the logging statement to use the sanitized parameter:\n    ```java\n    log.info(\"foo\" + sanitizedParam + \"bar\");\n    ```\n\nThis will ensure that any potentially malicious content in the `param` variable is neutralized before being logged."
            },
            "component": {
                "tag": "tests",
                "risk": "low"
            }
        }
    },
    {
        "id": 72108837,
        "ref": "refs/pull/34/merge",
        "syntactic_id": "7bb7faa454ceaf43c2327e322afca664",
        "match_based_id": "d5bd109ed1e6644652cc611ddf481429ab326102d94401806a161c3dd765895bd0e0202f8f2dd524f58f4f0a3942c416eb8e5ae01e3f1e22b1f0920c75f49796_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/fb1bb366e5f1729f0c67a809a5e877e8e5475cdb/src/assistant-fix-custom-message.java#L13",
        "first_seen_scan_id": 30017483,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T23:36:59.910782Z",
        "relevant_since": "2024-07-07T23:36:59.908454Z",
        "rule_name": "java.lang.security.audit.crlf-injection-logs.crlf-injection-logs",
        "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
        "location": {
            "file_path": "src/assistant-fix-custom-message.java",
            "line": 13,
            "column": 9,
            "end_line": 14,
            "end_column": 37
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.crlf-injection-logs.crlf-injection-logs",
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
            ],
            "owasp_names": [
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "tests",
                "risk": "low"
            }
        }
    },
    {
        "id": 72108831,
        "ref": "refs/pull/33/merge",
        "syntactic_id": "dd5c739c5e006ce1847129057da6b001",
        "match_based_id": "82a09ae6b8133bb9055387f712c2c4b54da13355678c2981755eb56a33d34f176f18c43d63c10158f4e24d63a25940daf0dcc3dbfc0d3d18c06c055185c09c4b_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/21a851d3b21505113cb9bd08eafb7daa50531383/src/assistant-fix-sqli-sequelize.ts#L5",
        "first_seen_scan_id": 30017482,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T23:36:49.608217Z",
        "relevant_since": "2024-07-07T23:36:49.605932Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "src/assistant-fix-sqli-sequelize.ts",
            "line": 5,
            "column": 76,
            "end_line": 5,
            "end_column": 84
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      models.sequelize.query(\n        \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\",\n        {\n          replacements: { criteria: `%${criteria}%` },\n          type: models.sequelize.QueryTypes.SELECT\n        }\n      )",
                "explanation": "The fix addresses the SQL injection vulnerability by using parameterized queries, which is the main issue. However, there is a small chance that the criteria handling logic might still cause unexpected behavior if not thoroughly tested. Additionally, if `models.sequelize.QueryTypes.SELECT` is not correctly imported or defined elsewhere in the codebase, it might require additional code changes."
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Use Sequelize parameterized queries instead of string concatenation.",
                "instructions": "1. Change the SQL query string to use parameterized queries. Replace the dynamic parts with placeholders (`?`).\n\n    ```javascript\n    const query = \"SELECT * FROM Products WHERE ((name LIKE ? OR description LIKE ?) AND deletedAt IS NULL) ORDER BY name\";\n    ```\n\n2. Pass the dynamic values as an array in the second parameter of the `sequelize.query` method.\n\n    ```javascript\n    const replacements = [`%${criteria}%`, `%${criteria}%`];\n    ```\n\n3. Update the `sequelize.query` call to use the parameterized query and replacements.\n\n    ```javascript\n    models.sequelize.query(query, { replacements })\n    ```\n\n4. Combine the changes in the `searchProducts` function.\n\n    ```javascript\n    module.exports = function searchProducts () {\n        return (req: Request, res: Response, next: NextFunction) => {\n            let criteria: any = req.query.q === 'undefined' ? '' : req.query.q ?? ''\n            criteria = (criteria.length <= 200) ? criteria : criteria.substring(0, 200)\n            const query = \"SELECT * FROM Products WHERE ((name LIKE ? OR description LIKE ?) AND deletedAt IS NULL) ORDER BY name\";\n            const replacements = [`%${criteria}%`, `%${criteria}%`];\n            models.sequelize.query(query, { replacements })\n                .then(([products]: any) => {\n                    const dataString = JSON.stringify(products)\n                    for (let i = 0; i < products.length; i++) {\n                        products[i].name = req.__(products[i].name)\n                        products[i].description = req.__(products[i].description)\n                    }\n                    res.json(utils.queryResultToJson(products))\n                }).catch((error: ErrorWithParent) => {\n                    next(error.parent)\n                })\n        }\n    }\n    ```\n\nUsing parameterized queries helps prevent SQL injection by ensuring that user input is treated as data rather than executable code."
            },
            "component": null
        }
    },
    {
        "id": 72108830,
        "ref": "refs/pull/33/merge",
        "syntactic_id": "5569d50d838914ada08b433d0760d09e",
        "match_based_id": "fe0d67be15ca767b9ad78f6e5d48550943d3be6481349c95a7d7d05fec4411a3d138af01320e287b203565cedd59844742f8cbc134aef23123f0f1ca0ba45e87_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/21a851d3b21505113cb9bd08eafb7daa50531383/src/assistant-fix-sqli-sequelize.ts#L5",
        "first_seen_scan_id": 30017482,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T23:36:49.608185Z",
        "relevant_since": "2024-07-07T23:36:49.605922Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "src/assistant-fix-sqli-sequelize.ts",
            "line": 5,
            "column": 30,
            "end_line": 5,
            "end_column": 164
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      models.sequelize.query(\n        \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\",\n        {\n          replacements: { criteria: `%${criteria}%` },\n          type: models.sequelize.QueryTypes.SELECT\n        }\n      )",
                "explanation": "The fix addresses the SQL injection vulnerability by using parameterized queries, which is a correct approach. However, there is a small chance that the issue might still be present if there are other parts of the code that handle `criteria` improperly. Additionally, the rest of the code should be reviewed to ensure that it correctly handles the new query format and the use of replacements."
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Use Sequelize parameterized queries instead of string concatenation.",
                "instructions": "1. Change the query string to use parameterized query syntax by replacing the dynamic values with placeholders `:criteria`.\n    ```typescript\n    const query = \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\";\n    ```\n\n2. Update the `sequelize.query` method to pass the dynamic value in an options object.\n    ```typescript\n    models.sequelize.query(query, {\n      replacements: { criteria: `%${criteria}%` }\n    })\n    ```\n\n3. Replace the original query execution line with the updated parameterized query.\n    ```typescript\n    models.sequelize.query(query, {\n      replacements: { criteria: `%${criteria}%` }\n    })\n    .then(([products]: any) => {\n      const dataString = JSON.stringify(products)\n      for (let i = 0; i < products.length; i++) {\n        products[i].name = req.__(products[i].name)\n        products[i].description = req.__(products[i].description)\n      }\n      res.json(utils.queryResultToJson(products))\n    }).catch((error: ErrorWithParent) => {\n      next(error.parent)\n    })\n    ```\n\nUsing parameterized queries helps prevent SQL injection by ensuring that user input is properly escaped before being included in the SQL statement."
            },
            "component": null
        }
    },
    {
        "id": 72086713,
        "ref": "main",
        "syntactic_id": "7e25a474009aa682146e0e783a58248b",
        "match_based_id": "d767295763a82a60971e44a22f9c330f2c0fe60d25adcc5ffdbd97ab9c4aef633f2ce0fd2f26d8360feb34efdbca5d4ba73cb767d716849d1ed087b925bbbd49_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/server.ts#L241",
        "first_seen_scan_id": 30007189,
        "state": "fixed",
        "triage_state": "untriaged",
        "status": "fixed",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224174Z",
        "relevant_since": "2024-07-07T16:22:05.196003Z",
        "rule_name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "rule_message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
        "location": {
            "file_path": "server.ts",
            "line": 241,
            "column": 3,
            "end_line": 241,
            "end_column": 76
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-07-28T07:01:35.214869Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
            "message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Mishandled Sensitive Information"
            ],
            "cwe_names": [
                "CWE-548: Exposure of Information Through Directory Listing"
            ],
            "owasp_names": [
                "A06:2017 - Security Misconfiguration",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086712,
        "ref": "main",
        "syntactic_id": "d092fe01e8e24ae85da44ef47eae1b08",
        "match_based_id": "d767295763a82a60971e44a22f9c330f2c0fe60d25adcc5ffdbd97ab9c4aef633f2ce0fd2f26d8360feb34efdbca5d4ba73cb767d716849d1ed087b925bbbd49_1",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/server.ts#L246",
        "first_seen_scan_id": 30007189,
        "state": "fixed",
        "triage_state": "untriaged",
        "status": "fixed",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224159Z",
        "relevant_since": "2024-07-07T16:22:05.195999Z",
        "rule_name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "rule_message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
        "location": {
            "file_path": "server.ts",
            "line": 246,
            "column": 3,
            "end_line": 246,
            "end_column": 115
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-07-28T07:01:35.214924Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
            "message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Mishandled Sensitive Information"
            ],
            "cwe_names": [
                "CWE-548: Exposure of Information Through Directory Listing"
            ],
            "owasp_names": [
                "A06:2017 - Security Misconfiguration",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086711,
        "ref": "main",
        "syntactic_id": "3724c6535423c5d95d1d5f7bb9b16a7c",
        "match_based_id": "d767295763a82a60971e44a22f9c330f2c0fe60d25adcc5ffdbd97ab9c4aef633f2ce0fd2f26d8360feb34efdbca5d4ba73cb767d716849d1ed087b925bbbd49_2",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/server.ts#L250",
        "first_seen_scan_id": 30007189,
        "state": "fixed",
        "triage_state": "untriaged",
        "status": "fixed",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224143Z",
        "relevant_since": "2024-07-07T16:22:05.195995Z",
        "rule_name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
        "rule_message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
        "location": {
            "file_path": "server.ts",
            "line": 250,
            "column": 3,
            "end_line": 250,
            "end_column": 103
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-07-28T07:01:35.214908Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing",
            "message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Mishandled Sensitive Information"
            ],
            "cwe_names": [
                "CWE-548: Exposure of Information Through Directory Listing"
            ],
            "owasp_names": [
                "A06:2017 - Security Misconfiguration",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086704,
        "ref": "main",
        "syntactic_id": "6a059a555fa84da3065b74203d718600",
        "match_based_id": "d5ae312751ee13bc0372855173412f65629a7e928b35ee0745fbefa1fd7db2f39b2d1cea32f530743ddba3f057749e4930e5831e6b057b64b42ef78c8454cd80_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/fileServer.ts#L33",
        "first_seen_scan_id": 30007189,
        "state": "fixed",
        "triage_state": "untriaged",
        "status": "fixed",
        "confidence": "medium",
        "created_at": "2024-07-07T16:22:05.224037Z",
        "relevant_since": "2024-07-07T16:22:05.195966Z",
        "rule_name": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
        "rule_message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
        "location": {
            "file_path": "routes/fileServer.ts",
            "line": 33,
            "column": 41,
            "end_line": 33,
            "end_column": 45
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-07-21T07:21:13.412743Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal",
            "message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72086679,
        "ref": "main",
        "syntactic_id": "10fea2c100c9a29a1cbd4d90491ab327",
        "match_based_id": "cca6b62873b56b2aed4314fc606de39e1fd78c42d4e25e00108b54df75e6131090e041a312d4283a9a6f9509f350001b12c588510cfdc3d1411e2863295868d3_0",
        "repository": {
            "name": "Semgrep-Demo/js-app",
            "url": "https://github.com/Semgrep-Demo/js-app"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/js-app/blob/0b986731902173b0f90f3cd21da9b71d9b5c96ae/routes/fileServer.ts#L33",
        "first_seen_scan_id": 30007189,
        "state": "fixed",
        "triage_state": "untriaged",
        "status": "fixed",
        "confidence": "low",
        "created_at": "2024-07-07T16:22:05.223649Z",
        "relevant_since": "2024-07-07T16:22:05.195867Z",
        "rule_name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
        "rule_message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "location": {
            "file_path": "routes/fileServer.ts",
            "line": 33,
            "column": 41,
            "end_line": 33,
            "end_column": 45
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-07-21T07:21:13.412703Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
            "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Path Traversal"
            ],
            "cwe_names": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp_names": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67030455,
        "ref": "master",
        "syntactic_id": "c96cfe957a5d0e8aaf31d7922476c148",
        "match_based_id": "732651a77fd1b90dede6c15969dfe387ede8e5c0fafed87878dacb865f96e6982a0df0107c961fe134ecf9d2b775d596fd6e752f96de07f8c98a33946ef93440_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/newnewnenwbadcookie.java#L23",
        "first_seen_scan_id": 26004877,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T14:21:28.601835Z",
        "relevant_since": "2024-05-22T14:21:28.598991Z",
        "rule_name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
        "rule_message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
        "location": {
            "file_path": "vulns/newnewnenwbadcookie.java",
            "line": 23,
            "column": 9,
            "end_line": 23,
            "end_column": 33
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cookie Security"
            ],
            "cwe_names": [
                "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67030454,
        "ref": "master",
        "syntactic_id": "ff5348711dadf0dce96a93189109761c",
        "match_based_id": "857caa26dda3e1f1e1d049442bfc5e7bc2e8a9d75a834dc0cb755f463cab9e758ea8042cd6204c7345cb96f488bcfc99202e5714ee0eccb36b7ed0add7eb3e5c_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/newnewnenwbadcookie.java#L23",
        "first_seen_scan_id": 26004877,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T14:21:28.601799Z",
        "relevant_since": "2024-05-22T14:21:28.598978Z",
        "rule_name": "java.servlets.security.audit.cookie-secure-flag-false.cookie-secure-flag-false",
        "rule_message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
        "location": {
            "file_path": "vulns/newnewnenwbadcookie.java",
            "line": 23,
            "column": 9,
            "end_line": 23,
            "end_column": 33
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.servlets.security.audit.cookie-secure-flag-false.cookie-secure-flag-false",
            "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cookie Security"
            ],
            "cwe_names": [
                "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010747,
        "ref": "master",
        "syntactic_id": "8447d5ac828db5b199f1f8428d48a79b",
        "match_based_id": "0d6c8848299280b7ac6617dcc57730fcdd574bcfeec57d0b5c821dab78933948be85f1f57ade6667a8a561381dba4eb6efbeed5df2c55ad12397ee166321b0c3_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/Cowsay.java#L11",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.919653Z",
        "relevant_since": "2024-05-22T10:36:17.897795Z",
        "rule_name": "java.lang.security.audit.command-injection-process-builder.command-injection-process-builder",
        "rule_message": "A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/Cowsay.java",
            "line": 11,
            "column": 5,
            "end_line": 11,
            "end_column": 46
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.command-injection-process-builder.command-injection-process-builder",
            "message": "A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Command Injection"
            ],
            "cwe_names": [
                "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010746,
        "ref": "master",
        "syntactic_id": "2dce8d69a79267bad02d80a884946681",
        "match_based_id": "19398dbff1340c1eb38c4a7e1aebdb71f97b5f420f01d4a4012173c7ac502e574c0478e800db88e44fe3ded8fa8b11254847890d1258aaf961f4407fd4c7147f_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/User.java#L49",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919635Z",
        "relevant_since": "2024-05-22T10:36:17.897791Z",
        "rule_name": "java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep",
        "rule_message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/User.java",
            "line": 49,
            "column": 22,
            "end_line": 49,
            "end_column": 46
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep",
            "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010745,
        "ref": "master",
        "syntactic_id": "1f68396be32fa96ba59c8717bd854051",
        "match_based_id": "1e86be66c80cb8c5a41b827882aa6a44b16ec87ee692e5cbaf890efb92cc59428a2f15f093048bd3eba8fa39806af6761e3f54f8c406b223592b5136fb212fd7_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/User.java#L49",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919618Z",
        "relevant_since": "2024-05-22T10:36:17.897788Z",
        "rule_name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
        "rule_message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/User.java",
            "line": 49,
            "column": 22,
            "end_line": 49,
            "end_column": 46
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010744,
        "ref": "master",
        "syntactic_id": "c3b682b6899708d088d7232ba50a7140",
        "match_based_id": "6a5eb52667bd54ca56ad19cc8e7973b8393f3918ac94fd04ded0cbb1d909e8a3a2c5781e4b8b3546f890b87d10406b019e533bee1e85d23479db3ee4d53009b3_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/Cowsay.java#L11",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919602Z",
        "relevant_since": "2024-05-22T10:36:17.897784Z",
        "rule_name": "java.spring.command-injection.tainted-system-command.tainted-system-command",
        "rule_message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands. For more information, see: [Java command injection prevention](https://semgrep.dev/docs/cheat-sheets/java-command-injection/)",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/Cowsay.java",
            "line": 11,
            "column": 42,
            "end_line": 11,
            "end_column": 45
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.spring.command-injection.tainted-system-command.tainted-system-command",
            "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands. For more information, see: [Java command injection prevention](https://semgrep.dev/docs/cheat-sheets/java-command-injection/)",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Command Injection"
            ],
            "cwe_names": [
                "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010743,
        "ref": "master",
        "syntactic_id": "9c1af46eede01268daba02d7245f152b",
        "match_based_id": "17d6be7359d384ed0104aee17a354e4c97d9e37644e832bcb60e496b35405ebb43a1a2902bc8c4d4bac775e26b36a582630e8c4b4be3423dee3884c62affd23f_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/User.java#L47",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919587Z",
        "relevant_since": "2024-05-22T10:36:17.897780Z",
        "rule_name": "java.spring.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/User.java",
            "line": 47,
            "column": 22,
            "end_line": 47,
            "end_column": 81
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.spring.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010742,
        "ref": "master",
        "syntactic_id": "763123b6076dd45e71b8f9aa5a793bfa",
        "match_based_id": "57c2a8715d848b77ce9004e24afe5d3b6c6c1f4452d8938f362d525e2d862c55a822f80aff9a0be21973112c4fc92d13d33bffece04a3a5633a8a5aefda61071_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/LinkLister.java#L26",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919572Z",
        "relevant_since": "2024-05-22T10:36:17.897776Z",
        "rule_name": "java.spring.security.injection.tainted-url-host.tainted-url-host",
        "rule_message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/LinkLister.java",
            "line": 26,
            "column": 17,
            "end_line": 26,
            "end_column": 29
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.spring.security.injection.tainted-url-host.tainted-url-host",
            "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Server-Side Request Forgery (SSRF)"
            ],
            "cwe_names": [
                "CWE-918: Server-Side Request Forgery (SSRF)"
            ],
            "owasp_names": [
                "A10:2021 - Server-Side Request Forgery (SSRF)"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010741,
        "ref": "master",
        "syntactic_id": "817af661027582706d465389e0eb44a9",
        "match_based_id": "ec3650c3a9237b17faf703bdf0c479a57ce979196a78af0365591b17dd190be73ffef46c904fecae27543fcfeb847c0c14a1c2dd9b5c3efaf70272090ee6ab87_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/LinkLister.java#L16",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919556Z",
        "relevant_since": "2024-05-22T10:36:17.897772Z",
        "rule_name": "java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add",
        "rule_message": "Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/LinkLister.java",
            "line": 16,
            "column": 34,
            "end_line": 16,
            "end_column": 37
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add",
            "message": "Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Server-Side Request Forgery (SSRF)"
            ],
            "cwe_names": [
                "CWE-918: Server-Side Request Forgery (SSRF)"
            ],
            "owasp_names": [
                "A10:2021 - Server-Side Request Forgery (SSRF)"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010740,
        "ref": "master",
        "syntactic_id": "b03cb03f2565a2ada2b16415817c3d53",
        "match_based_id": "226625db288efdc0aee0b370a801bb3885d0283cb7b2bb8a21e45e1c7600b808d83b22c824a087afd24fd1814ca739421da4a3e3f827c67780fd77146c5bf444_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L35",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919541Z",
        "relevant_since": "2024-05-22T10:36:17.897768Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "sqli.js",
            "line": 35,
            "column": 66,
            "end_line": 35,
            "end_column": 85
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010739,
        "ref": "master",
        "syntactic_id": "898021ce153cde29a089adb3192a3d1b",
        "match_based_id": "426eff64125295ef892ba6e5833dd5bd972b253e337a511daac8abd6bc90b244bd74076c059d5a911b13f27158ac78e115f9c72660b5b6e5b08715ba453cca69_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L38",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919526Z",
        "relevant_since": "2024-05-22T10:36:17.897764Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "sqli.js",
            "line": 38,
            "column": 68,
            "end_line": 38,
            "end_column": 87
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010738,
        "ref": "master",
        "syntactic_id": "cfaec40648a47057eee29d16e6a77d2c",
        "match_based_id": "bbe15e4248aedc63ff4531a6ca0dbe5b2783838c9514e58faf95914fa1d7ceeb19c1c140d026d2eca8c4c43b6033e5fa9ad952aec54b8cd9b19a8485a043e508_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L41",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919510Z",
        "relevant_since": "2024-05-22T10:36:17.897760Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "sqli.js",
            "line": 41,
            "column": 68,
            "end_line": 41,
            "end_column": 87
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010737,
        "ref": "master",
        "syntactic_id": "114b0797fae7b4efbb198809c3d698d8",
        "match_based_id": "8f95c0ed5c232ae709e1bee8cb96276eead76eadc9fdef331c4b56be5ee542ccdf79fc925e78afa30c7eb1f045c3f1aaff771b1189c271c055d292c4f630d6e6_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L44",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919495Z",
        "relevant_since": "2024-05-22T10:36:17.897757Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "sqli.js",
            "line": 44,
            "column": 68,
            "end_line": 44,
            "end_column": 87
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010736,
        "ref": "master",
        "syntactic_id": "a392aa7a2ad27b2d02c0e86cc1fcfbb8",
        "match_based_id": "d4491632ce2ff33b92bceac86fbb8e5d833d2ed16b1c89bcc6ff270abe245f5fe30b852107b4520cceb9d1d5d8a413f0f369bd791351368cb6399883fa00d8ce_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L47",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919480Z",
        "relevant_since": "2024-05-22T10:36:17.897753Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "sqli.js",
            "line": 47,
            "column": 68,
            "end_line": 47,
            "end_column": 87
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010735,
        "ref": "master",
        "syntactic_id": "4c08c7ebaf6547fc49824695c8041f9a",
        "match_based_id": "5178efb1d484428a9c1410530dc2b881e3be3713aa4f9135f2ed39aebb37042a36f27589a32282b6ee65ed27dde1151ba621475960117d4217cf3d03065313cb_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L50",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919464Z",
        "relevant_since": "2024-05-22T10:36:17.897749Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "sqli.js",
            "line": 50,
            "column": 68,
            "end_line": 50,
            "end_column": 87
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010734,
        "ref": "master",
        "syntactic_id": "72ee6fd7a452324b34b641f807117fe9",
        "match_based_id": "3f1a1b1e398c77a6139b5a6faf0905a4a8dfd06129a7f6fc90ac0ff293d0d53b4f68ef9befe136febfe646710196922010c508b5c358469a119d26107682ee6f_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L53",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919449Z",
        "relevant_since": "2024-05-22T10:36:17.897745Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "sqli.js",
            "line": 53,
            "column": 68,
            "end_line": 53,
            "end_column": 87
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010733,
        "ref": "master",
        "syntactic_id": "224393d4f645571e8ea790c4706218b7",
        "match_based_id": "65b20342fce80780319f4a9313697c339aa832ff8453f0e62b88057708a5b278c7566283aec16610fc2f0cd7e34d2c9614dca52579f38d1e2859c6e37470f0da_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/v-sqli.js#L34",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919434Z",
        "relevant_since": "2024-05-22T10:36:17.897741Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "v-sqli.js",
            "line": 34,
            "column": 68,
            "end_line": 34,
            "end_column": 76
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010732,
        "ref": "master",
        "syntactic_id": "6b10bafc8373da01646bd21549507f6b",
        "match_based_id": "08030ed3546389ba828ff7587d27413b2ffd9a5f1296e8bb70d62b89c7f117496413f815a98956286f7a770c12553be1166b41a6fea23a9f2b1951401109c775_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/v-sqli.js#L36",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919419Z",
        "relevant_since": "2024-05-22T10:36:17.897737Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "v-sqli.js",
            "line": 36,
            "column": 66,
            "end_line": 36,
            "end_column": 85
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010731,
        "ref": "master",
        "syntactic_id": "c2151f97ef0c906cc4c33966dedce6ad",
        "match_based_id": "65b20342fce80780319f4a9313697c339aa832ff8453f0e62b88057708a5b278c7566283aec16610fc2f0cd7e34d2c9614dca52579f38d1e2859c6e37470f0da_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/v-sqli.js#L39",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919403Z",
        "relevant_since": "2024-05-22T10:36:17.897733Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "v-sqli.js",
            "line": 39,
            "column": 68,
            "end_line": 39,
            "end_column": 76
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010730,
        "ref": "master",
        "syntactic_id": "af883a0369c1fe9ffdb8c72117b4a56f",
        "match_based_id": "cfbe6c9fdccee7b8d2e99ed9a5d9c324844549e924de26dc8734132049d25d9014c999ac2397705c9ea02f6a5d3a2401c7649636da357d9001907300988d85b3_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vv-sqli.js#L34",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919388Z",
        "relevant_since": "2024-05-22T10:36:17.897728Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "vv-sqli.js",
            "line": 34,
            "column": 68,
            "end_line": 34,
            "end_column": 76
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010729,
        "ref": "master",
        "syntactic_id": "c59f0541dee4a002e2fde7805ce61840",
        "match_based_id": "58685979165a1afbd72380baf8927513cda342a2b5af14eb8e666824279c4aecca8bc2ac6207b661d109ecc6032980742f7797d642d636fcad0e9e2fa354a68f_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vv-sqli.js#L36",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919368Z",
        "relevant_since": "2024-05-22T10:36:17.897724Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "vv-sqli.js",
            "line": 36,
            "column": 66,
            "end_line": 36,
            "end_column": 85
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010728,
        "ref": "master",
        "syntactic_id": "6b0ea0d1d72d8aa05f3f7921f102d961",
        "match_based_id": "58685979165a1afbd72380baf8927513cda342a2b5af14eb8e666824279c4aecca8bc2ac6207b661d109ecc6032980742f7797d642d636fcad0e9e2fa354a68f_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vv-sqli.js#L39",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.919353Z",
        "relevant_since": "2024-05-22T10:36:17.897720Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "vv-sqli.js",
            "line": 39,
            "column": 66,
            "end_line": 39,
            "end_column": 85
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010727,
        "ref": "master",
        "syntactic_id": "349b82f7c931e471a315aef8dcb9c4cd",
        "match_based_id": "c94f5495e73d7be725d76ac5c4b7e2287e6164a7da1451267d7685d7b959d17f1e0f34630b75c4c09e6eb4afe9005f7ffe629d71b7886a301573ebab1b0688ac_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L35",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919337Z",
        "relevant_since": "2024-05-22T10:36:17.897717Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "sqli.js",
            "line": 35,
            "column": 21,
            "end_line": 35,
            "end_column": 89
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010726,
        "ref": "master",
        "syntactic_id": "b13cba2a6b6d47b0de5b8aed04bff6c5",
        "match_based_id": "b43ebc643e25a881ec64673aba98e73cca1a96a040884ca2e6c8e25df0b19ed3adb1f5ac317e0a676a0705202fba61082b8fac799b1ec81f755b8e9e12d8501b_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L38",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919322Z",
        "relevant_since": "2024-05-22T10:36:17.897713Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "sqli.js",
            "line": 38,
            "column": 23,
            "end_line": 38,
            "end_column": 91
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010725,
        "ref": "master",
        "syntactic_id": "77242e1e901e3007b25d2f92070619dc",
        "match_based_id": "b39ebca5ce4960f69a8158040cf30fa3cc317b46dad17b7e390c036b4ca4abf11252766b987b8c4103f6e69e66c1c46770a15bc0ac9e14baa6f42e1938ea18da_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L41",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919307Z",
        "relevant_since": "2024-05-22T10:36:17.897709Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "sqli.js",
            "line": 41,
            "column": 23,
            "end_line": 41,
            "end_column": 91
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010724,
        "ref": "master",
        "syntactic_id": "2975fe852fa7ae50ee74fd3a26c116a1",
        "match_based_id": "2fb911ed325bb37d230806c0573353631a1cce89a7621138d054162b942cd62bf357f57133957940f93238d98e1eed250f156b6938c1d4e83a4186be73450a56_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L44",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919287Z",
        "relevant_since": "2024-05-22T10:36:17.897706Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "sqli.js",
            "line": 44,
            "column": 23,
            "end_line": 44,
            "end_column": 91
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010723,
        "ref": "master",
        "syntactic_id": "063ed63d65bb0a0cb346b4455df290cb",
        "match_based_id": "7a95d6bf1383b9c6093ce140245a96692588ca0ada00ebd75ae47bc935b04aebb7154e95a39fc5248069b9056deb1cb52b5f5256224cf07f919e12ed8f145f81_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L47",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919272Z",
        "relevant_since": "2024-05-22T10:36:17.897701Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "sqli.js",
            "line": 47,
            "column": 23,
            "end_line": 47,
            "end_column": 91
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010722,
        "ref": "master",
        "syntactic_id": "ff0c5654153821436828e49b5d60acb8",
        "match_based_id": "7d446f654c8ad6886be842e48d31ced8bdb91810b4b96fdecad0eb8f6e626e4efa82acf36c6cd2e386fb645d027f3aa938932124e8ae46b9664a719953a21508_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L50",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919256Z",
        "relevant_since": "2024-05-22T10:36:17.897698Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "sqli.js",
            "line": 50,
            "column": 23,
            "end_line": 50,
            "end_column": 91
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010721,
        "ref": "master",
        "syntactic_id": "5f50903a32706445fd0aab4e307ee76f",
        "match_based_id": "7d9eccb7cbfb5376ad0e6a50e73813e5ca681886065e6d84f0b284048eacb0b0f31e770c277ce99a88bd01d5cec7593e231161fb2a88a03e38195a8ee9eceff0_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/sqli.js#L53",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919241Z",
        "relevant_since": "2024-05-22T10:36:17.897694Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "sqli.js",
            "line": 53,
            "column": 23,
            "end_line": 53,
            "end_column": 91
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010720,
        "ref": "master",
        "syntactic_id": "d03ed8dcfc492465073862b5208e3f8d",
        "match_based_id": "d024aecd22339e5ef17ad1b4b2bfbcebdab7fbba4491668cebb68fbbbe6b98ce03acb714de2f622c5382ff55b3d7818244b4e814f0f4b51c0bd61f29c06fb8a2_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/v-sqli.js#L34",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919225Z",
        "relevant_since": "2024-05-22T10:36:17.897689Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "v-sqli.js",
            "line": 34,
            "column": 23,
            "end_line": 34,
            "end_column": 80
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010719,
        "ref": "master",
        "syntactic_id": "dde1f97a0f11b115db92588dafbf5d52",
        "match_based_id": "8659c6b41ad91f28d54274f10dfaa697ac6f119c6e0cc2e18fae11f1b1fb4bd70225d8d50996dc0a2a4678242e7fdc7032d6961da5d9c24e9c9977e87f52715d_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/v-sqli.js#L36",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919210Z",
        "relevant_since": "2024-05-22T10:36:17.897686Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "v-sqli.js",
            "line": 36,
            "column": 21,
            "end_line": 36,
            "end_column": 89
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010718,
        "ref": "master",
        "syntactic_id": "64e27cc453aefb1c05ca43dc25e634b6",
        "match_based_id": "d024aecd22339e5ef17ad1b4b2bfbcebdab7fbba4491668cebb68fbbbe6b98ce03acb714de2f622c5382ff55b3d7818244b4e814f0f4b51c0bd61f29c06fb8a2_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/v-sqli.js#L39",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919194Z",
        "relevant_since": "2024-05-22T10:36:17.897682Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "v-sqli.js",
            "line": 39,
            "column": 23,
            "end_line": 39,
            "end_column": 80
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010717,
        "ref": "master",
        "syntactic_id": "aecfc3bf1262f0cff59be9a86391e7f1",
        "match_based_id": "7ebc372cbe069fe36ba882e391f36b6dd9a6b0f4d95af02acba22c5b0f18e0bb74280888403252ca4ecb50e1c5caa41e60a46bc8c4fd8ec004a60e928bf18066_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vv-sqli.js#L34",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919179Z",
        "relevant_since": "2024-05-22T10:36:17.897678Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "vv-sqli.js",
            "line": 34,
            "column": 23,
            "end_line": 34,
            "end_column": 80
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010716,
        "ref": "master",
        "syntactic_id": "a5f4ce4c7dd8aa4d41071eda8287c10b",
        "match_based_id": "3175afc7fc5e9fe76f6dbaa34c4d033a8428aadb76c382f57e3c496c4f2329faa880a3c501db3f345fc2852654f85b7b0154fc1f17896c5fe82de6c860d1b3e5_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vv-sqli.js#L36",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919163Z",
        "relevant_since": "2024-05-22T10:36:17.897674Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "vv-sqli.js",
            "line": 36,
            "column": 21,
            "end_line": 36,
            "end_column": 89
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010715,
        "ref": "master",
        "syntactic_id": "a7584273da1e9da9576d09c99b487beb",
        "match_based_id": "3175afc7fc5e9fe76f6dbaa34c4d033a8428aadb76c382f57e3c496c4f2329faa880a3c501db3f345fc2852654f85b7b0154fc1f17896c5fe82de6c860d1b3e5_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vv-sqli.js#L39",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.919143Z",
        "relevant_since": "2024-05-22T10:36:17.897671Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "vv-sqli.js",
            "line": 39,
            "column": 21,
            "end_line": 39,
            "end_column": 89
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010714,
        "ref": "master",
        "syntactic_id": "7935ac1b8fc9b816b51aae763e02106a",
        "match_based_id": "bf34155c5e4969981cfbc0dbd4441d2a2e384c31168723fe3c2bd6d9c430a0f6d05ae30fc06c7a5ff9f4ff4599fe14318896f083596b65e90f2d5f0ea046a3ae_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/client/index.html#L63",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.919127Z",
        "relevant_since": "2024-05-22T10:36:17.897667Z",
        "rule_name": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag",
        "rule_message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "location": {
            "file_path": "client/index.html",
            "line": 63,
            "column": 41,
            "end_line": 63,
            "end_column": 47
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag",
            "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010713,
        "ref": "master",
        "syntactic_id": "2b95cb511634b39ca0a28631fd9607b4",
        "match_based_id": "bf34155c5e4969981cfbc0dbd4441d2a2e384c31168723fe3c2bd6d9c430a0f6d05ae30fc06c7a5ff9f4ff4599fe14318896f083596b65e90f2d5f0ea046a3ae_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/client/index.html#L67",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.919112Z",
        "relevant_since": "2024-05-22T10:36:17.897663Z",
        "rule_name": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag",
        "rule_message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "location": {
            "file_path": "client/index.html",
            "line": 67,
            "column": 23,
            "end_line": 67,
            "end_column": 35
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag",
            "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010712,
        "ref": "master",
        "syntactic_id": "00efeefa3171743e19525f809cd4f667",
        "match_based_id": "bf34155c5e4969981cfbc0dbd4441d2a2e384c31168723fe3c2bd6d9c430a0f6d05ae30fc06c7a5ff9f4ff4599fe14318896f083596b65e90f2d5f0ea046a3ae_2",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/client/index.html#L67",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.919092Z",
        "relevant_since": "2024-05-22T10:36:17.897659Z",
        "rule_name": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag",
        "rule_message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "location": {
            "file_path": "client/index.html",
            "line": 67,
            "column": 58,
            "end_line": 67,
            "end_column": 72
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag",
            "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010711,
        "ref": "master",
        "syntactic_id": "17731a76d24a2dfa1cc37d5d8904bdf9",
        "match_based_id": "bf34155c5e4969981cfbc0dbd4441d2a2e384c31168723fe3c2bd6d9c430a0f6d05ae30fc06c7a5ff9f4ff4599fe14318896f083596b65e90f2d5f0ea046a3ae_3",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/client/index.html#L73",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.919076Z",
        "relevant_since": "2024-05-22T10:36:17.897655Z",
        "rule_name": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag",
        "rule_message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "location": {
            "file_path": "client/index.html",
            "line": 73,
            "column": 37,
            "end_line": 73,
            "end_column": 45
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag",
            "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010710,
        "ref": "master",
        "syntactic_id": "1312fa02826524bc9b3efe966d493fd7",
        "match_based_id": "2a7ee34bd181d14439100630fa76aa57c72375adaff84897d3e2ba8ae5ff0255e7a800358f43744e717c790ceeb2c3faf146608cfdb181f5c085e4ff7ab1a72f_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/client/index.html#L63",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.919060Z",
        "relevant_since": "2024-05-22T10:36:17.897651Z",
        "rule_name": "generic.html-templates.security.var-in-script-tag.var-in-script-tag",
        "rule_message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "location": {
            "file_path": "client/index.html",
            "line": 63,
            "column": 41,
            "end_line": 63,
            "end_column": 47
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "generic.html-templates.security.var-in-script-tag.var-in-script-tag",
            "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010709,
        "ref": "master",
        "syntactic_id": "673db658c9665cfa35578990486ac4fe",
        "match_based_id": "2a7ee34bd181d14439100630fa76aa57c72375adaff84897d3e2ba8ae5ff0255e7a800358f43744e717c790ceeb2c3faf146608cfdb181f5c085e4ff7ab1a72f_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/client/index.html#L67",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.919045Z",
        "relevant_since": "2024-05-22T10:36:17.897647Z",
        "rule_name": "generic.html-templates.security.var-in-script-tag.var-in-script-tag",
        "rule_message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "location": {
            "file_path": "client/index.html",
            "line": 67,
            "column": 23,
            "end_line": 67,
            "end_column": 35
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "generic.html-templates.security.var-in-script-tag.var-in-script-tag",
            "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010708,
        "ref": "master",
        "syntactic_id": "4f11327f807f82cce4b8a3021682e2ed",
        "match_based_id": "2a7ee34bd181d14439100630fa76aa57c72375adaff84897d3e2ba8ae5ff0255e7a800358f43744e717c790ceeb2c3faf146608cfdb181f5c085e4ff7ab1a72f_2",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/client/index.html#L67",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.919030Z",
        "relevant_since": "2024-05-22T10:36:17.897643Z",
        "rule_name": "generic.html-templates.security.var-in-script-tag.var-in-script-tag",
        "rule_message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "location": {
            "file_path": "client/index.html",
            "line": 67,
            "column": 58,
            "end_line": 67,
            "end_column": 72
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "generic.html-templates.security.var-in-script-tag.var-in-script-tag",
            "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010707,
        "ref": "master",
        "syntactic_id": "4b959a6d6a0a1d511147bab7ecfb02c7",
        "match_based_id": "2a7ee34bd181d14439100630fa76aa57c72375adaff84897d3e2ba8ae5ff0255e7a800358f43744e717c790ceeb2c3faf146608cfdb181f5c085e4ff7ab1a72f_3",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/client/index.html#L73",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.919015Z",
        "relevant_since": "2024-05-22T10:36:17.897639Z",
        "rule_name": "generic.html-templates.security.var-in-script-tag.var-in-script-tag",
        "rule_message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
        "location": {
            "file_path": "client/index.html",
            "line": 73,
            "column": 37,
            "end_line": 73,
            "end_column": 45
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "generic.html-templates.security.var-in-script-tag.var-in-script-tag",
            "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010706,
        "ref": "master",
        "syntactic_id": "e44783184e606485f2c6093385174df8",
        "match_based_id": "f655d106ab26fdfb5805fc1aee0b6913735daa87404a125585cfec7ca11f715f9d67622ffe6a7a30d6e17f875af0ebc261d6366ee74653102cc06a21775ba1ba_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/client/index.html#L57",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.918999Z",
        "relevant_since": "2024-05-22T10:36:17.897634Z",
        "rule_name": "html.security.audit.missing-integrity.missing-integrity",
        "rule_message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
        "location": {
            "file_path": "client/index.html",
            "line": 57,
            "column": 5,
            "end_line": 57,
            "end_column": 72
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "html.security.audit.missing-integrity.missing-integrity",
            "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp_names": [
                "A08:2021 - Software and Data Integrity Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010705,
        "ref": "master",
        "syntactic_id": "cd7bc383264ec7865df02c2f99d5db64",
        "match_based_id": "c013a9967f67ecc90f334081291eaebaf166c6390d5f8436b223594dde3084898fce26c4d9c8ef098fa615a6c464203cb1970c53a58a52e13936cde6249524d6_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/client/index.html#L60",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.918984Z",
        "relevant_since": "2024-05-22T10:36:17.897630Z",
        "rule_name": "html.security.audit.missing-integrity.missing-integrity",
        "rule_message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
        "location": {
            "file_path": "client/index.html",
            "line": 60,
            "column": 5,
            "end_line": 60,
            "end_column": 101
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "html.security.audit.missing-integrity.missing-integrity",
            "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp_names": [
                "A08:2021 - Software and Data Integrity Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010704,
        "ref": "master",
        "syntactic_id": "9b9b00055d4cd83e5971e0c310e51ec5",
        "match_based_id": "cb10dd091744975889b5a62e63ccc550f788685da03bf550b97d69f22ae03e1ccaf645c94fcc84755abae056fd19d8444dcc833481bbe386c5e99d93c9f1cfc2_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/client/login.html#L40",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.918969Z",
        "relevant_since": "2024-05-22T10:36:17.897626Z",
        "rule_name": "html.security.audit.missing-integrity.missing-integrity",
        "rule_message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
        "location": {
            "file_path": "client/login.html",
            "line": 40,
            "column": 3,
            "end_line": 40,
            "end_column": 70
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "html.security.audit.missing-integrity.missing-integrity",
            "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp_names": [
                "A08:2021 - Software and Data Integrity Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010703,
        "ref": "master",
        "syntactic_id": "fc3457f91c76741a2aadbcc9b12f80d0",
        "match_based_id": "060313df2402081a639e854b25bdc253f8365aefd58f089a06ecff242c69322cd4d40d62d195fccbce4b74ff4bbc88f8b2ecb60e246bed98ef597c6a26bb2378_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/client/login.html#L43",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.918954Z",
        "relevant_since": "2024-05-22T10:36:17.897623Z",
        "rule_name": "html.security.audit.missing-integrity.missing-integrity",
        "rule_message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
        "location": {
            "file_path": "client/login.html",
            "line": 43,
            "column": 3,
            "end_line": 43,
            "end_column": 99
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "html.security.audit.missing-integrity.missing-integrity",
            "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp_names": [
                "A08:2021 - Software and Data Integrity Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010702,
        "ref": "master",
        "syntactic_id": "188259fb48ee3336fe0344afc6131697",
        "match_based_id": "fd4299cd034d3a727c6652e13ac52db9e8853ed23ad9ca9d15f59f09f55db1ebe289eca0e0f18272e60f75f3e965d3b54f7f9c6240b634bd5d0644d029ea2793_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/new-vul.java#L10",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918939Z",
        "relevant_since": "2024-05-22T10:36:17.897618Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/new-vul.java",
            "line": 10,
            "column": 9,
            "end_line": 10,
            "end_column": 35
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010701,
        "ref": "master",
        "syntactic_id": "369281f911cfe5e27bff2b0c281fc334",
        "match_based_id": "436bd0f6b8d7f38afb9d04e833a7e7322b12cf32f7d8176871547915e82ef63f84330b6df2c8163cc3adcdc59bc6154085e3bb9617bfb6e837209f8550cc8c2a_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/new-vul.java#L19",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918923Z",
        "relevant_since": "2024-05-22T10:36:17.897614Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/new-vul.java",
            "line": 19,
            "column": 9,
            "end_line": 19,
            "end_column": 35
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010700,
        "ref": "master",
        "syntactic_id": "3a1feb688170a35be3cfad64dc8dd0c7",
        "match_based_id": "b0b8036b55fc23621cf0a1225a564b5938a0f967f12d1bd5f044761aa78dd844abd8c3abda97a7acef1425592eb639be4fc7ff9b93a7e48a43fed4e17aae0919_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/new-vul.java#L28",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918908Z",
        "relevant_since": "2024-05-22T10:36:17.897610Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/new-vul.java",
            "line": 28,
            "column": 9,
            "end_line": 28,
            "end_column": 35
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010699,
        "ref": "master",
        "syntactic_id": "36afdbe380ecd6b16d027bc61496e103",
        "match_based_id": "96195860b58ef39acab4855dec2223d7cbe7a288d96621d3b0e5956afe439f039b0a929b8b18d0cae1e711ff313e77e2153c5bc7b89a96b1faccaea5b85c0980_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/new-vul.java#L33",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918893Z",
        "relevant_since": "2024-05-22T10:36:17.897606Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/new-vul.java",
            "line": 33,
            "column": 9,
            "end_line": 33,
            "end_column": 95
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010698,
        "ref": "master",
        "syntactic_id": "128510aee6d769401cc3eb14efca4f2d",
        "match_based_id": "c8d20201fae80e8681f7774a9fdc15a34285184a97d3cd87ab1f6b5a2a608a8bea2c557ac91f6a52f7d870e1b8006613ac06feceffa72c4c3a2bac7a7c56160b_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/new-vul.java#L35",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918878Z",
        "relevant_since": "2024-05-22T10:36:17.897602Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/new-vul.java",
            "line": 35,
            "column": 9,
            "end_line": 35,
            "end_column": 99
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010697,
        "ref": "master",
        "syntactic_id": "7b7cf091c4c9e48f889c37df19507621",
        "match_based_id": "63985a682037f01dc959e9e002fe60c23ea87abdf65b8a92d1d7a362626619527e62bfdced718710e0ad7795b84a0f1b269361f9f002e4fb4e091e2dd76e2d43_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/new-vul.java#L41",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918863Z",
        "relevant_since": "2024-05-22T10:36:17.897598Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/new-vul.java",
            "line": 41,
            "column": 13,
            "end_line": 41,
            "end_column": 36
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010696,
        "ref": "master",
        "syntactic_id": "0cef80e6c97b47890eefd5ad00947b7a",
        "match_based_id": "96195860b58ef39acab4855dec2223d7cbe7a288d96621d3b0e5956afe439f039b0a929b8b18d0cae1e711ff313e77e2153c5bc7b89a96b1faccaea5b85c0980_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/new-vul.java#L47",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918847Z",
        "relevant_since": "2024-05-22T10:36:17.897595Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/new-vul.java",
            "line": 47,
            "column": 9,
            "end_line": 47,
            "end_column": 95
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010695,
        "ref": "master",
        "syntactic_id": "53024ad034267b057b62685443f9b055",
        "match_based_id": "c8d20201fae80e8681f7774a9fdc15a34285184a97d3cd87ab1f6b5a2a608a8bea2c557ac91f6a52f7d870e1b8006613ac06feceffa72c4c3a2bac7a7c56160b_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/new-vul.java#L49",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918827Z",
        "relevant_since": "2024-05-22T10:36:17.897591Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/new-vul.java",
            "line": 49,
            "column": 9,
            "end_line": 49,
            "end_column": 99
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010694,
        "ref": "master",
        "syntactic_id": "c5cad6f2ee5b0874b7ccdf51e01af136",
        "match_based_id": "7484a2467f0c6d40cacdeda79d6b529cc182b5360776054a0e43b6789b8a53f5ea6371e71944a362843d20ce0e437822256e8807215c94fd2e5bf74a131b2ffc_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/very-new-vul.java#L10",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918811Z",
        "relevant_since": "2024-05-22T10:36:17.897587Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/very-new-vul.java",
            "line": 10,
            "column": 9,
            "end_line": 10,
            "end_column": 35
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010693,
        "ref": "master",
        "syntactic_id": "7d62e2fcbc8eba7a748ce1ff771b4fb7",
        "match_based_id": "8a1a05fe132b31ab92951021b4a0ef4f48c40111d97c2908e565956531e3b7beafc590a17ef18c368e42612d962edcc7db5937a3b12beb85336bf70e1ca1d91b_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/very-new-vul.java#L19",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918796Z",
        "relevant_since": "2024-05-22T10:36:17.897584Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/very-new-vul.java",
            "line": 19,
            "column": 9,
            "end_line": 19,
            "end_column": 35
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010692,
        "ref": "master",
        "syntactic_id": "65ad4bd7d9ed78e5307f8ce986bdb10b",
        "match_based_id": "c8cccc93dce1c03a291127e439d0653ba442e749649e95f4f9999ed3bb1e28ce3ad70bb8d43b8d1dfab7a4f489d3b7017a11f961e171dda53ebb40c556f00056_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/very-new-vul.java#L28",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918781Z",
        "relevant_since": "2024-05-22T10:36:17.897580Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/very-new-vul.java",
            "line": 28,
            "column": 9,
            "end_line": 28,
            "end_column": 35
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010691,
        "ref": "master",
        "syntactic_id": "1675ead65346b3eb64f91b006ac98118",
        "match_based_id": "f24836ce8287bc3968338f47561a2f3a58db5edc730eadbbc79719ffbac3c5ce1cf748da5f5526a293561e4ebeb334f07187c7c7f2b87d32c911c08bd8e191f6_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/very-new-vul.java#L33",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918761Z",
        "relevant_since": "2024-05-22T10:36:17.897576Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/very-new-vul.java",
            "line": 33,
            "column": 9,
            "end_line": 33,
            "end_column": 95
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010690,
        "ref": "master",
        "syntactic_id": "2db0ebf6853113afc0a37db8b3ff0678",
        "match_based_id": "9b30473e589f70bcd329ec3f3cb2dbb0b246b4d1fc3a2006d184a82415aed8aeca0f8abb8d3401530c732839d2dd8b923eceac1688bd60fb9562625373b9db39_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/very-new-vul.java#L35",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918746Z",
        "relevant_since": "2024-05-22T10:36:17.897572Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/very-new-vul.java",
            "line": 35,
            "column": 9,
            "end_line": 35,
            "end_column": 99
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010689,
        "ref": "master",
        "syntactic_id": "2938dccfac3932837ff25adeb0dd3e2e",
        "match_based_id": "8aa682fba1fde59c023f77c26df594aa09f06a4a6e9cd33a310aaa98d0f9f5baa5946215dcc5c3ca04b48d0cd03779b4ffca58a898cb6e62146b13dc95e2cdd3_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/very-new-vul.java#L41",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918730Z",
        "relevant_since": "2024-05-22T10:36:17.897569Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/very-new-vul.java",
            "line": 41,
            "column": 13,
            "end_line": 41,
            "end_column": 36
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010688,
        "ref": "master",
        "syntactic_id": "d5a0bcb987a9b68312e42dfba10e1f06",
        "match_based_id": "8aa682fba1fde59c023f77c26df594aa09f06a4a6e9cd33a310aaa98d0f9f5baa5946215dcc5c3ca04b48d0cd03779b4ffca58a898cb6e62146b13dc95e2cdd3_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/very-new-vul.java#L47",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918715Z",
        "relevant_since": "2024-05-22T10:36:17.897565Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/very-new-vul.java",
            "line": 47,
            "column": 13,
            "end_line": 47,
            "end_column": 36
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010687,
        "ref": "master",
        "syntactic_id": "3b9d0091bfff70462b3afeadeb4c1ec4",
        "match_based_id": "8aa682fba1fde59c023f77c26df594aa09f06a4a6e9cd33a310aaa98d0f9f5baa5946215dcc5c3ca04b48d0cd03779b4ffca58a898cb6e62146b13dc95e2cdd3_2",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/very-new-vul.java#L54",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918700Z",
        "relevant_since": "2024-05-22T10:36:17.897561Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/very-new-vul.java",
            "line": 54,
            "column": 13,
            "end_line": 54,
            "end_column": 36
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010686,
        "ref": "master",
        "syntactic_id": "514ade5e08d2845ec61a69792fbfb2e6",
        "match_based_id": "8aa682fba1fde59c023f77c26df594aa09f06a4a6e9cd33a310aaa98d0f9f5baa5946215dcc5c3ca04b48d0cd03779b4ffca58a898cb6e62146b13dc95e2cdd3_3",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/very-new-vul.java#L61",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918684Z",
        "relevant_since": "2024-05-22T10:36:17.897557Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/very-new-vul.java",
            "line": 61,
            "column": 13,
            "end_line": 61,
            "end_column": 36
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010685,
        "ref": "master",
        "syntactic_id": "596ee82bbe79a982f7f49cc1db0be7a7",
        "match_based_id": "a67e228037c3514e6f75fd6f2f34801825109f887bd25fd4ae421986f81a1ffec1f5b5f1345ec91233b4e9d58b5691171beae875808d8d94599fb93e79fa40a5_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/vuln.java#L10",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918669Z",
        "relevant_since": "2024-05-22T10:36:17.897553Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/vuln.java",
            "line": 10,
            "column": 9,
            "end_line": 10,
            "end_column": 35
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010684,
        "ref": "master",
        "syntactic_id": "3c1d3879e4ea9f9b28fe4871049c5582",
        "match_based_id": "a67e228037c3514e6f75fd6f2f34801825109f887bd25fd4ae421986f81a1ffec1f5b5f1345ec91233b4e9d58b5691171beae875808d8d94599fb93e79fa40a5_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/vuln.java#L20",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918653Z",
        "relevant_since": "2024-05-22T10:36:17.897549Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/vuln.java",
            "line": 20,
            "column": 9,
            "end_line": 20,
            "end_column": 35
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010683,
        "ref": "master",
        "syntactic_id": "c423318147c3679ad0dca4a1c7ffdab8",
        "match_based_id": "a67e228037c3514e6f75fd6f2f34801825109f887bd25fd4ae421986f81a1ffec1f5b5f1345ec91233b4e9d58b5691171beae875808d8d94599fb93e79fa40a5_2",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/vuln.java#L30",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918638Z",
        "relevant_since": "2024-05-22T10:36:17.897545Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/vuln.java",
            "line": 30,
            "column": 9,
            "end_line": 30,
            "end_column": 37
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010682,
        "ref": "master",
        "syntactic_id": "f2e0ddff7a5c9b44cda59eb1bd79cd6b",
        "match_based_id": "a67e228037c3514e6f75fd6f2f34801825109f887bd25fd4ae421986f81a1ffec1f5b5f1345ec91233b4e9d58b5691171beae875808d8d94599fb93e79fa40a5_3",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/vuln.java#L40",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918622Z",
        "relevant_since": "2024-05-22T10:36:17.897542Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/vuln.java",
            "line": 40,
            "column": 9,
            "end_line": 40,
            "end_column": 38
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010681,
        "ref": "master",
        "syntactic_id": "c109445eddbd95e99f5a37acb4411a53",
        "match_based_id": "a67e228037c3514e6f75fd6f2f34801825109f887bd25fd4ae421986f81a1ffec1f5b5f1345ec91233b4e9d58b5691171beae875808d8d94599fb93e79fa40a5_4",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/vuln.java#L50",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918607Z",
        "relevant_since": "2024-05-22T10:36:17.897538Z",
        "rule_name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "vulns/vuln.java",
            "line": 50,
            "column": 9,
            "end_line": 50,
            "end_column": 38
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010680,
        "ref": "master",
        "syntactic_id": "6648ff154eaf2ded1e4a2d113819be5c",
        "match_based_id": "e889fa7b3bb27e5fbd2cf221ee558ba7795814b6f239d54d073fd83ed7dbbef64e11d267d19c200333703dda2821c97dc29ebb65c048a509e9e3fd3bbefa582f_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/Comment.java#L55",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918591Z",
        "relevant_since": "2024-05-22T10:36:17.897534Z",
        "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/Comment.java",
            "line": 55,
            "column": 7,
            "end_line": 55,
            "end_column": 26
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010679,
        "ref": "master",
        "syntactic_id": "b67d8369f9e55367d83e47164fa38917",
        "match_based_id": "e889fa7b3bb27e5fbd2cf221ee558ba7795814b6f239d54d073fd83ed7dbbef64e11d267d19c200333703dda2821c97dc29ebb65c048a509e9e3fd3bbefa582f_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/Comment.java#L70",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918576Z",
        "relevant_since": "2024-05-22T10:36:17.897530Z",
        "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/Comment.java",
            "line": 70,
            "column": 7,
            "end_line": 70,
            "end_column": 26
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010678,
        "ref": "master",
        "syntactic_id": "0f148873c1f8e23d25eb6451f371e8be",
        "match_based_id": "042e6fd11f4161db2d3c8be549cb86edf3e30f0d53ac9021ce7bd4f9c502cd2be3be3064fcaef943b6697bdb66f6215366c47e356789a2b15edb2f25b3f91691_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/Cowsay.java#L24",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918561Z",
        "relevant_since": "2024-05-22T10:36:17.897526Z",
        "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/Cowsay.java",
            "line": 24,
            "column": 7,
            "end_line": 24,
            "end_column": 26
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010677,
        "ref": "master",
        "syntactic_id": "1a3832fd42186f6cdc1384c4d355a065",
        "match_based_id": "e4f44494060880deb184db27b069e1de12f4239eda5f1e024c4d6c9b923406c80c21a928bad43c4f69caed2020543aaed84c67ff0a74fb0ab838341efcb8a095_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/Postgres.java#L25",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918546Z",
        "relevant_since": "2024-05-22T10:36:17.897523Z",
        "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/Postgres.java",
            "line": 25,
            "column": 13,
            "end_line": 25,
            "end_column": 32
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010676,
        "ref": "master",
        "syntactic_id": "5c598528a011998c7dabf2e96e20561b",
        "match_based_id": "e4f44494060880deb184db27b069e1de12f4239eda5f1e024c4d6c9b923406c80c21a928bad43c4f69caed2020543aaed84c67ff0a74fb0ab838341efcb8a095_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/Postgres.java#L100",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918531Z",
        "relevant_since": "2024-05-22T10:36:17.897519Z",
        "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/Postgres.java",
            "line": 100,
            "column": 10,
            "end_line": 100,
            "end_column": 29
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010675,
        "ref": "master",
        "syntactic_id": "737a531e0159957148d27896b599367e",
        "match_based_id": "e4f44494060880deb184db27b069e1de12f4239eda5f1e024c4d6c9b923406c80c21a928bad43c4f69caed2020543aaed84c67ff0a74fb0ab838341efcb8a095_2",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/Postgres.java#L114",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918515Z",
        "relevant_since": "2024-05-22T10:36:17.897515Z",
        "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/Postgres.java",
            "line": 114,
            "column": 13,
            "end_line": 114,
            "end_column": 32
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010674,
        "ref": "master",
        "syntactic_id": "a175389e175976f8f847edefc00b45b5",
        "match_based_id": "3d537b330800d3cbc5f096912fdbdc3148ba114b3fe30ff3890083237f8dfe0a48424eed29301ea3e3b22e35bb3586cb46e5940cb81eba62378fe22460383e21_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/User.java#L34",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918495Z",
        "relevant_since": "2024-05-22T10:36:17.897512Z",
        "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/User.java",
            "line": 34,
            "column": 7,
            "end_line": 34,
            "end_column": 26
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010673,
        "ref": "master",
        "syntactic_id": "73caecb4946824c008997ecee37c6065",
        "match_based_id": "3d537b330800d3cbc5f096912fdbdc3148ba114b3fe30ff3890083237f8dfe0a48424eed29301ea3e3b22e35bb3586cb46e5940cb81eba62378fe22460383e21_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/User.java#L58",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918480Z",
        "relevant_since": "2024-05-22T10:36:17.897508Z",
        "rule_name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
        "rule_message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/User.java",
            "line": 58,
            "column": 7,
            "end_line": 58,
            "end_column": 26
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace",
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Active Debug Code"
            ],
            "cwe_names": [
                "CWE-489: Active Debug Code"
            ],
            "owasp_names": [
                "A10:2004 - Insecure Configuration Management",
                "A06:2017 - Security Misconfiguration",
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010672,
        "ref": "master",
        "syntactic_id": "e637ccdcd9468a9cbab5a92946f4167d",
        "match_based_id": "81fd262684f455d02cdc6b809ae3226ae8c240e01839f1783a72cbeb4790efb74e781ca0d6c7ece37d220bbb5bfc5f44b6477e32c8b58eba817ff94fb21ba92f_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/cookie-secure-flag.java#L23",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.918465Z",
        "relevant_since": "2024-05-22T10:36:17.897505Z",
        "rule_name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
        "rule_message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
        "location": {
            "file_path": "vulns/cookie-secure-flag.java",
            "line": 23,
            "column": 9,
            "end_line": 23,
            "end_column": 33
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cookie Security"
            ],
            "cwe_names": [
                "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010671,
        "ref": "master",
        "syntactic_id": "d301af67351ee33aa21f0879b6af2354",
        "match_based_id": "acf1953c26267ce1e040c2939abf3172f138c9751c0257cdbcadd7718e7bb9b754bf393b6d6982f872c5a333608cb97149d51aaf1c7677190b35ef705a22b250_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/Postgres.java#L67",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.918449Z",
        "relevant_since": "2024-05-22T10:36:17.897501Z",
        "rule_name": "java.lang.security.audit.crypto.use-of-md5.use-of-md5",
        "rule_message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/Postgres.java",
            "line": 67,
            "column": 58,
            "end_line": 67,
            "end_column": 63
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.crypto.use-of-md5.use-of-md5",
            "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Insecure Hashing Algorithm"
            ],
            "cwe_names": [
                "CWE-328: Use of Weak Hash"
            ],
            "owasp_names": [
                "A03:2017 - Sensitive Data Exposure",
                "A02:2021 - Cryptographic Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010670,
        "ref": "master",
        "syntactic_id": "9d1f3e02be736c1b490713d1e852e02b",
        "match_based_id": "ee05dbb4edcaa395673f467f6523d651dee737cefd001c955770aed3007976740942702d79a0f097271e94c19df28ebf4a549da6bf47024bd3d26a5669d1038f_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/User.java#L49",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.918429Z",
        "relevant_since": "2024-05-22T10:36:17.897497Z",
        "rule_name": "java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli",
        "rule_message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/User.java",
            "line": 49,
            "column": 22,
            "end_line": 49,
            "end_column": 46
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli",
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010669,
        "ref": "master",
        "syntactic_id": "b4b5c5d6683ccc9f0fba65e19f7f3805",
        "match_based_id": "e3d97bc226b6772746fcd22e76547cd9ae6bdc860d0d2260b1309beaf38082c463606c6ee3973600f6c579d2f1bf40dcdd8ce549479681455b71e6974394da9a_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/cookie-secure-flag.java#L23",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.918413Z",
        "relevant_since": "2024-05-22T10:36:17.897493Z",
        "rule_name": "java.servlets.security.audit.cookie-secure-flag-false.cookie-secure-flag-false",
        "rule_message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
        "location": {
            "file_path": "vulns/cookie-secure-flag.java",
            "line": 23,
            "column": 9,
            "end_line": 23,
            "end_column": 33
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.servlets.security.audit.cookie-secure-flag-false.cookie-secure-flag-false",
            "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cookie Security"
            ],
            "cwe_names": [
                "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010668,
        "ref": "master",
        "syntactic_id": "105d4f441d6534e4a72644295b13fadd",
        "match_based_id": "4f4e967eed317465c1bbbe2bd9800f7fed85f10dec58952e7562190c68712a56742af87e6bad8af6258f6341216f97923ce229f434da6ae5c4921eb2a60f0d80_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/CowController.java#L11",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.918397Z",
        "relevant_since": "2024-05-22T10:36:17.897490Z",
        "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
        "rule_message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/CowController.java",
            "line": 11,
            "column": 6,
            "end_line": 11,
            "end_column": 20
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site Request Forgery (CSRF)"
            ],
            "cwe_names": [
                "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp_names": [
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010667,
        "ref": "master",
        "syntactic_id": "2f72145b6169a9d5db24587e7e3b8a96",
        "match_based_id": "efeaa4946217dc9b8a84bff5cab5f704f12031315b18f573772c4e8378f63335e8a5f5485a87b1b11ad69e81d7960d43cb20f3bc26d765fe2a2a87cb2d96d20a_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/LinksController.java#L15",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.918381Z",
        "relevant_since": "2024-05-22T10:36:17.897486Z",
        "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
        "rule_message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/LinksController.java",
            "line": 15,
            "column": 4,
            "end_line": 15,
            "end_column": 18
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site Request Forgery (CSRF)"
            ],
            "cwe_names": [
                "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp_names": [
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010666,
        "ref": "master",
        "syntactic_id": "2e841b899ad71004598da51d58a10afd",
        "match_based_id": "af78c11f21af7db5e0fae35c982bbb526ff85afb299182b70a6c9a7ae01b92487d8737bd6d39c08782dab6327efe95ffaed2bb709487444392ac69d18a9b9d1f_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/src/main/java/com/scalesec/vulnado/LinksController.java#L19",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.918365Z",
        "relevant_since": "2024-05-22T10:36:17.897482Z",
        "rule_name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
        "rule_message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
        "location": {
            "file_path": "src/main/java/com/scalesec/vulnado/LinksController.java",
            "line": 19,
            "column": 4,
            "end_line": 19,
            "end_column": 18
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping",
            "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site Request Forgery (CSRF)"
            ],
            "cwe_names": [
                "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp_names": [
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010665,
        "ref": "master",
        "syntactic_id": "a3aa3925d196dc141239a2599fec807e",
        "match_based_id": "720756bc598e9133a9562b895526883b3f2549c187c2c95227d0557f15dfab951b0c82d95eb360785ba623adbf0ac0e72f9358125df5a7c3a558a55eb12444b5_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/client/index.html#L73",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.918349Z",
        "relevant_since": "2024-05-22T10:36:17.897478Z",
        "rule_name": "javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape",
        "rule_message": "Detected an explicit unescape in a Mustache template, using triple braces '{{{...}}}' or ampersand '&'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.",
        "location": {
            "file_path": "client/index.html",
            "line": 73,
            "column": 36,
            "end_line": 73,
            "end_column": 46
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape",
            "message": "Detected an explicit unescape in a Mustache template, using triple braces '{{{...}}}' or ampersand '&'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site-Scripting (XSS)"
            ],
            "cwe_names": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
            ],
            "owasp_names": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010664,
        "ref": "master",
        "syntactic_id": "25cc61375953242bc4efafa2fb72ed57",
        "match_based_id": "6d61d97d65b3baa3be8b840f84993a48c45cf468e5c56ea6302420c1a646c6bccc2dbc4f5c57ec668a99945efec391de831f5bf2512ad8b2a8fd5a14bf30a3ca_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/hardcoded_secrets.swift#L60",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.918333Z",
        "relevant_since": "2024-05-22T10:36:17.897474Z",
        "rule_name": "swift.commoncrypto.hardcoded-salt.hardcoded-salt",
        "rule_message": "Cryptographic operations were identified that leverage a hardcoded salt/nonce. A salt does not need to remain secret, but should be random, generated from cryptographically secure sources of entropy, such as an CSPRNG. On iOS/macOS platforms, secure random data can be obtained via the `SecCopyRandomBytes` API available from RandomizationServices.",
        "location": {
            "file_path": "vulns/hardcoded_secrets.swift",
            "line": 60,
            "column": 8,
            "end_line": 60,
            "end_column": 16
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "swift.commoncrypto.hardcoded-salt.hardcoded-salt",
            "message": "Cryptographic operations were identified that leverage a hardcoded salt/nonce. A salt does not need to remain secret, but should be random, generated from cryptographically secure sources of entropy, such as an CSPRNG. On iOS/macOS platforms, secure random data can be obtained via the `SecCopyRandomBytes` API available from RandomizationServices.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Other"
            ],
            "cwe_names": [
                "CWE-323: Nonces should be used for the present occasion and only once."
            ],
            "owasp_names": [
                "A02:2021 - Cryptographic Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010663,
        "ref": "master",
        "syntactic_id": "c155ee904797531510f38b8492782956",
        "match_based_id": "7f8fce101c788751bec33bb7d1260fa61802ebc792b9f718654f8df72fc06a569b8abcc684a6139e6daf3b7230bdde3482ff14d4871106c614d184f8c3cc2e92_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/hardcoded_secrets.swift#L74",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.918317Z",
        "relevant_since": "2024-05-22T10:36:17.897470Z",
        "rule_name": "swift.commoncrypto.hardcoded-salt.hardcoded-salt",
        "rule_message": "Cryptographic operations were identified that leverage a hardcoded salt/nonce. A salt does not need to remain secret, but should be random, generated from cryptographically secure sources of entropy, such as an CSPRNG. On iOS/macOS platforms, secure random data can be obtained via the `SecCopyRandomBytes` API available from RandomizationServices.",
        "location": {
            "file_path": "vulns/hardcoded_secrets.swift",
            "line": 74,
            "column": 12,
            "end_line": 74,
            "end_column": 17
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "swift.commoncrypto.hardcoded-salt.hardcoded-salt",
            "message": "Cryptographic operations were identified that leverage a hardcoded salt/nonce. A salt does not need to remain secret, but should be random, generated from cryptographically secure sources of entropy, such as an CSPRNG. On iOS/macOS platforms, secure random data can be obtained via the `SecCopyRandomBytes` API available from RandomizationServices.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Other"
            ],
            "cwe_names": [
                "CWE-323: Nonces should be used for the present occasion and only once."
            ],
            "owasp_names": [
                "A02:2021 - Cryptographic Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010662,
        "ref": "master",
        "syntactic_id": "b0cf85abd957f589cdd69857aa60bf64",
        "match_based_id": "6c2563bb0d8d1ca4c14063337e8a5928ba2bd7b0eff3afa81964338112088451d5d7bad020e3eddff8bc3a6b1aab122c6aad56f918907d79f9e0b7f2693bd6b8_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/hardcoded_secrets.swift#L21",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.918297Z",
        "relevant_since": "2024-05-22T10:36:17.897466Z",
        "rule_name": "swift.commoncrypto.hardcoded-symmetric-key.hardcoded-symmetric-key",
        "rule_message": "A hard-coded cryptographic key was detected. An attacker that obtains this key via reverse engineering or access to source code will be able to re-use this key to encrypt, decrypt, and/or sign data at will. Cryptographic keys should be unique, and randomly generated per user, per client.",
        "location": {
            "file_path": "vulns/hardcoded_secrets.swift",
            "line": 21,
            "column": 5,
            "end_line": 21,
            "end_column": 10
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "swift.commoncrypto.hardcoded-symmetric-key.hardcoded-symmetric-key",
            "message": "A hard-coded cryptographic key was detected. An attacker that obtains this key via reverse engineering or access to source code will be able to re-use this key to encrypt, decrypt, and/or sign data at will. Cryptographic keys should be unique, and randomly generated per user, per client.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-321: Use of Hard-coded Cryptographic Key"
            ],
            "owasp_names": [
                "A02:2021 - Cryptographic Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010661,
        "ref": "master",
        "syntactic_id": "da96e41a1f0e8d16677a6fb4b903b0a2",
        "match_based_id": "2a13a89126ffa1468c521c97d23b9c006c4be943b4d9a665800a861a132e46b1864a4ed534d1f393b62372a2e41e119bcf1d5207c899e248372121ae7eb81b50_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/hardcoded_secrets.swift#L57",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.918280Z",
        "relevant_since": "2024-05-22T10:36:17.897462Z",
        "rule_name": "swift.commoncrypto.hardcoded-symmetric-key.hardcoded-symmetric-key",
        "rule_message": "A hard-coded cryptographic key was detected. An attacker that obtains this key via reverse engineering or access to source code will be able to re-use this key to encrypt, decrypt, and/or sign data at will. Cryptographic keys should be unique, and randomly generated per user, per client.",
        "location": {
            "file_path": "vulns/hardcoded_secrets.swift",
            "line": 57,
            "column": 34,
            "end_line": 57,
            "end_column": 41
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "swift.commoncrypto.hardcoded-symmetric-key.hardcoded-symmetric-key",
            "message": "A hard-coded cryptographic key was detected. An attacker that obtains this key via reverse engineering or access to source code will be able to re-use this key to encrypt, decrypt, and/or sign data at will. Cryptographic keys should be unique, and randomly generated per user, per client.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-321: Use of Hard-coded Cryptographic Key"
            ],
            "owasp_names": [
                "A02:2021 - Cryptographic Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010660,
        "ref": "master",
        "syntactic_id": "c3e0bf06e9e1e571c1133ad646e1f41c",
        "match_based_id": "e1915a8ebc58d848b92a923461b0b31abedc79b5f19153a978accd4a29802e8fc3363982da781e5ee501c6bddd78e98fb105747016dd1e21dc9b69293a7e1c7f_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/hardcoded_secrets.swift#L22",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.918264Z",
        "relevant_since": "2024-05-22T10:36:17.897458Z",
        "rule_name": "swift.commoncrypto.insecure-crypto-aes-keysize.insecure-crypto-aes-keysize",
        "rule_message": "AES symmetric cryptographic operations were identified using a key size of 128bit which is less than the industry standard recommendation of 256bit.",
        "location": {
            "file_path": "vulns/hardcoded_secrets.swift",
            "line": 22,
            "column": 5,
            "end_line": 22,
            "end_column": 14
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "swift.commoncrypto.insecure-crypto-aes-keysize.insecure-crypto-aes-keysize",
            "message": "AES symmetric cryptographic operations were identified using a key size of 128bit which is less than the industry standard recommendation of 256bit.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-326: Inadequate Encryption Strength"
            ],
            "owasp_names": [
                "A03:2017 - Sensitive Data Exposure",
                "A02:2021 - Cryptographic Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010659,
        "ref": "master",
        "syntactic_id": "3c7f1c25bd63e6e95315e14362b8df20",
        "match_based_id": "9f69191d9f1b12e6cee4007db4128edd4718597a102491566f72e5f65c21a096b681ef83b0a09f8bbc0b9848393efdc4fb5d8b9ad1873e71243a710991fcbe10_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/hardcoded_secrets.swift#L40",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.918248Z",
        "relevant_since": "2024-05-22T10:36:17.897454Z",
        "rule_name": "swift.commoncrypto.insecure-crypto-aes-keysize.insecure-crypto-aes-keysize",
        "rule_message": "AES symmetric cryptographic operations were identified using a key size of 128bit which is less than the industry standard recommendation of 256bit.",
        "location": {
            "file_path": "vulns/hardcoded_secrets.swift",
            "line": 40,
            "column": 21,
            "end_line": 40,
            "end_column": 30
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "swift.commoncrypto.insecure-crypto-aes-keysize.insecure-crypto-aes-keysize",
            "message": "AES symmetric cryptographic operations were identified using a key size of 128bit which is less than the industry standard recommendation of 256bit.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-326: Inadequate Encryption Strength"
            ],
            "owasp_names": [
                "A03:2017 - Sensitive Data Exposure",
                "A02:2021 - Cryptographic Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010658,
        "ref": "master",
        "syntactic_id": "7d5fb03ae87c18b4bc9cdb817045ff98",
        "match_based_id": "6ff13e94eac7baa076357d82b06e8df0aa9d4172cd10e1b6e6ec91a1e664f5372e53d2397840708195c70871a4206f514419c33a4d28733c6653ac5103476bdc_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/hardcoded_secrets.swift#L16",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.918231Z",
        "relevant_since": "2024-05-22T10:36:17.897450Z",
        "rule_name": "swift.commoncrypto.insecure-crypto-cbc-mode.insecure-crypto-cbc-mode",
        "rule_message": "Symmetric cryptographic operations were identified that use Cipher Block Chaining (CBC) mode. AES in CBC mode provides unauthenticated cryptographic encryption. CBC is also malleable, meaning that an attacker can influence the decrypted plaintext by modifying bits of the ciphertext (bit flipping attacks). Consider using an authenticated encryption mechanism, such as AES-GCM or ChaChaPoly. If CBC mode is **required**, consider augmenting the encryption with authentication by signing the ciphertexts with a Message Authentication Code (e.g. HMAC).",
        "location": {
            "file_path": "vulns/hardcoded_secrets.swift",
            "line": 16,
            "column": 1,
            "end_line": 16,
            "end_column": 8
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "swift.commoncrypto.insecure-crypto-cbc-mode.insecure-crypto-cbc-mode",
            "message": "Symmetric cryptographic operations were identified that use Cipher Block Chaining (CBC) mode. AES in CBC mode provides unauthenticated cryptographic encryption. CBC is also malleable, meaning that an attacker can influence the decrypted plaintext by modifying bits of the ciphertext (bit flipping attacks). Consider using an authenticated encryption mechanism, such as AES-GCM or ChaChaPoly. If CBC mode is **required**, consider augmenting the encryption with authentication by signing the ciphertexts with a Message Authentication Code (e.g. HMAC).",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
            ],
            "owasp_names": [
                "A03:2017 - Sensitive Data Exposure",
                "A02:2021 - Cryptographic Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010657,
        "ref": "master",
        "syntactic_id": "f0492d655140ed46a4f39a7585d2571e",
        "match_based_id": "6ff13e94eac7baa076357d82b06e8df0aa9d4172cd10e1b6e6ec91a1e664f5372e53d2397840708195c70871a4206f514419c33a4d28733c6653ac5103476bdc_1",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/vulns/hardcoded_secrets.swift#L34",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-05-22T10:36:17.918209Z",
        "relevant_since": "2024-05-22T10:36:17.897446Z",
        "rule_name": "swift.commoncrypto.insecure-crypto-cbc-mode.insecure-crypto-cbc-mode",
        "rule_message": "Symmetric cryptographic operations were identified that use Cipher Block Chaining (CBC) mode. AES in CBC mode provides unauthenticated cryptographic encryption. CBC is also malleable, meaning that an attacker can influence the decrypted plaintext by modifying bits of the ciphertext (bit flipping attacks). Consider using an authenticated encryption mechanism, such as AES-GCM or ChaChaPoly. If CBC mode is **required**, consider augmenting the encryption with authentication by signing the ciphertexts with a Message Authentication Code (e.g. HMAC).",
        "location": {
            "file_path": "vulns/hardcoded_secrets.swift",
            "line": 34,
            "column": 17,
            "end_line": 34,
            "end_column": 24
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "swift.commoncrypto.insecure-crypto-cbc-mode.insecure-crypto-cbc-mode",
            "message": "Symmetric cryptographic operations were identified that use Cipher Block Chaining (CBC) mode. AES in CBC mode provides unauthenticated cryptographic encryption. CBC is also malleable, meaning that an attacker can influence the decrypted plaintext by modifying bits of the ciphertext (bit flipping attacks). Consider using an authenticated encryption mechanism, such as AES-GCM or ChaChaPoly. If CBC mode is **required**, consider augmenting the encryption with authentication by signing the ciphertexts with a Message Authentication Code (e.g. HMAC).",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Cryptographic Issues"
            ],
            "cwe_names": [
                "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
            ],
            "owasp_names": [
                "A03:2017 - Sensitive Data Exposure",
                "A02:2021 - Cryptographic Failures"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010656,
        "ref": "master",
        "syntactic_id": "0fb51dfdd942a6237e732b5c23480928",
        "match_based_id": "acedd5fd71ad62d918792555d5c88062cd44934ca0f032e45ef77515ca9514913ebc08333232a5741f27fb115c74e1c90cb5d041b1da0963274c9430577a916e_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/reverse_shell/main.tf#L33",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-05-22T10:36:17.918193Z",
        "relevant_since": "2024-05-22T10:36:17.897442Z",
        "rule_name": "terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address",
        "rule_message": "Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible.",
        "location": {
            "file_path": "reverse_shell/main.tf",
            "line": 33,
            "column": 1,
            "end_line": 41,
            "end_column": 2
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address",
            "message": "Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Improper Authorization"
            ],
            "cwe_names": [
                "CWE-284: Improper Access Control"
            ],
            "owasp_names": [
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010655,
        "ref": "master",
        "syntactic_id": "5507e6d5a84772e43cb215512ba787f7",
        "match_based_id": "0b3b792daab2dc62fd32d3312b5f93adeaaf3cc56f473f8ee518dbf61d96ade648a3e2d21315c12e5e60c401facd36ad19f9c2d5785bd72732b6b486aa7254be_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/docker-compose.yml#L23",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.918176Z",
        "relevant_since": "2024-05-22T10:36:17.897437Z",
        "rule_name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
        "rule_message": "Service 'db' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "location": {
            "file_path": "docker-compose.yml",
            "line": 23,
            "column": 3,
            "end_line": 23,
            "end_column": 5
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
            "message": "Service 'db' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Improper Authorization"
            ],
            "cwe_names": [
                "CWE-732: Incorrect Permission Assignment for Critical Resource"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 67010654,
        "ref": "master",
        "syntactic_id": "eb9c6bb430ea48df03959cc3c474090d",
        "match_based_id": "a4c9a5b5da893201bcf0908973bfd478af5ce99508d5c1313c871a7cd96bf620cc2c844d70e6da41d1f6e470eed9006460a3c74048353a89477dec781d9b1505_0",
        "repository": {
            "name": "local_scan/vulnado",
            "url": "https://github.com/nnayar-r2c/vulnado"
        },
        "line_of_code_url": "https://github.com/nnayar-r2c/vulnado/blob/81029cf4ccc5be5aae7e99c2a42b8ea0594b48a4/docker-compose.yml#L23",
        "first_seen_scan_id": 25986509,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-05-22T10:36:17.918134Z",
        "relevant_since": "2024-05-22T10:36:17.897426Z",
        "rule_name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
        "rule_message": "Service 'db' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "location": {
            "file_path": "docker-compose.yml",
            "line": 23,
            "column": 3,
            "end_line": 23,
            "end_column": 5
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
            "message": "Service 'db' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Improper Authorization"
            ],
            "cwe_names": [
                "CWE-732: Incorrect Permission Assignment for Critical Resource"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72095483,
        "ref": "main",
        "syntactic_id": "cd7b6840d8e69a64a56f4fe7689ecb8d",
        "match_based_id": "0d0de662f61bbf8a23cc2bbe1580077b74f2e30614ce15693020dcae4efdeef034bb03e256f99651372f9dc1a92869b93f82e43d04131db5542a55a4ce11407a_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/api/jwt/JwtLog4jController.java#L24",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T20:11:55.268706Z",
        "relevant_since": "2024-08-12T14:10:27.862086Z",
        "rule_name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
        "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
        "location": {
            "file_path": "src/main/java/hawk/api/jwt/JwtLog4jController.java",
            "line": 24,
            "column": 13,
            "end_line": 24,
            "end_column": 63
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-12T14:10:27.858239Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
            ],
            "owasp_names": [
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72095481,
        "ref": "main",
        "syntactic_id": "2638a7bd4a091d525cbdebdf15a5b65a",
        "match_based_id": "e74a74ebaa9dbc684beee24d255e34069e3f447d3260055cfb30231cb3cfdee291e60963811ec2423a442c5774b36a6519e77dae75c8acc941efb5363712f8e8_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/service/UserSearchService.java#L30",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T20:11:55.268675Z",
        "relevant_since": "2024-08-12T14:10:27.862086Z",
        "rule_name": "java.spring.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
        "location": {
            "file_path": "src/main/java/hawk/service/UserSearchService.java",
            "line": 30,
            "column": 28,
            "end_line": 31,
            "end_column": 50
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": "2024-08-12T14:10:27.858210Z",
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.spring.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "PII",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095484,
        "ref": "main",
        "syntactic_id": "8fb4324658e7ea08a3f655a23e5ccb41",
        "match_based_id": "748e940d5272b9f00493f8665c3b578b8499d149be1da2920b384817a13ecdc9ccd88d6f20485d89ab859af781dc4f68ee7c982207867f389b4242b58f05a0d6_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/keyStore.pem#L5",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T20:11:55.268721Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "generic.secrets.security.detected-private-key.detected-private-key",
        "rule_message": "Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.",
        "location": {
            "file_path": "src/main/resources/keyStore.pem",
            "line": 5,
            "column": 1,
            "end_line": 6,
            "end_column": 59
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "generic.secrets.security.detected-private-key.detected-private-key",
            "message": "Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Hard-coded Secrets"
            ],
            "cwe_names": [
                "CWE-798: Use of Hard-coded Credentials"
            ],
            "owasp_names": [
                "A07:2021 - Identification and Authentication Failures"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "cryptography",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095482,
        "ref": "main",
        "syntactic_id": "f041bf8eebdfbf05ff3eb1fd14dca9e6",
        "match_based_id": "8f8c76b208e9f10528d97311ff1432055c7dbe8ba2b8a6f2f8183c5ab8d3b68e904c60d926c72cbc5118a6d33bf96e8f0259120e241be58ab23d0f711b23af0f_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/application-postgresql.properties#L36",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T20:11:55.268690Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled",
        "rule_message": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a significant security risk.",
        "location": {
            "file_path": "src/main/resources/application-postgresql.properties",
            "line": 36,
            "column": 1,
            "end_line": 36,
            "end_column": 44
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled",
            "message": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a significant security risk.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Mishandled Sensitive Information"
            ],
            "cwe_names": [
                "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
            ],
            "owasp_names": [
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72095479,
        "ref": "main",
        "syntactic_id": "520a9c39bbddaf8edc05f555c18713ba",
        "match_based_id": "b497d9941bb9f64e2fd1b190d2d4e683908dc713bcdb1d4a24856f26ef3712d4e1f9146570c56e7280410251e10415666f317a394a3556e2730b807bcd1327fd_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/controller/LoginController.java#L57",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T20:11:55.268643Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
        "rule_message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
        "location": {
            "file_path": "src/main/java/hawk/controller/LoginController.java",
            "line": 57,
            "column": 9,
            "end_line": 57,
            "end_column": 60
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cookie Security"
            ],
            "cwe_names": [
                "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "user authentication",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095478,
        "ref": "main",
        "syntactic_id": "d684fc65e49523cac79c4a17f6c5d2e0",
        "match_based_id": "ba9e5d1fc18e6f18044e08b4b5d8f4aec117648638b21bbeac6475f943e287bae81b7246bd2aa5bf023667d742e18d5c24517539fe8e1d3f52a81cfc4e7f0abf_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/controller/LoginController.java#L57",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T20:11:55.268628Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
        "rule_message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);'",
        "location": {
            "file_path": "src/main/java/hawk/controller/LoginController.java",
            "line": 57,
            "column": 9,
            "end_line": 57,
            "end_column": 60
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);'",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cookie Security"
            ],
            "cwe_names": [
                "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "        Cookie loginCookie = new Cookie(\"XLOGINID\", cookieCode);\n        loginCookie.setSecure(true); // Ensure the cookie is only sent over secure channels\n        resp.addCookie(loginCookie);",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..cookie-missing-secure-flag', 'path': 'tmp79t1be6s.java', 'start': {'line': 57, 'col': 9, 'offset': 2485}, 'end': {'line': 57, 'col': 60, 'offset': 2536}, 'extra': {'metavars': {'$RESPONSE': {'start': {'line': 57, 'col': 9, 'offset': 2485}, 'end': {'line': 57, 'col': 13, 'offset': 2489}, 'abstract_content': 'resp'}, '$COOKIE': {'start': {'line': 57, 'col': 24, 'offset': 2500}, 'end': {'line': 57, 'col': 58, 'offset': 2534}, 'abstract_content': 'new Cookie(\"XLOGINID\"cookieCode)'}}, 'message': 'A cookie was detected without setting the \\'secure\\' flag. The \\'secure\\' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the \\'secure\\' flag by calling \\'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);\\'', 'metadata': {'cwe': [\"CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\"], 'owasp': ['A05:2021 - Security Misconfiguration'], 'source-rule-url': 'https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE', 'asvs': {'section': 'V3: Session Management Verification Requirements', 'control_id': '3.4.1 Missing Cookie Attribute', 'control_url': 'https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management', 'version': '4'}, 'category': 'security', 'technology': ['java'], 'references': ['https://owasp.org/Top10/A05_2021-Security_Misconfiguration'], 'subcategory': ['audit'], 'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'LOW', 'license': 'Commons Clause License Condition v1.0[LGPL-2.1-only]', 'vulnerability_class': ['Cookie Security']}, 'severity': 'WARNING', 'fingerprint': '19976ea1e9592d4a84beec2a0ae81ef84279482d235b736698cadbf9e51946c573e4cb65a3f231247f15726cc31e277af38d17f996d60f527b7a8c9fea0de571_0', 'lines': '        resp.addCookie(new Cookie(\"XLOGINID\", cookieCode));', 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmp79t1be6s.java']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Set the `secure` flag to `true` when creating the `Cookie` object.",
                "instructions": "1. Create a new `Cookie` object and set the `secure` flag to `true` using the `setSecure` method.\n    ```java\n    Cookie loginCookie = new Cookie(\"XLOGINID\", cookieCode);\n    loginCookie.setSecure(true);\n    ```\n2. Add the newly created `Cookie` object to the response.\n    ```java\n    resp.addCookie(loginCookie);\n    ```\n\nThe final code should look like this:\n```java\nString cookieCode = UUID.randomUUID().toString();\nloginCodes.put(\"cookie-\" + sessId, cookieCode);\nCookie loginCookie = new Cookie(\"XLOGINID\", cookieCode);\nloginCookie.setSecure(true);\nresp.addCookie(loginCookie);\n```"
            },
            "component": {
                "tag": "user authentication",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095477,
        "ref": "main",
        "syntactic_id": "be2f8c2c143d9ea11280a45d331ae1eb",
        "match_based_id": "32a9c639a672deed13f2b238db8a2f4a34c4331e505713d1242f7c056468266db7aa41a7cf93cc0479dcc7d8aa0c3279aeb166818fe94425cea841f3c7e4e7db_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/controller/LoginController.java#L57",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T20:11:55.268612Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
        "rule_message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
        "location": {
            "file_path": "src/main/java/hawk/controller/LoginController.java",
            "line": 57,
            "column": 9,
            "end_line": 57,
            "end_column": 60
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly",
            "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cookie Security"
            ],
            "cwe_names": [
                "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "user authentication",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095476,
        "ref": "main",
        "syntactic_id": "eadf31ff73cd1b444f8ec20eaa4e580b",
        "match_based_id": "0093520971753776bc6805f81368c825fd2f195fb1f6b6e8845432e450b8a9ee53cb099fbd6c1024c3dc4ca0aadd3c0968a2a5f7856eddc2e9b3592e8509ba26_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/controller/LoginController.java#L57",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T20:11:55.268597Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
        "rule_message": "The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)",
        "location": {
            "file_path": "src/main/java/hawk/controller/LoginController.java",
            "line": 57,
            "column": 9,
            "end_line": 57,
            "end_column": 60
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite",
            "message": "The application does not appear to verify inbound requests which can lead to a Cross-site request forgery (CSRF) vulnerability. If the application uses cookie-based authentication, an attacker can trick users into sending authenticated HTTP requests without their knowledge from any arbitrary domain they visit. To prevent this vulnerability start by identifying if the framework or library leveraged has built-in features or offers plugins for CSRF protection. CSRF tokens should be unique and securely random. The `Synchronizer Token` or `Double Submit Cookie` patterns with defense-in-depth mechanisms such as the `sameSite` cookie flag can help prevent CSRF. For more information, see: [Cross-site request forgery prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site Request Forgery (CSRF)"
            ],
            "cwe_names": [
                "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp_names": [
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "user authentication",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095475,
        "ref": "main",
        "syntactic_id": "6fd2c38ed68978931ed9a57b925bb89f",
        "match_based_id": "3d6f518ca26a22e090325fbef02cb2a1c4ab3195a567c3dd8a62ea5a5adcfabe692b6fd9db06480743846f37411ae57fd122b68876449d2cff6420f280b0e778_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/controller/LoginController.java#L57",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T20:11:55.268581Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
        "rule_message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);'",
        "location": {
            "file_path": "src/main/java/hawk/controller/LoginController.java",
            "line": 57,
            "column": 9,
            "end_line": 57,
            "end_column": 60
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag",
            "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);'",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cookie Security"
            ],
            "cwe_names": [
                "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "        Cookie loginCookie = new Cookie(\"XLOGINID\", cookieCode);\n        loginCookie.setSecure(true); // Ensure the cookie is only sent over HTTPS\n        resp.addCookie(loginCookie);",
                "explanation": "The fix did not remove the finding on the lines associated to the finding. Your objective is to edit your fix to remove the finding while keeping in mind the intention of the autofix. Here is the output:\n {'version': '1.59.0', 'errors': [], 'results': [{'check_id': '..cookie-missing-secure-flag', 'path': 'tmpvsftu1ws.java', 'start': {'line': 57, 'col': 9, 'offset': 2485}, 'end': {'line': 57, 'col': 60, 'offset': 2536}, 'extra': {'metavars': {'$RESPONSE': {'start': {'line': 57, 'col': 9, 'offset': 2485}, 'end': {'line': 57, 'col': 13, 'offset': 2489}, 'abstract_content': 'resp'}, '$COOKIE': {'start': {'line': 57, 'col': 24, 'offset': 2500}, 'end': {'line': 57, 'col': 58, 'offset': 2534}, 'abstract_content': 'new Cookie(\"XLOGINID\"cookieCode)'}}, 'message': 'A cookie was detected without setting the \\'secure\\' flag. The \\'secure\\' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the \\'secure\\' flag by calling \\'new Cookie(\"XLOGINID\", cookieCode).setSecure(true);\\'', 'metadata': {'likelihood': 'LOW', 'impact': 'LOW', 'confidence': 'HIGH', 'category': 'security', 'subcategory': ['audit'], 'asvs': {'section': 'V3: Session Management Verification Requirements', 'control_id': '3.4.1 Missing Cookie Attribute', 'control_url': 'https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management', 'version': '4'}, 'cwe': [\"CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\"], 'functional-categories': ['web::search::cookie-config::Servlet'], 'owasp': ['A05:2021 - Security Misconfiguration'], 'references': ['https://owasp.org/www-community/controls/SecureCookieAttribute'], 'source-rule-url': 'https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE', 'technology': ['java', 'servlets'], 'license': 'Copyright 2023 Semgrep, Inc.', 'vulnerability_class': ['Cookie Security']}, 'severity': 'WARNING', 'fingerprint': '3339009cc098893995dc10d5342d30aec2665a765dd3c655fa4c80e054b8dde5ad461905b1ef498b551b72caefc8edcaac03f8c5a953982f85a8c2ed30ff3e01_0', 'lines': '        resp.addCookie(new Cookie(\"XLOGINID\", cookieCode));', 'is_ignored': False, 'engine_kind': 'PRO', 'validation_state': 'NO_VALIDATOR'}}], 'paths': {'scanned': ['./tmpvsftu1ws.java']}, 'interfile_languages_used': [], 'skipped_rules': []}"
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Usa `SecureCookie` en lugar de `Cookie` para establecer autom\u00e1ticamente la bandera `secure` a `true`.",
                "instructions": "1. Cambia la creaci\u00f3n de la cookie para usar `SecureCookie` en lugar de `Cookie`.\n2. Aseg\u00farate de que `SecureCookie` est\u00e9 implementado en tu proyecto. Si no, crea una clase `SecureCookie` que extienda `Cookie` y establezca la bandera `secure` a `true` por defecto.\n\n```java\npublic class SecureCookie extends Cookie {\n    public SecureCookie(String name, String value) {\n        super(name, value);\n        this.setSecure(true);\n    }\n}\n```\n\n3. Reemplaza la l\u00ednea `resp.addCookie(new Cookie(\"XLOGINID\", cookieCode));` con `resp.addCookie(new SecureCookie(\"XLOGINID\", cookieCode));`.\n\n```java\nresp.addCookie(new SecureCookie(\"XLOGINID\", cookieCode));\n```\n\nEsto asegurar\u00e1 que la cookie solo se transmita a trav\u00e9s de canales seguros como HTTPS."
            },
            "component": {
                "tag": "user authentication",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095474,
        "ref": "main",
        "syntactic_id": "9fac97a7841bf0e0351448eb11d664ea",
        "match_based_id": "e514a05b734bec29a96dc7f2063214cc0af9b5cb4bafc65332eac0e5c668b62c227aeecad82b8a81c36addb97a3f574fb085ec6c3db1eecaacfbbd779518743c_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/MultiHttpSecurityConfig.java#L47",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T20:11:55.268566Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled",
        "rule_message": "CSRF protection is disabled for this configuration. This is a security risk.",
        "location": {
            "file_path": "src/main/java/hawk/MultiHttpSecurityConfig.java",
            "line": 47,
            "column": 13,
            "end_line": 50,
            "end_column": 42
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled",
            "message": "CSRF protection is disabled for this configuration. This is a security risk.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site Request Forgery (CSRF)"
            ],
            "cwe_names": [
                "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp_names": [
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "user authentication",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095473,
        "ref": "main",
        "syntactic_id": "e8fa796139f03cc77fb2153996fd0ea9",
        "match_based_id": "403b601c1cf2f664993a51a6025dd7c5f88ab55eb825b37550ee1e9000702f56887e2a18dc954403537c8badca9f45c5eb5606e0737b558f9608232fa0899ee0_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/MultiHttpSecurityConfig.java#L88",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T20:11:55.268551Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled",
        "rule_message": "CSRF protection is disabled for this configuration. This is a security risk.",
        "location": {
            "file_path": "src/main/java/hawk/MultiHttpSecurityConfig.java",
            "line": 88,
            "column": 13,
            "end_line": 91,
            "end_column": 38
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled",
            "message": "CSRF protection is disabled for this configuration. This is a security risk.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site Request Forgery (CSRF)"
            ],
            "cwe_names": [
                "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp_names": [
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "user authentication",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095472,
        "ref": "main",
        "syntactic_id": "e447e2d80c066fd9682a2a039cea4e95",
        "match_based_id": "8c490f4cf13edd9944ce978193aafc331aeec2b9545b1f1c32fa30ce494593df2a0ce8cd99d111beea77931c7332e0527aa254e850d0fabcec5498192e9b95fe_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/MultiHttpSecurityConfig.java#L110",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T20:11:55.268535Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled",
        "rule_message": "CSRF protection is disabled for this configuration. This is a security risk.",
        "location": {
            "file_path": "src/main/java/hawk/MultiHttpSecurityConfig.java",
            "line": 110,
            "column": 13,
            "end_line": 112,
            "end_column": 38
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled",
            "message": "CSRF protection is disabled for this configuration. This is a security risk.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site Request Forgery (CSRF)"
            ],
            "cwe_names": [
                "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp_names": [
                "A01:2021 - Broken Access Control"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "user authentication",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095471,
        "ref": "main",
        "syntactic_id": "6a86fc9f9f45119fbef7ebe3d074c21a",
        "match_based_id": "56e6622b87cd67e8cf2a70b6a9cfbf5cef39e875f72106908f8784dff44e779afa7c431d189456d0e2ee326ad2bcf8038f3278b99b55b66045b75c62db05dac6_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/templates/general.html#L30",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T20:11:55.268519Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
        "rule_message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "location": {
            "file_path": "src/main/resources/templates/general.html",
            "line": 30,
            "column": 13,
            "end_line": 32,
            "end_column": 20
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site Request Forgery (CSRF)"
            ],
            "cwe_names": [
                "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp_names": []
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72095470,
        "ref": "main",
        "syntactic_id": "0d78828517e7f02f95176a95b9b14027",
        "match_based_id": "eaaddc652abcdfd8d7edf3f9c551ddae9b99bdce1293c5e60e2f1b1887e1b23e0ff4a460bedc66037c17fd8a58fa9702f0669b98e48decfba400819401958912_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/templates/login-form-multi.html#L15",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T20:11:55.268503Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
        "rule_message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "location": {
            "file_path": "src/main/resources/templates/login-form-multi.html",
            "line": 15,
            "column": 13,
            "end_line": 33,
            "end_column": 20
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site Request Forgery (CSRF)"
            ],
            "cwe_names": [
                "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp_names": []
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "user authentication",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095469,
        "ref": "main",
        "syntactic_id": "44a3cf1acaaa87d211b2dda92f42d33e",
        "match_based_id": "de7ea1bb2459216f6d0533d0228ef53a4a36fb0f267279e51f200ea22cfe33f410257f5b1136bc236df266495acecde2b1d851f83a43cceb5543f59bc3e90392_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/templates/login.html#L15",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T20:11:55.268487Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
        "rule_message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "location": {
            "file_path": "src/main/resources/templates/login.html",
            "line": 15,
            "column": 13,
            "end_line": 28,
            "end_column": 20
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site Request Forgery (CSRF)"
            ],
            "cwe_names": [
                "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp_names": []
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "user authentication",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095468,
        "ref": "main",
        "syntactic_id": "146ffdb71366954ae316a864b0e6e457",
        "match_based_id": "5417172840bbda450fa5594f076f1980ec3c3af27ddcdef07ad4de230a7c152c48303349ffdcbaee8fb9e472f7096f0ece794a58d41e0980a5357237b485142f_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/templates/search.html#L14",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T20:11:55.268472Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
        "rule_message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "location": {
            "file_path": "src/main/resources/templates/search.html",
            "line": 14,
            "column": 13,
            "end_line": 20,
            "end_column": 20
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site Request Forgery (CSRF)"
            ],
            "cwe_names": [
                "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp_names": []
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72095467,
        "ref": "main",
        "syntactic_id": "e18b53be06356af886267277f26bcaeb",
        "match_based_id": "3a57d11b3400cd26337515a7d9ca59aa9433a7cea8098b60d9ba9833e92a67cf986399104d0e96a24ef5c7d5e713368f9c993a34ca952a1c2c846ebc5758a14f_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/resources/templates/user-search.html#L14",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T20:11:55.268456Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
        "rule_message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "location": {
            "file_path": "src/main/resources/templates/user-search.html",
            "line": 14,
            "column": 13,
            "end_line": 20,
            "end_column": 20
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "python.django.security.django-no-csrf-token.django-no-csrf-token",
            "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Cross-Site Request Forgery (CSRF)"
            ],
            "cwe_names": [
                "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp_names": []
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": null
        }
    },
    {
        "id": 72095466,
        "ref": "main",
        "syntactic_id": "5507e6d5a84772e43cb215512ba787f7",
        "match_based_id": "0b3b792daab2dc62fd32d3312b5f93adeaaf3cc56f473f8ee518dbf61d96ade648a3e2d21315c12e5e60c401facd36ad19f9c2d5785bd72732b6b486aa7254be_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/docker-compose.yml#L3",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T20:11:55.268441Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
        "rule_message": "Service 'db' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "location": {
            "file_path": "docker-compose.yml",
            "line": 3,
            "column": 3,
            "end_line": 3,
            "end_column": 5
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
            "message": "Service 'db' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Improper Authorization"
            ],
            "cwe_names": [
                "CWE-732: Incorrect Permission Assignment for Critical Resource"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "infrastructure",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095465,
        "ref": "main",
        "syntactic_id": "84b86eaf0c06160d96879ee0d4dcdec2",
        "match_based_id": "c205669c90cadcc099a5f1ade89d9b8cf413df130c0440284807554436ceeba85c1d7bc8d87a55a113ca4e5539715281ed92ef3709c871a65b91a216e2cbfd32_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/docker-compose.yml#L12",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T20:11:55.268425Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
        "rule_message": "Service 'javavulny' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "location": {
            "file_path": "docker-compose.yml",
            "line": 12,
            "column": 3,
            "end_line": 12,
            "end_column": 12
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
            "message": "Service 'javavulny' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Improper Authorization"
            ],
            "cwe_names": [
                "CWE-732: Incorrect Permission Assignment for Critical Resource"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "infrastructure",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095464,
        "ref": "main",
        "syntactic_id": "eb9c6bb430ea48df03959cc3c474090d",
        "match_based_id": "a4c9a5b5da893201bcf0908973bfd478af5ce99508d5c1313c871a7cd96bf620cc2c844d70e6da41d1f6e470eed9006460a3c74048353a89477dec781d9b1505_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/docker-compose.yml#L3",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T20:11:55.268409Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
        "rule_message": "Service 'db' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "location": {
            "file_path": "docker-compose.yml",
            "line": 3,
            "column": 3,
            "end_line": 3,
            "end_column": 5
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
            "message": "Service 'db' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Improper Authorization"
            ],
            "cwe_names": [
                "CWE-732: Incorrect Permission Assignment for Critical Resource"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "infrastructure",
                "risk": "high"
            }
        }
    },
    {
        "id": 72095463,
        "ref": "main",
        "syntactic_id": "1b60b86e25ea9b782c3ba7415f38c6f0",
        "match_based_id": "554c45717e6622ca8eaec1d789701653d658cbbe2057e19cb1882e2674e858ea79636ea02affc1616848322aebb07a4c2fe98a2d0f324afcaa934f56360f015e_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/docker-compose.yml#L12",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "low",
        "created_at": "2024-07-07T20:11:55.268374Z",
        "relevant_since": "2024-08-05T14:06:50.689100Z",
        "rule_name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
        "rule_message": "Service 'javavulny' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "location": {
            "file_path": "docker-compose.yml",
            "line": 12,
            "column": 3,
            "end_line": 12,
            "end_column": 12
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
            "message": "Service 'javavulny' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
            "confidence": "low",
            "category": "security",
            "subcategories": [
                "audit"
            ],
            "vulnerability_classes": [
                "Improper Authorization"
            ],
            "cwe_names": [
                "CWE-732: Incorrect Permission Assignment for Critical Resource"
            ],
            "owasp_names": [
                "A05:2021 - Security Misconfiguration",
                "A06:2017 - Security Misconfiguration"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "infrastructure",
                "risk": "high"
            }
        }
    },
    {
        "id": 72108922,
        "ref": "refs/pull/5/merge",
        "syntactic_id": "0027b646230c95ec62f4a0fee37ad2f9",
        "match_based_id": "307fa5554db111801064907b4a3921b5da3aa6c51516c1c1f62d02ec402f05796797d0ad41642f76296c73c86ae91ec24b9e17c26e7befe30ce08007210b36ad_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/3a207963027493fea09b37cdeef7c3ba5ee12e11/src/assistant-fix-custom-message.java#L14",
        "first_seen_scan_id": 30017809,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T23:55:19.388254Z",
        "relevant_since": "2024-07-07T23:55:19.386170Z",
        "rule_name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
        "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
        "location": {
            "file_path": "src/assistant-fix-custom-message.java",
            "line": 14,
            "column": 9,
            "end_line": 14,
            "end_column": 37
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep",
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
            ],
            "owasp_names": [
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "tests",
                "risk": "low"
            }
        }
    },
    {
        "id": 72108921,
        "ref": "refs/pull/5/merge",
        "syntactic_id": "2ad8f3bd11b367fe57c95a2f03afa0d8",
        "match_based_id": "ff70ff5b50b4cc80bbff4a32a39668f765259c447f23fea3dd628d1636f28b997f18f5c328b9d4cd6c452714de2ba7f117d4aed54d271ebf7a97a9685138ef02_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/3a207963027493fea09b37cdeef7c3ba5ee12e11/src/assistant-fix-custom-message.java#L14",
        "first_seen_scan_id": 30017809,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T23:55:19.388237Z",
        "relevant_since": "2024-07-07T23:55:19.386165Z",
        "rule_name": "semgrep_demo.crlf-injection-logs-deepsemgrep-javaorg-copy",
        "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content. Please use the Jsoup.clean() function to sanitize data.",
        "location": {
            "file_path": "src/assistant-fix-custom-message.java",
            "line": 14,
            "column": 9,
            "end_line": 14,
            "end_column": 37
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "semgrep_demo.crlf-injection-logs-deepsemgrep-javaorg-copy",
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content. Please use the Jsoup.clean() function to sanitize data.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
            ],
            "owasp_names": [
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "        String sanitizedParam = Jsoup.clean(param, Whitelist.none());\n        log.info(\"foo\" + sanitizedParam + \"bar\");",
                "explanation": "The fix uses Jsoup to sanitize the input parameter, which should address the issue of logging unsanitized input. However, there is a small chance that the sanitization might not cover all edge cases or that additional context-specific sanitization might be needed. Additionally, the Jsoup library needs to be imported, which might require minor changes in the codebase if not already included."
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Sanitize the parameter using the `safe_celfocus` function before logging it.",
                "instructions": "1. Import the `safe_celfocus` function at the top of your file:\n    ```java\n    import com.celfocus.sanitizer.safe_celfocus;\n    ```\n\n2. Use the `safe_celfocus` function to sanitize the `param` variable before logging it:\n    ```java\n    String sanitizedParam = safe_celfocus(param);\n    ```\n\n3. Update the logging statement to use the sanitized parameter:\n    ```java\n    log.info(\"foo\" + sanitizedParam + \"bar\");\n    ```\n\nYour updated code should look like this:\n\n```java\npackage com.vogella.logger.test;\n\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport com.vogella.logger.MyLogger;\nimport org.jsoup.Jsoup;\nimport com.celfocus.sanitizer.safe_celfocus;\n\npublic class TestLog1 {\n  private final static Logger log = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String param = request.getParameter(\"param\");\n        String sanitizedParam = safe_celfocus(param);\n        log.info(\"foo\" + sanitizedParam + \"bar\");\n        response.getWriter().append(\"Served at: \").append(request.getContextPath());\n    }\n}\n```"
            },
            "component": {
                "tag": "tests",
                "risk": "low"
            }
        }
    },
    {
        "id": 72108920,
        "ref": "refs/pull/5/merge",
        "syntactic_id": "7bb7faa454ceaf43c2327e322afca664",
        "match_based_id": "d5bd109ed1e6644652cc611ddf481429ab326102d94401806a161c3dd765895bd0e0202f8f2dd524f58f4f0a3942c416eb8e5ae01e3f1e22b1f0920c75f49796_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/3a207963027493fea09b37cdeef7c3ba5ee12e11/src/assistant-fix-custom-message.java#L13",
        "first_seen_scan_id": 30017809,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T23:55:19.388202Z",
        "relevant_since": "2024-07-07T23:55:19.386150Z",
        "rule_name": "java.lang.security.audit.crlf-injection-logs.crlf-injection-logs",
        "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
        "location": {
            "file_path": "src/assistant-fix-custom-message.java",
            "line": 13,
            "column": 9,
            "end_line": 14,
            "end_column": 37
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "java.lang.security.audit.crlf-injection-logs.crlf-injection-logs",
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
            ],
            "owasp_names": [
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "medium",
        "sourcing_policy": {
            "id": 65705,
            "name": "Rule Board - Audit column",
            "slug": "rule-board-audit"
        },
        "assistant": {
            "autofix": null,
            "autotriage": null,
            "guidance": null,
            "component": {
                "tag": "tests",
                "risk": "low"
            }
        }
    },
    {
        "id": 72108916,
        "ref": "refs/pull/4/merge",
        "syntactic_id": "dd5c739c5e006ce1847129057da6b001",
        "match_based_id": "82a09ae6b8133bb9055387f712c2c4b54da13355678c2981755eb56a33d34f176f18c43d63c10158f4e24d63a25940daf0dcc3dbfc0d3d18c06c055185c09c4b_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/c777606549d743073a189d91b75689b8c07d7c53/src/assistant-fix-sqli-sequelize.ts#L5",
        "first_seen_scan_id": 30017807,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T23:55:11.185852Z",
        "relevant_since": "2024-07-07T23:55:11.184689Z",
        "rule_name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
        "rule_message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
        "location": {
            "file_path": "src/assistant-fix-sqli-sequelize.ts",
            "line": 5,
            "column": 76,
            "end_line": 5,
            "end_column": 84
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.express.security.injection.tainted-sql-string.tainted-sql-string",
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      models.sequelize.query(\n        \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\",\n        {\n          replacements: { criteria: `%${criteria}%` },\n          type: models.sequelize.QueryTypes.SELECT\n        }\n      )",
                "explanation": "The fix addresses the SQL injection vulnerability by using parameterized queries, which is a correct approach. However, there is a small chance that the original issue might still be present if there are other parts of the code that handle `criteria` in an unsafe manner. Additionally, there might be other parts of the codebase that need to be updated to ensure compatibility with this change, such as how `models.sequelize` is used elsewhere."
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Use Sequelize parameterized queries instead of string concatenation.",
                "instructions": "1. Change the SQL query string to use parameterized query syntax. Replace the dynamic parts with placeholders like `:criteria`.\n    ```javascript\n    const query = \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\";\n    ```\n\n2. Pass the dynamic value in an object as the second parameter to the `sequelize.query` method.\n    ```javascript\n    models.sequelize.query(query, { replacements: { criteria: `%${criteria}%` } })\n    ```\n\n3. Replace the original query call with the updated parameterized query.\n    ```javascript\n    models.sequelize.query(query, { replacements: { criteria: `%${criteria}%` } })\n      .then(([products]: any) => {\n        const dataString = JSON.stringify(products)\n        for (let i = 0; i < products.length; i++) {\n          products[i].name = req.__(products[i].name)\n          products[i].description = req.__(products[i].description)\n        }\n        res.json(utils.queryResultToJson(products))\n      }).catch((error: ErrorWithParent) => {\n        next(error.parent)\n      })\n    ```\n\nUsing parameterized queries helps prevent SQL injection by ensuring that user input is treated as data rather than executable code."
            },
            "component": null
        }
    },
    {
        "id": 72108915,
        "ref": "refs/pull/4/merge",
        "syntactic_id": "5569d50d838914ada08b433d0760d09e",
        "match_based_id": "fe0d67be15ca767b9ad78f6e5d48550943d3be6481349c95a7d7d05fec4411a3d138af01320e287b203565cedd59844742f8cbc134aef23123f0f1ca0ba45e87_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/c777606549d743073a189d91b75689b8c07d7c53/src/assistant-fix-sqli-sequelize.ts#L5",
        "first_seen_scan_id": 30017807,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "high",
        "created_at": "2024-07-07T23:55:11.185816Z",
        "relevant_since": "2024-07-07T23:55:11.184677Z",
        "rule_name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
        "rule_message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
        "location": {
            "file_path": "src/assistant-fix-sqli-sequelize.ts",
            "line": 5,
            "column": 30,
            "end_line": 5,
            "end_column": 164
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection",
            "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.",
            "confidence": "high",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "SQL Injection"
            ],
            "cwe_names": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
            ],
            "owasp_names": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "      models.sequelize.query(\n        \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\",\n        {\n          replacements: { criteria: `%${criteria}%` },\n          type: models.sequelize.QueryTypes.SELECT\n        }\n      )",
                "explanation": "The fix addresses the SQL injection vulnerability by using parameterized queries, which is the main issue. However, there is a small chance that the criteria handling logic might still cause unexpected behavior if not thoroughly tested. Additionally, other parts of the code that interact with this query might need minor adjustments to accommodate the new query format."
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Use parameterized queries with Sequelize to prevent SQL injection.",
                "instructions": "1. Change the query string to use parameterized query syntax by replacing the dynamic values with placeholders.\n    ```typescript\n    const query = \"SELECT * FROM Products WHERE ((name LIKE :criteria OR description LIKE :criteria) AND deletedAt IS NULL) ORDER BY name\";\n    ```\n2. Pass the dynamic value in an object as the second parameter of the `sequelize.query` method.\n    ```typescript\n    models.sequelize.query(query, { replacements: { criteria: `%${criteria}%` } })\n    ```\n3. Replace the original query execution line with the updated parameterized query.\n    ```typescript\n    models.sequelize.query(query, { replacements: { criteria: `%${criteria}%` } })\n      .then(([products]: any) => {\n        const dataString = JSON.stringify(products)\n        for (let i = 0; i < products.length; i++) {\n          products[i].name = req.__(products[i].name)\n          products[i].description = req.__(products[i].description)\n        }\n        res.json(utils.queryResultToJson(products))\n      }).catch((error: ErrorWithParent) => {\n        next(error.parent)\n      })\n    ```\n\nUsing parameterized queries helps prevent SQL injection by ensuring that user input is treated as data rather than executable code."
            },
            "component": null
        }
    },
    {
        "id": 72095480,
        "ref": "main",
        "syntactic_id": "c99bbc9f2073fbc54c14c4d0a25cb29d",
        "match_based_id": "18e7e9a7afed8512abac732cb4ac803b1eca4fa0138b693b5a1e552b3304361bb5bf2979323a97e265e9653f1590ff2700f4a56cdfdf881bc08d104b63bc94a7_0",
        "repository": {
            "name": "Semgrep-Demo/pro-engine-demo",
            "url": "https://github.com/Semgrep-Demo/pro-engine-demo"
        },
        "line_of_code_url": "https://github.com/Semgrep-Demo/pro-engine-demo/blob/137216a415e12f5466f0b9342e33202d0e07095c/src/main/java/hawk/api/jwt/JwtLog4jController.java#L24",
        "first_seen_scan_id": 30013558,
        "state": "unresolved",
        "triage_state": "untriaged",
        "status": "open",
        "confidence": "medium",
        "created_at": "2024-07-07T20:11:55.268659Z",
        "relevant_since": "2024-07-07T20:11:55.262180Z",
        "rule_name": "semgrep_demo.crlf-injection-logs-deepsemgrep-javaorg-copy",
        "rule_message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content. Please use the Jsoup.clean() function to sanitize data.",
        "location": {
            "file_path": "src/main/java/hawk/api/jwt/JwtLog4jController.java",
            "line": 24,
            "column": 13,
            "end_line": 24,
            "end_column": 63
        },
        "triaged_at": null,
        "triage_comment": null,
        "triage_reason": null,
        "state_updated_at": null,
        "categories": [
            "security"
        ],
        "rule": {
            "name": "semgrep_demo.crlf-injection-logs-deepsemgrep-javaorg-copy",
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content. Please use the Jsoup.clean() function to sanitize data.",
            "confidence": "medium",
            "category": "security",
            "subcategories": [
                "vuln"
            ],
            "vulnerability_classes": [
                "Improper Validation"
            ],
            "cwe_names": [
                "CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"
            ],
            "owasp_names": [
                "A03:2021 - Injection"
            ]
        },
        "external_ticket": null,
        "severity": "high",
        "sourcing_policy": {
            "id": 65703,
            "name": "Rule Board - PR Comments column",
            "slug": "rule-board-pr-comments"
        },
        "assistant": {
            "autofix": {
                "fix_code": "            logger.info(\"{} = {}\", it, Jsoup.clean(request.getHeader(it), Whitelist.none()));",
                "explanation": "The suggested fix uses Jsoup to sanitize the header values, which should address potential security issues related to untrusted input. However, there is a small chance that the original issue might still be present if the problem was not related to input sanitization."
            },
            "autotriage": {
                "verdict": "true_positive",
                "reason": ""
            },
            "guidance": {
                "summary": "Use the `safe_hlag` sanitizer function to sanitize untrusted data before logging.",
                "instructions": "1. Import the `safe_hlag` sanitizer function by adding `import com.celfocus.sanitizer.safe_hlag;` at the top of your file.\n2. Locate the line where the logger is used: `logger.info(\"{} = {}\", it, request.getHeader(it));`.\n3. Sanitize the header value by wrapping `request.getHeader(it)` with `safe_hlag`. The updated line should be:\n    ```java\n    logger.info(\"{} = {}\", it, safe_hlag(request.getHeader(it)));\n    ```\n\nFor more information, please refer to our [AppSec Wiki](https://myappsec.com)."
            },
            "component": null
        }
    }
]